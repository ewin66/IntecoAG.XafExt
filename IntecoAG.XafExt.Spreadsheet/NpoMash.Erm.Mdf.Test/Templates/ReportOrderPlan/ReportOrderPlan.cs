using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Linq;
using System.Text;
//
using DevExpress.ExpressApp;
using DC = DevExpress.ExpressApp.DC;
using DevExpress.Data.Filtering;
using DevExpress.Persistent.Base;
using DevExpress.ExpressApp.Model;
using DevExpress.Persistent.BaseImpl;
using DevExpress.Persistent.Validation;
//
using DevExpress.Xpo;
using IntecoAG.XpoExt;
using IntecoAG.XafExt.Spreadsheet.MultiDimForms;

namespace NpoMash.Erm.Mdf.Test.Templates.ReportOrderPlan {
    
    
    public enum ReportOrderPlanReportType {
        REPORT = 1,
    }
    
    [Persistent("FmMdfTestReportOrderPlanReport")]
    public partial class ReportOrderPlanReport: MdfReport {
        
        [Association]
        [Aggregated]
        public XPCollection<ReportOrderPlanDeal> ReportOrderPlanDeals {
            get { return GetCollection<ReportOrderPlanDeal>(); }
        }
        
        [Association]
        [Aggregated]
        public XPCollection<ReportOrderPlanEntity> ReportOrderPlanEntitys {
            get { return GetCollection<ReportOrderPlanEntity>(); }
        }
        
        [Association]
        [Aggregated]
        public XPCollection<ReportOrderPlanFindeal> ReportOrderPlanFindeals {
            get { return GetCollection<ReportOrderPlanFindeal>(); }
        }
        
        [Association]
        [Aggregated]
        public XPCollection<ReportOrderPlanPeriod> ReportOrderPlanPeriods {
            get { return GetCollection<ReportOrderPlanPeriod>(); }
        }
        
        private ReportOrderPlanReportType _ValueType;
        public ReportOrderPlanReportType ValueType {
            get { return _ValueType; }
            set { SetPropertyValue(ref _ValueType, value); }
        }
        
        private System.DateTime _DateBegin;
        [RuleRequiredField]
        public System.DateTime DateBegin {
            get { return _DateBegin; }
            set { SetPropertyValue(ref _DateBegin, value); }
        }
        
        private System.DateTime _DateEnd;
        [RuleRequiredField]
        public System.DateTime DateEnd {
            get { return _DateEnd; }
            set { SetPropertyValue(ref _DateEnd, value); }
        }
        
        private System.DateTime _DateFact;
        [RuleRequiredField]
        public System.DateTime DateFact {
            get { return _DateFact; }
            set { SetPropertyValue(ref _DateFact, value); }
        }
        
        private ReportOrderPlanValuta _Valuta;
        [DataSourceCriteriaProperty("Container.ContainersCritery")]
        public ReportOrderPlanValuta Valuta {
            get { return _Valuta; }
            set { SetPropertyValue(ref _Valuta, value); }
        }
        
        private ReportOrderPlanValuta _ValutaSale;
        [DataSourceCriteriaProperty("Container.ContainersCritery")]
        public ReportOrderPlanValuta ValutaSale {
            get { return _ValutaSale; }
            set { SetPropertyValue(ref _ValutaSale, value); }
        }
        
        private ReportOrderPlanEntity _Entity;
        [RuleRequiredField]
        [DataSourceCriteriaProperty("Container.ContainersCritery")]
        public ReportOrderPlanEntity Entity {
            get { return _Entity; }
            set { SetPropertyValue(ref _Entity, value); }
        }
        
        private ReportOrderPlanOrder _Order;
        [RuleRequiredField]
        [DataSourceCriteriaProperty("Container.ContainersCritery")]
        public ReportOrderPlanOrder Order {
            get { return _Order; }
            set { SetPropertyValue(ref _Order, value); }
        }
        
        private ReportOrderPlanCorporator _Corporator;
        [DataSourceCriteriaProperty("Container.ContainersCritery")]
        public ReportOrderPlanCorporator Corporator {
            get { return _Corporator; }
            set { SetPropertyValue(ref _Corporator, value); }
        }
        
        private ReportOrderPlanPrimaryValue _StaffPrimaryValue;
        [DataSourceCriteriaProperty("Container.ContainersCritery")]
        public ReportOrderPlanPrimaryValue StaffPrimaryValue {
            get { return _StaffPrimaryValue; }
            set { SetPropertyValue(ref _StaffPrimaryValue, value); }
        }
        
        private ReportOrderPlanPresentmult _Presentmult;
        [DataSourceCriteriaProperty("Container.ContainersCritery")]
        public ReportOrderPlanPresentmult Presentmult {
            get { return _Presentmult; }
            set { SetPropertyValue(ref _Presentmult, value); }
        }
        
        private ReportOrderPlanVatMode _VatMode;
        [DataSourceCriteriaProperty("Container.ContainersCritery")]
        public ReportOrderPlanVatMode VatMode {
            get { return _VatMode; }
            set { SetPropertyValue(ref _VatMode, value); }
        }
        
        private ReportOrderPlanTemplate _ReportOrderPlanTemplate;
        public ReportOrderPlanTemplate ReportOrderPlanTemplate {
            get { return _ReportOrderPlanTemplate; }
            set { SetPropertyValue(ref _ReportOrderPlanTemplate, value); }
        }
        
        [Association]
        [Aggregated]
        public XPCollection<ReportOrderPlanDataPersIeBalance> DataPersIeBalances {
            get { return GetCollection<ReportOrderPlanDataPersIeBalance>(); }
        }
        
        [Association]
        [Aggregated]
        public XPCollection<ReportOrderPlanDataPersStandarts> DataPersStandartss {
            get { return GetCollection<ReportOrderPlanDataPersStandarts>(); }
        }
        
        [Association]
        [Aggregated]
        public XPCollection<ReportOrderPlanDataPersCfBalance> DataPersCfBalances {
            get { return GetCollection<ReportOrderPlanDataPersCfBalance>(); }
        }
        
        [Association]
        [Aggregated]
        public XPCollection<ReportOrderPlanDataPersCheck> DataPersChecks {
            get { return GetCollection<ReportOrderPlanDataPersCheck>(); }
        }
        
        [Association]
        [Aggregated]
        public XPCollection<ReportOrderPlanForm> Forms {
            get { return GetCollection<ReportOrderPlanForm>(); }
        }
        
        private ReportOrderPlanReportCore _ReportCore;
        [Browsable(false)]
        public ReportOrderPlanReportCore ReportCore {
            get {
                if (_ReportCore == null) {
                    _ReportCore = new  ReportOrderPlanReportCore(this);
                }
                return _ReportCore;
            }
        }
        
        public ReportOrderPlanReport(Session session): base(session) { }
    }
    
    public enum ReportOrderPlanTemplateType {
        TEMPLATE = 2,
    }
    
    [Persistent("FmMdfTestReportOrderPlanTemplate")]
    public partial class ReportOrderPlanTemplate: MdfTemplate {
        
        [Association]
        [Aggregated]
        public XPCollection<ReportOrderPlanArticle> ReportOrderPlanArticles {
            get { return GetCollection<ReportOrderPlanArticle>(); }
        }
        
        [Association]
        [Aggregated]
        public XPCollection<ReportOrderPlanDeal> ReportOrderPlanDeals {
            get { return GetCollection<ReportOrderPlanDeal>(); }
        }
        
        [Association]
        [Aggregated]
        public XPCollection<ReportOrderPlanEntity> ReportOrderPlanEntitys {
            get { return GetCollection<ReportOrderPlanEntity>(); }
        }
        
        [Association]
        [Aggregated]
        public XPCollection<ReportOrderPlanFindeal> ReportOrderPlanFindeals {
            get { return GetCollection<ReportOrderPlanFindeal>(); }
        }
        
        [Association]
        [Aggregated]
        public XPCollection<ReportOrderPlanFinrep> ReportOrderPlanFinreps {
            get { return GetCollection<ReportOrderPlanFinrep>(); }
        }
        
        [Association]
        [Aggregated]
        public XPCollection<ReportOrderPlanPayType> ReportOrderPlanPayTypes {
            get { return GetCollection<ReportOrderPlanPayType>(); }
        }
        
        [Association]
        [Aggregated]
        public XPCollection<ReportOrderPlanScenario> ReportOrderPlanScenarios {
            get { return GetCollection<ReportOrderPlanScenario>(); }
        }
        
        [Association]
        [Aggregated]
        public XPCollection<ReportOrderPlanValueType> ReportOrderPlanValueTypes {
            get { return GetCollection<ReportOrderPlanValueType>(); }
        }
        
        [Association]
        [Aggregated]
        public XPCollection<ReportOrderPlanValuta> ReportOrderPlanValutas {
            get { return GetCollection<ReportOrderPlanValuta>(); }
        }
        
        [Association]
        [Aggregated]
        public XPCollection<ReportOrderPlanVatMode> ReportOrderPlanVatModes {
            get { return GetCollection<ReportOrderPlanVatMode>(); }
        }
        
        [Association]
        [Aggregated]
        public XPCollection<ReportOrderPlanEntityKind> ReportOrderPlanEntityKinds {
            get { return GetCollection<ReportOrderPlanEntityKind>(); }
        }
        
        [Association]
        [Aggregated]
        public XPCollection<ReportOrderPlanDealKind> ReportOrderPlanDealKinds {
            get { return GetCollection<ReportOrderPlanDealKind>(); }
        }
        
        [Association]
        [Aggregated]
        public XPCollection<ReportOrderPlanCorporator> ReportOrderPlanCorporators {
            get { return GetCollection<ReportOrderPlanCorporator>(); }
        }
        
        [Association]
        [Aggregated]
        public XPCollection<ReportOrderPlanOrder> ReportOrderPlanOrders {
            get { return GetCollection<ReportOrderPlanOrder>(); }
        }
        
        [Association]
        [Aggregated]
        public XPCollection<ReportOrderPlanStandart> ReportOrderPlanStandarts {
            get { return GetCollection<ReportOrderPlanStandart>(); }
        }
        
        [Association]
        [Aggregated]
        public XPCollection<ReportOrderPlanPrimaryValue> ReportOrderPlanPrimaryValues {
            get { return GetCollection<ReportOrderPlanPrimaryValue>(); }
        }
        
        [Association]
        [Aggregated]
        public XPCollection<ReportOrderPlanFindealKind> ReportOrderPlanFindealKinds {
            get { return GetCollection<ReportOrderPlanFindealKind>(); }
        }
        
        [Association]
        [Aggregated]
        public XPCollection<ReportOrderPlanPresentmult> ReportOrderPlanPresentmults {
            get { return GetCollection<ReportOrderPlanPresentmult>(); }
        }
        
        private ReportOrderPlanTemplateType _ValueType;
        public ReportOrderPlanTemplateType ValueType {
            get { return _ValueType; }
            set { SetPropertyValue(ref _ValueType, value); }
        }
        
        public void ConstAllGenerate() {
            
            ConstOfTypeReportOrderPlanArticleGenerate(ReportOrderPlanArticleType.ARTICLE_INCOME);
            ConstOfTypeReportOrderPlanArticleGenerate(ReportOrderPlanArticleType.ARTICLE_EXPENSE);
            ConstOfTypeReportOrderPlanArticleGenerate(ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD);
            ConstOfTypeReportOrderPlanArticleGenerate(ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD_MATERIAL);
            ConstOfTypeReportOrderPlanArticleGenerate(ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD_COMPONENT);
            ConstOfTypeReportOrderPlanArticleGenerate(ReportOrderPlanArticleType.ARTICLE_EXPENSE_STAFF);
            ConstOfTypeReportOrderPlanArticleGenerate(ReportOrderPlanArticleType.ARTICLE_EXPENSE_PARTY);
            ConstOfTypeReportOrderPlanArticleGenerate(ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER);
            ConstOfTypeReportOrderPlanArticleGenerate(ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_TRIP);
            ConstOfTypeReportOrderPlanArticleGenerate(ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_LIC);
            ConstOfTypeReportOrderPlanArticleGenerate(ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_PASP);
            ConstOfTypeReportOrderPlanArticleGenerate(ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_TRANSP);
            ConstOfTypeReportOrderPlanArticleGenerate(ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_CUSTOM);
            ConstOfTypeReportOrderPlanArticleGenerate(ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_INSURANCE);
            ConstOfTypeReportOrderPlanArticleGenerate(ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_MORF);
            ConstOfTypeReportOrderPlanArticleGenerate(ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_FAPRID);
            ConstOfTypeReportOrderPlanArticleGenerate(ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_GUARANTEE);
            ConstOfTypeReportOrderPlanArticleGenerate(ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_COMMERC);
            ConstOfTypeReportOrderPlanArticleGenerate(ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_BANK);
            ConstOfTypeReportOrderPlanArticleGenerate(ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_OTHER);
            ConstOfTypeReportOrderPlanArticleGenerate(ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD_FERRO);
            ConstOfTypeReportOrderPlanArticleGenerate(ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD_NONFERRO);
            ConstOfTypeReportOrderPlanArticleGenerate(ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD_CABLE);
            ConstOfTypeReportOrderPlanArticleGenerate(ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD_CHEMICAL);
            ConstOfTypeReportOrderPlanArticleGenerate(ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD_STAMPING);
            ConstOfTypeReportOrderPlanArticleGenerate(ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD_INSTRUMENT);
            ConstOfTypeReportOrderPlanArticleGenerate(ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD_EQUIPMENT);
            ConstOfTypeReportOrderPlanArticleGenerate(ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD_OTHER);
            ConstOfTypeReportOrderPlanArticleGenerate(ReportOrderPlanArticleType.ARTICLE_VAT);
            ConstOfTypeReportOrderPlanArticleGenerate(ReportOrderPlanArticleType.HIE_ARTICLE_IE_ROOT);
            ConstOfTypeReportOrderPlanArticleGenerate(ReportOrderPlanArticleType.ARTICLE_EXPENSE_STAFF_SALARY);
            ConstOfTypeReportOrderPlanArticleGenerate(ReportOrderPlanArticleType.ARTICLE_EXPENSE_STAFF_INSURANCE);
            ConstOfTypeReportOrderPlanArticleGenerate(ReportOrderPlanArticleType.ARTICLE_EXPENSE_STAFF_OVERHEAD);
            ConstOfTypeReportOrderPlanArticleGenerate(ReportOrderPlanArticleType.ARTICLE_INCOME_SALE_REVENUE);
            ConstOfTypeReportOrderPlanArticleGenerate(ReportOrderPlanArticleType.ARTICLE_EXPENSE_PARTY_WORK);
            ConstOfTypeReportOrderPlanArticleGenerate(ReportOrderPlanArticleType.ARTICLE_EXPENSE_PARTY_COMPONENT);
            ConstOfTypeReportOrderPlanArticleGenerate(ReportOrderPlanArticleType.ARTICLE_INCOME_SALE);
            ConstOfTypeReportOrderPlanArticleGenerate(ReportOrderPlanArticleType.ARTICLE_EXPENSE_OWN);
            ConstOfTypeReportOrderPlanArticleGenerate(ReportOrderPlanArticleType.ARTICLE_INCOME_OWN);
            ConstOfTypeReportOrderPlanArticleGenerate(ReportOrderPlanArticleType.ARTICLE_EXPENSE_NOT_OWN);
            
            ConstOfTypeReportOrderPlanDealGenerate(ReportOrderPlanDealType.DEAL_KB);
            ConstOfTypeReportOrderPlanDealGenerate(ReportOrderPlanDealType.DEAL_OZM);
            ConstOfTypeReportOrderPlanDealGenerate(ReportOrderPlanDealType.DEAL_ORION);
            ConstOfTypeReportOrderPlanDealGenerate(ReportOrderPlanDealType.DEAL_LC);
            ConstOfTypeReportOrderPlanDealGenerate(ReportOrderPlanDealType.DEAL_OTHER_SALE);
            ConstOfTypeReportOrderPlanDealGenerate(ReportOrderPlanDealType.DEAL_OTHER_BUY);
            
            ConstOfTypeReportOrderPlanEntityGenerate(ReportOrderPlanEntityType.PARTY_BAY_STAFF_KB);
            ConstOfTypeReportOrderPlanEntityGenerate(ReportOrderPlanEntityType.PARTY_BAY_STAFF_OZM);
            ConstOfTypeReportOrderPlanEntityGenerate(ReportOrderPlanEntityType.PARTY_BAY_STAFF_ORION);
            ConstOfTypeReportOrderPlanEntityGenerate(ReportOrderPlanEntityType.PARTY_BAY_STAFF_LC);
            ConstOfTypeReportOrderPlanEntityGenerate(ReportOrderPlanEntityType.PARTY_BAY_PARTY_OTHER);
            ConstOfTypeReportOrderPlanEntityGenerate(ReportOrderPlanEntityType.PARTY_SALE_PARTY_OTHER);
            ConstOfTypeReportOrderPlanEntityGenerate(ReportOrderPlanEntityType.PARTY_BAY_INTERNAL);
            
            ConstOfTypeReportOrderPlanFindealGenerate(ReportOrderPlanFindealType.FINDEAL_STAFF_KB);
            ConstOfTypeReportOrderPlanFindealGenerate(ReportOrderPlanFindealType.FINDEAL_STAFF_OZM);
            ConstOfTypeReportOrderPlanFindealGenerate(ReportOrderPlanFindealType.FINDEAL_STAFF_ORION);
            ConstOfTypeReportOrderPlanFindealGenerate(ReportOrderPlanFindealType.FINDEAL_STAFF_LC);
            ConstOfTypeReportOrderPlanFindealGenerate(ReportOrderPlanFindealType.FINDEAL_OTHER_SALE);
            ConstOfTypeReportOrderPlanFindealGenerate(ReportOrderPlanFindealType.FINDEAL_OTHER_BUY_GOOD_CABLE);
            ConstOfTypeReportOrderPlanFindealGenerate(ReportOrderPlanFindealType.FINDEAL_OTHER_BUY_GOOD_CHEMICAL);
            ConstOfTypeReportOrderPlanFindealGenerate(ReportOrderPlanFindealType.FINDEAL_OTHER_BUY_GOOD_COMPONENT);
            ConstOfTypeReportOrderPlanFindealGenerate(ReportOrderPlanFindealType.FINDEAL_OTHER_BUY_GOOD_EQUIPMENT);
            ConstOfTypeReportOrderPlanFindealGenerate(ReportOrderPlanFindealType.FINDEAL_OTHER_BUY_GOOD_FERRO);
            ConstOfTypeReportOrderPlanFindealGenerate(ReportOrderPlanFindealType.FINDEAL_OTHER_BUY_GOOD_INSTRUMENT);
            ConstOfTypeReportOrderPlanFindealGenerate(ReportOrderPlanFindealType.FINDEAL_OTHER_BUY_GOOD_MATERIAL);
            ConstOfTypeReportOrderPlanFindealGenerate(ReportOrderPlanFindealType.FINDEAL_OTHER_BUY_GOOD_NONFERRO);
            ConstOfTypeReportOrderPlanFindealGenerate(ReportOrderPlanFindealType.FINDEAL_OTHER_BUY_GOOD_OTHER);
            ConstOfTypeReportOrderPlanFindealGenerate(ReportOrderPlanFindealType.FINDEAL_OTHER_BUY_GOOD_STAMPING);
            ConstOfTypeReportOrderPlanFindealGenerate(ReportOrderPlanFindealType.FINDEAL_OTHER_BUY_SERVICE_BANK);
            ConstOfTypeReportOrderPlanFindealGenerate(ReportOrderPlanFindealType.FINDEAL_OTHER_BUY_SERVICE_COMMERC);
            ConstOfTypeReportOrderPlanFindealGenerate(ReportOrderPlanFindealType.FINDEAL_OTHER_BUY_SERVICE_CUSTOM);
            ConstOfTypeReportOrderPlanFindealGenerate(ReportOrderPlanFindealType.FINDEAL_OTHER_BUY_SERVICE_FAPRID);
            ConstOfTypeReportOrderPlanFindealGenerate(ReportOrderPlanFindealType.FINDEAL_OTHER_BUY_SERVICE_GUARANTEE);
            ConstOfTypeReportOrderPlanFindealGenerate(ReportOrderPlanFindealType.FINDEAL_OTHER_BUY_SERVICE_INSURANCE);
            ConstOfTypeReportOrderPlanFindealGenerate(ReportOrderPlanFindealType.FINDEAL_OTHER_BUY_SERVICE_LIC);
            ConstOfTypeReportOrderPlanFindealGenerate(ReportOrderPlanFindealType.FINDEAL_OTHER_BUY_SERVICE_MORF);
            ConstOfTypeReportOrderPlanFindealGenerate(ReportOrderPlanFindealType.FINDEAL_OTHER_BUY_SERVICE_OTHER);
            ConstOfTypeReportOrderPlanFindealGenerate(ReportOrderPlanFindealType.FINDEAL_OTHER_BUY_SERVICE_PASP);
            ConstOfTypeReportOrderPlanFindealGenerate(ReportOrderPlanFindealType.FINDEAL_OTHER_BUY_SERVICE_TRANSP);
            ConstOfTypeReportOrderPlanFindealGenerate(ReportOrderPlanFindealType.FINDEAL_OTHER_BUY_SERVICE_TRIP);
            
            ConstOfTypeReportOrderPlanFinrepGenerate(ReportOrderPlanFinrepType.FINREP_IE);
            ConstOfTypeReportOrderPlanFinrepGenerate(ReportOrderPlanFinrepType.FINREP_CF);
            ConstOfTypeReportOrderPlanFinrepGenerate(ReportOrderPlanFinrepType.FINREP_DC);
            
            ConstOfTypeReportOrderPlanPayTypeGenerate(ReportOrderPlanPayTypeType.PREPAYMENT);
            ConstOfTypeReportOrderPlanPayTypeGenerate(ReportOrderPlanPayTypeType.POSTPAYMENT);
            
            ConstOfTypeReportOrderPlanScenarioGenerate(ReportOrderPlanScenarioType.PLAN);
            ConstOfTypeReportOrderPlanScenarioGenerate(ReportOrderPlanScenarioType.FACT);
            ConstOfTypeReportOrderPlanScenarioGenerate(ReportOrderPlanScenarioType.FORECAST);
            ConstOfTypeReportOrderPlanScenarioGenerate(ReportOrderPlanScenarioType.IMPORT);
            
            ConstOfTypeReportOrderPlanValueTypeGenerate(ReportOrderPlanValueTypeType.BALANCE);
            ConstOfTypeReportOrderPlanValueTypeGenerate(ReportOrderPlanValueTypeType.COUNT);
            ConstOfTypeReportOrderPlanValueTypeGenerate(ReportOrderPlanValueTypeType.COST);
            ConstOfTypeReportOrderPlanValueTypeGenerate(ReportOrderPlanValueTypeType.SUMMALL);
            ConstOfTypeReportOrderPlanValueTypeGenerate(ReportOrderPlanValueTypeType.VAT);
            ConstOfTypeReportOrderPlanValueTypeGenerate(ReportOrderPlanValueTypeType.STANDART);
            ConstOfTypeReportOrderPlanValueTypeGenerate(ReportOrderPlanValueTypeType.INSURANCE);
            ConstOfTypeReportOrderPlanValueTypeGenerate(ReportOrderPlanValueTypeType.OVERHEAD);
            ConstOfTypeReportOrderPlanValueTypeGenerate(ReportOrderPlanValueTypeType.STAFFCF);
            ConstOfTypeReportOrderPlanValueTypeGenerate(ReportOrderPlanValueTypeType.VATINCOST);
            ConstOfTypeReportOrderPlanValueTypeGenerate(ReportOrderPlanValueTypeType.ADVANCE);
            ConstOfTypeReportOrderPlanValueTypeGenerate(ReportOrderPlanValueTypeType.STAFFZP);
            ConstOfTypeReportOrderPlanValueTypeGenerate(ReportOrderPlanValueTypeType.PRESENTMULT);
            
            ConstOfTypeReportOrderPlanValutaGenerate(ReportOrderPlanValutaType.USD);
            ConstOfTypeReportOrderPlanValutaGenerate(ReportOrderPlanValutaType.EUR);
            ConstOfTypeReportOrderPlanValutaGenerate(ReportOrderPlanValutaType.RUB);
            
            ConstOfTypeReportOrderPlanVatModeGenerate(ReportOrderPlanVatModeType.NOT_SUBJECT);
            ConstOfTypeReportOrderPlanVatModeGenerate(ReportOrderPlanVatModeType.NORMAL);
            ConstOfTypeReportOrderPlanVatModeGenerate(ReportOrderPlanVatModeType.EXPORT);
            
            ConstOfTypeReportOrderPlanEntityKindGenerate(ReportOrderPlanEntityKindType.ENTITY);
            ConstOfTypeReportOrderPlanEntityKindGenerate(ReportOrderPlanEntityKindType.STAFF);
            ConstOfTypeReportOrderPlanEntityKindGenerate(ReportOrderPlanEntityKindType.INTERNAL);
            
            ConstOfTypeReportOrderPlanDealKindGenerate(ReportOrderPlanDealKindType.SALE);
            ConstOfTypeReportOrderPlanDealKindGenerate(ReportOrderPlanDealKindType.BUY);
            
            ConstOfTypeReportOrderPlanCorporatorGenerate(ReportOrderPlanCorporatorType.NPO_MASH);
            
            ConstOfTypeReportOrderPlanStandartGenerate(ReportOrderPlanStandartType.STD_EXCHANGE_RATE);
            ConstOfTypeReportOrderPlanStandartGenerate(ReportOrderPlanStandartType.STD_STAFF_FOT);
            ConstOfTypeReportOrderPlanStandartGenerate(ReportOrderPlanStandartType.STD_STAFF_INSURANCE);
            ConstOfTypeReportOrderPlanStandartGenerate(ReportOrderPlanStandartType.STD_STAFF_OVERHEAD);
            ConstOfTypeReportOrderPlanStandartGenerate(ReportOrderPlanStandartType.STD_TAX_VAT);
            
            ConstOfTypeReportOrderPlanPrimaryValueGenerate(ReportOrderPlanPrimaryValueType.PRIMARY_SUMM_COST);
            ConstOfTypeReportOrderPlanPrimaryValueGenerate(ReportOrderPlanPrimaryValueType.PRIMARY_SUMM_ALL);
            ConstOfTypeReportOrderPlanPrimaryValueGenerate(ReportOrderPlanPrimaryValueType.PRIMARY_COUNT);
            ConstOfTypeReportOrderPlanPrimaryValueGenerate(ReportOrderPlanPrimaryValueType.PRIMARY_BALANCE);
            
            ConstOfTypeReportOrderPlanFindealKindGenerate(ReportOrderPlanFindealKindType.TRADE);
            ConstOfTypeReportOrderPlanFindealKindGenerate(ReportOrderPlanFindealKindType.RESERVE);
            ConstOfTypeReportOrderPlanFindealKindGenerate(ReportOrderPlanFindealKindType.TRANSFER);
            
            ConstOfTypeReportOrderPlanPresentmultGenerate(ReportOrderPlanPresentmultType.MULT_NONE);
            ConstOfTypeReportOrderPlanPresentmultGenerate(ReportOrderPlanPresentmultType.MULT_THROUSANT);
            ConstOfTypeReportOrderPlanPresentmultGenerate(ReportOrderPlanPresentmultType.MULT_MILLION);
            
        }
        
        public void ConstOfTypeReportOrderPlanArticleGenerate(ReportOrderPlanArticleType member) {
            var enum_type = typeof(ReportOrderPlanArticleType);
            ReportOrderPlanArticle value = ReportOrderPlanArticles.FirstOrDefault(x => x.ValueType == member);
            if (value == null) {
                value = new ReportOrderPlanArticle(Session);
                value.ValueType = member;
                value.Code = enum_type.GetEnumName(member);
                ReportOrderPlanArticles.Add(value);
            }
        }
        
        public void ConstOfTypeReportOrderPlanDealGenerate(ReportOrderPlanDealType member) {
            var enum_type = typeof(ReportOrderPlanDealType);
            ReportOrderPlanDeal value = ReportOrderPlanDeals.FirstOrDefault(x => x.ValueType == member);
            if (value == null) {
                value = new ReportOrderPlanDeal(Session);
                value.ValueType = member;
                value.Code = enum_type.GetEnumName(member);
                ReportOrderPlanDeals.Add(value);
            }
        }
        
        public void ConstOfTypeReportOrderPlanEntityGenerate(ReportOrderPlanEntityType member) {
            var enum_type = typeof(ReportOrderPlanEntityType);
            ReportOrderPlanEntity value = ReportOrderPlanEntitys.FirstOrDefault(x => x.ValueType == member);
            if (value == null) {
                value = new ReportOrderPlanEntity(Session);
                value.ValueType = member;
                value.Code = enum_type.GetEnumName(member);
                ReportOrderPlanEntitys.Add(value);
            }
        }
        
        public void ConstOfTypeReportOrderPlanFindealGenerate(ReportOrderPlanFindealType member) {
            var enum_type = typeof(ReportOrderPlanFindealType);
            ReportOrderPlanFindeal value = ReportOrderPlanFindeals.FirstOrDefault(x => x.ValueType == member);
            if (value == null) {
                value = new ReportOrderPlanFindeal(Session);
                value.ValueType = member;
                value.Code = enum_type.GetEnumName(member);
                ReportOrderPlanFindeals.Add(value);
            }
        }
        
        public void ConstOfTypeReportOrderPlanFinrepGenerate(ReportOrderPlanFinrepType member) {
            var enum_type = typeof(ReportOrderPlanFinrepType);
            ReportOrderPlanFinrep value = ReportOrderPlanFinreps.FirstOrDefault(x => x.ValueType == member);
            if (value == null) {
                value = new ReportOrderPlanFinrep(Session);
                value.ValueType = member;
                value.Code = enum_type.GetEnumName(member);
                ReportOrderPlanFinreps.Add(value);
            }
        }
        
        public void ConstOfTypeReportOrderPlanPayTypeGenerate(ReportOrderPlanPayTypeType member) {
            var enum_type = typeof(ReportOrderPlanPayTypeType);
            ReportOrderPlanPayType value = ReportOrderPlanPayTypes.FirstOrDefault(x => x.ValueType == member);
            if (value == null) {
                value = new ReportOrderPlanPayType(Session);
                value.ValueType = member;
                value.Code = enum_type.GetEnumName(member);
                ReportOrderPlanPayTypes.Add(value);
            }
        }
        
        public void ConstOfTypeReportOrderPlanScenarioGenerate(ReportOrderPlanScenarioType member) {
            var enum_type = typeof(ReportOrderPlanScenarioType);
            ReportOrderPlanScenario value = ReportOrderPlanScenarios.FirstOrDefault(x => x.ValueType == member);
            if (value == null) {
                value = new ReportOrderPlanScenario(Session);
                value.ValueType = member;
                value.Code = enum_type.GetEnumName(member);
                ReportOrderPlanScenarios.Add(value);
            }
        }
        
        public void ConstOfTypeReportOrderPlanValueTypeGenerate(ReportOrderPlanValueTypeType member) {
            var enum_type = typeof(ReportOrderPlanValueTypeType);
            ReportOrderPlanValueType value = ReportOrderPlanValueTypes.FirstOrDefault(x => x.ValueType == member);
            if (value == null) {
                value = new ReportOrderPlanValueType(Session);
                value.ValueType = member;
                value.Code = enum_type.GetEnumName(member);
                ReportOrderPlanValueTypes.Add(value);
            }
        }
        
        public void ConstOfTypeReportOrderPlanValutaGenerate(ReportOrderPlanValutaType member) {
            var enum_type = typeof(ReportOrderPlanValutaType);
            ReportOrderPlanValuta value = ReportOrderPlanValutas.FirstOrDefault(x => x.ValueType == member);
            if (value == null) {
                value = new ReportOrderPlanValuta(Session);
                value.ValueType = member;
                value.Code = enum_type.GetEnumName(member);
                ReportOrderPlanValutas.Add(value);
            }
        }
        
        public void ConstOfTypeReportOrderPlanVatModeGenerate(ReportOrderPlanVatModeType member) {
            var enum_type = typeof(ReportOrderPlanVatModeType);
            ReportOrderPlanVatMode value = ReportOrderPlanVatModes.FirstOrDefault(x => x.ValueType == member);
            if (value == null) {
                value = new ReportOrderPlanVatMode(Session);
                value.ValueType = member;
                value.Code = enum_type.GetEnumName(member);
                ReportOrderPlanVatModes.Add(value);
            }
        }
        
        public void ConstOfTypeReportOrderPlanEntityKindGenerate(ReportOrderPlanEntityKindType member) {
            var enum_type = typeof(ReportOrderPlanEntityKindType);
            ReportOrderPlanEntityKind value = ReportOrderPlanEntityKinds.FirstOrDefault(x => x.ValueType == member);
            if (value == null) {
                value = new ReportOrderPlanEntityKind(Session);
                value.ValueType = member;
                value.Code = enum_type.GetEnumName(member);
                ReportOrderPlanEntityKinds.Add(value);
            }
        }
        
        public void ConstOfTypeReportOrderPlanDealKindGenerate(ReportOrderPlanDealKindType member) {
            var enum_type = typeof(ReportOrderPlanDealKindType);
            ReportOrderPlanDealKind value = ReportOrderPlanDealKinds.FirstOrDefault(x => x.ValueType == member);
            if (value == null) {
                value = new ReportOrderPlanDealKind(Session);
                value.ValueType = member;
                value.Code = enum_type.GetEnumName(member);
                ReportOrderPlanDealKinds.Add(value);
            }
        }
        
        public void ConstOfTypeReportOrderPlanCorporatorGenerate(ReportOrderPlanCorporatorType member) {
            var enum_type = typeof(ReportOrderPlanCorporatorType);
            ReportOrderPlanCorporator value = ReportOrderPlanCorporators.FirstOrDefault(x => x.ValueType == member);
            if (value == null) {
                value = new ReportOrderPlanCorporator(Session);
                value.ValueType = member;
                value.Code = enum_type.GetEnumName(member);
                ReportOrderPlanCorporators.Add(value);
            }
        }
        
        public void ConstOfTypeReportOrderPlanStandartGenerate(ReportOrderPlanStandartType member) {
            var enum_type = typeof(ReportOrderPlanStandartType);
            ReportOrderPlanStandart value = ReportOrderPlanStandarts.FirstOrDefault(x => x.ValueType == member);
            if (value == null) {
                value = new ReportOrderPlanStandart(Session);
                value.ValueType = member;
                value.Code = enum_type.GetEnumName(member);
                ReportOrderPlanStandarts.Add(value);
            }
        }
        
        public void ConstOfTypeReportOrderPlanPrimaryValueGenerate(ReportOrderPlanPrimaryValueType member) {
            var enum_type = typeof(ReportOrderPlanPrimaryValueType);
            ReportOrderPlanPrimaryValue value = ReportOrderPlanPrimaryValues.FirstOrDefault(x => x.ValueType == member);
            if (value == null) {
                value = new ReportOrderPlanPrimaryValue(Session);
                value.ValueType = member;
                value.Code = enum_type.GetEnumName(member);
                ReportOrderPlanPrimaryValues.Add(value);
            }
        }
        
        public void ConstOfTypeReportOrderPlanFindealKindGenerate(ReportOrderPlanFindealKindType member) {
            var enum_type = typeof(ReportOrderPlanFindealKindType);
            ReportOrderPlanFindealKind value = ReportOrderPlanFindealKinds.FirstOrDefault(x => x.ValueType == member);
            if (value == null) {
                value = new ReportOrderPlanFindealKind(Session);
                value.ValueType = member;
                value.Code = enum_type.GetEnumName(member);
                ReportOrderPlanFindealKinds.Add(value);
            }
        }
        
        public void ConstOfTypeReportOrderPlanPresentmultGenerate(ReportOrderPlanPresentmultType member) {
            var enum_type = typeof(ReportOrderPlanPresentmultType);
            ReportOrderPlanPresentmult value = ReportOrderPlanPresentmults.FirstOrDefault(x => x.ValueType == member);
            if (value == null) {
                value = new ReportOrderPlanPresentmult(Session);
                value.ValueType = member;
                value.Code = enum_type.GetEnumName(member);
                ReportOrderPlanPresentmults.Add(value);
            }
        }
        
        public void ConstAllHierarchyLink() {
            
            ConstHierarhyHieArticleIeLink(ReportOrderPlanArticleType.HIE_ARTICLE_IE_ROOT, ReportOrderPlanArticleType.ARTICLE_INCOME, 10);
            ConstHierarhyHieArticleIeLink(ReportOrderPlanArticleType.HIE_ARTICLE_IE_ROOT, ReportOrderPlanArticleType.ARTICLE_EXPENSE, 20);
            ConstHierarhyHieArticleIeLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE, ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD, 10);
            ConstHierarhyHieArticleIeLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE, ReportOrderPlanArticleType.ARTICLE_EXPENSE_STAFF, 20);
            ConstHierarhyHieArticleIeLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER, 40);
            ConstHierarhyHieArticleIeLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE, ReportOrderPlanArticleType.ARTICLE_EXPENSE_PARTY, 30);
            ConstHierarhyHieArticleIeLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_TRIP, 10);
            ConstHierarhyHieArticleIeLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_LIC, 20);
            ConstHierarhyHieArticleIeLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_PASP, 30);
            ConstHierarhyHieArticleIeLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_TRANSP, 40);
            ConstHierarhyHieArticleIeLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_CUSTOM, 50);
            ConstHierarhyHieArticleIeLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_INSURANCE, 60);
            ConstHierarhyHieArticleIeLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_MORF, 70);
            ConstHierarhyHieArticleIeLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_FAPRID, 80);
            ConstHierarhyHieArticleIeLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_GUARANTEE, 90);
            ConstHierarhyHieArticleIeLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_COMMERC, 100);
            ConstHierarhyHieArticleIeLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_BANK, 110);
            ConstHierarhyHieArticleIeLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_OTHER, 120);
            ConstHierarhyHieArticleIeLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD, ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD_FERRO, 10);
            ConstHierarhyHieArticleIeLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD, ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD_NONFERRO, 20);
            ConstHierarhyHieArticleIeLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD, ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD_CABLE, 30);
            ConstHierarhyHieArticleIeLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD, ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD_CHEMICAL, 40);
            ConstHierarhyHieArticleIeLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD, ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD_STAMPING, 50);
            ConstHierarhyHieArticleIeLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD, ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD_COMPONENT, 60);
            ConstHierarhyHieArticleIeLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD, ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD_INSTRUMENT, 70);
            ConstHierarhyHieArticleIeLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD, ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD_EQUIPMENT, 80);
            ConstHierarhyHieArticleIeLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD, ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD_OTHER, 90);
            ConstHierarhyHieArticleIeLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_STAFF, ReportOrderPlanArticleType.ARTICLE_EXPENSE_STAFF_SALARY, 10);
            ConstHierarhyHieArticleIeLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_STAFF, ReportOrderPlanArticleType.ARTICLE_EXPENSE_STAFF_INSURANCE, 20);
            ConstHierarhyHieArticleIeLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_STAFF, ReportOrderPlanArticleType.ARTICLE_EXPENSE_STAFF_OVERHEAD, 30);
            ConstHierarhyHieArticleIeLink(ReportOrderPlanArticleType.ARTICLE_INCOME, ReportOrderPlanArticleType.ARTICLE_INCOME_SALE, 10);
            ConstHierarhyHieArticleIeLink(ReportOrderPlanArticleType.ARTICLE_INCOME_SALE, ReportOrderPlanArticleType.ARTICLE_INCOME_SALE_REVENUE, 20);
            ConstHierarhyHieArticleIeLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_PARTY, ReportOrderPlanArticleType.ARTICLE_EXPENSE_PARTY_WORK, 20);
            ConstHierarhyHieArticleIeLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_PARTY, ReportOrderPlanArticleType.ARTICLE_EXPENSE_PARTY_COMPONENT, 10);
            
            ConstHierarhyHieArticleCfLink(ReportOrderPlanArticleType.HIE_ARTICLE_IE_ROOT, ReportOrderPlanArticleType.ARTICLE_INCOME, 10);
            ConstHierarhyHieArticleCfLink(ReportOrderPlanArticleType.HIE_ARTICLE_IE_ROOT, ReportOrderPlanArticleType.ARTICLE_EXPENSE, 20);
            ConstHierarhyHieArticleCfLink(ReportOrderPlanArticleType.ARTICLE_INCOME_OWN, ReportOrderPlanArticleType.ARTICLE_INCOME_SALE, 10);
            ConstHierarhyHieArticleCfLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_OWN, ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD, 10);
            ConstHierarhyHieArticleCfLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_OWN, ReportOrderPlanArticleType.ARTICLE_EXPENSE_STAFF, 20);
            ConstHierarhyHieArticleCfLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_OWN, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER, 40);
            ConstHierarhyHieArticleCfLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_NOT_OWN, ReportOrderPlanArticleType.ARTICLE_EXPENSE_PARTY, 31);
            ConstHierarhyHieArticleCfLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OWN, 10);
            ConstHierarhyHieArticleCfLink(ReportOrderPlanArticleType.ARTICLE_INCOME_SALE, ReportOrderPlanArticleType.ARTICLE_INCOME_SALE_REVENUE, 20);
            ConstHierarhyHieArticleCfLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD, ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD_FERRO, 10);
            ConstHierarhyHieArticleCfLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD, ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD_NONFERRO, 20);
            ConstHierarhyHieArticleCfLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD, ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD_CABLE, 30);
            ConstHierarhyHieArticleCfLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD, ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD_CHEMICAL, 40);
            ConstHierarhyHieArticleCfLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD, ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD_STAMPING, 50);
            ConstHierarhyHieArticleCfLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD, ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD_COMPONENT, 60);
            ConstHierarhyHieArticleCfLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD, ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD_INSTRUMENT, 70);
            ConstHierarhyHieArticleCfLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD, ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD_EQUIPMENT, 80);
            ConstHierarhyHieArticleCfLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD, ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD_OTHER, 90);
            ConstHierarhyHieArticleCfLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_STAFF, ReportOrderPlanArticleType.ARTICLE_EXPENSE_STAFF_SALARY, 10);
            ConstHierarhyHieArticleCfLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_STAFF, ReportOrderPlanArticleType.ARTICLE_EXPENSE_STAFF_INSURANCE, 20);
            ConstHierarhyHieArticleCfLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_STAFF, ReportOrderPlanArticleType.ARTICLE_EXPENSE_STAFF_OVERHEAD, 30);
            ConstHierarhyHieArticleCfLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_TRIP, 10);
            ConstHierarhyHieArticleCfLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_LIC, 20);
            ConstHierarhyHieArticleCfLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_PASP, 30);
            ConstHierarhyHieArticleCfLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_TRANSP, 40);
            ConstHierarhyHieArticleCfLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_CUSTOM, 50);
            ConstHierarhyHieArticleCfLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_INSURANCE, 60);
            ConstHierarhyHieArticleCfLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_MORF, 70);
            ConstHierarhyHieArticleCfLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_FAPRID, 80);
            ConstHierarhyHieArticleCfLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_GUARANTEE, 90);
            ConstHierarhyHieArticleCfLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_COMMERC, 100);
            ConstHierarhyHieArticleCfLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_BANK, 110);
            ConstHierarhyHieArticleCfLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_OTHER, 120);
            ConstHierarhyHieArticleCfLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_PARTY, ReportOrderPlanArticleType.ARTICLE_EXPENSE_PARTY_WORK, 20);
            ConstHierarhyHieArticleCfLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE_PARTY, ReportOrderPlanArticleType.ARTICLE_EXPENSE_PARTY_COMPONENT, 10);
            ConstHierarhyHieArticleCfLink(ReportOrderPlanArticleType.ARTICLE_INCOME, ReportOrderPlanArticleType.ARTICLE_INCOME_OWN, 0);
            ConstHierarhyHieArticleCfLink(ReportOrderPlanArticleType.ARTICLE_EXPENSE, ReportOrderPlanArticleType.ARTICLE_EXPENSE_NOT_OWN, 20);
            
        }
        
        
        public void ConstHierarhyHieArticleIeLink(ReportOrderPlanArticleType up, ReportOrderPlanArticleType down, Int32 order) {
            var enum_type = typeof(ReportOrderPlanArticleType);
            ReportOrderPlanArticle value_up = ReportOrderPlanArticles.FirstOrDefault(x => x.ValueType == up);
            ReportOrderPlanArticle value_down = ReportOrderPlanArticles.FirstOrDefault(x => x.ValueType == down);
            if (!(value_up is null || value_down is null) ) {
                value_down.HieArticleIeUp = value_up;
                value_down.HieArticleIeOrder = order;
            }
        }
        
        public void ConstHierarhyHieArticleCfLink(ReportOrderPlanArticleType up, ReportOrderPlanArticleType down, Int32 order) {
            var enum_type = typeof(ReportOrderPlanArticleType);
            ReportOrderPlanArticle value_up = ReportOrderPlanArticles.FirstOrDefault(x => x.ValueType == up);
            ReportOrderPlanArticle value_down = ReportOrderPlanArticles.FirstOrDefault(x => x.ValueType == down);
            if (!(value_up is null || value_down is null) ) {
                value_down.HieArticleCfUp = value_up;
                value_down.HieArticleCfOrder = order;
            }
        }
        
        public ReportOrderPlanTemplate(Session session): base(session) { }
    }
    
    public enum ReportOrderPlanValueTypeType {
        BALANCE = 3,
        COUNT = 4,
        COST = 5,
        SUMMALL = 6,
        VAT = 7,
        STANDART = 109,
        INSURANCE = 120,
        OVERHEAD = 121,
        STAFFCF = 159,
        VATINCOST = 165,
        ADVANCE = 166,
        STAFFZP = 167,
        PRESENTMULT = 186,
    }
    
    [Persistent("FmMdfTestReportOrderPlanValueType")]
    public partial class ReportOrderPlanValueType: MdfConcept {
        
        private ReportOrderPlanTemplate _Template;
        [Association]
        [Browsable(false)]
        public ReportOrderPlanTemplate Template {
            get { return _Template; }
            set {
                if (SetPropertyValue(ref _Template, value) && !IsLoading && value != null) {
                    Container = value;
                }
            }
        }
        
        private String _Code;
        [Size(64)]
        [VisibleInListView(true)]
        public String Code {
            get { return _Code; }
            set { SetPropertyValue(ref _Code, value); }
        }
        
        private String _NameShort;
        [ModelDefault("RowCount", "1")]
        [Size(128)]
        [VisibleInListView(true)]
        public String NameShort {
            get { return _NameShort; }
            set { SetPropertyValue(ref _NameShort, value); }
        }
        
        private ReportOrderPlanValueTypeType _ValueType;
        public ReportOrderPlanValueTypeType ValueType {
            get { return _ValueType; }
            set { SetPropertyValue(ref _ValueType, value); }
        }
        
        public ReportOrderPlanValueType(Session session): base(session) { }
    }
    
    public enum ReportOrderPlanPayTypeType {
        PREPAYMENT = 9,
        POSTPAYMENT = 10,
    }
    
    [Persistent("FmMdfTestReportOrderPlanPayType")]
    public partial class ReportOrderPlanPayType: MdfContainerObject {
        
        private ReportOrderPlanTemplate _Template;
        [Association]
        [Browsable(false)]
        public ReportOrderPlanTemplate Template {
            get { return _Template; }
            set {
                if (SetPropertyValue(ref _Template, value) && !IsLoading && value != null) {
                    Container = value;
                }
            }
        }
        
        private String _Code;
        [Size(64)]
        [VisibleInListView(true)]
        public String Code {
            get { return _Code; }
            set { SetPropertyValue(ref _Code, value); }
        }
        
        private String _NameShort;
        [ModelDefault("RowCount", "1")]
        [Size(128)]
        [VisibleInListView(true)]
        public String NameShort {
            get { return _NameShort; }
            set { SetPropertyValue(ref _NameShort, value); }
        }
        
        private ReportOrderPlanPayTypeType _ValueType;
        public ReportOrderPlanPayTypeType ValueType {
            get { return _ValueType; }
            set { SetPropertyValue(ref _ValueType, value); }
        }
        
        public ReportOrderPlanPayType(Session session): base(session) { }
    }
    
    public enum ReportOrderPlanVatModeType {
        NOT_SUBJECT = 11,
        NORMAL = 12,
        EXPORT = 13,
        DIM_FINDEAL_VAT_MODE = 14,
        DIM_ORDER_VAT_MODE = 68,
        SUBJECT = 110,
        ALLRATE = 119,
    }
    
    [Persistent("FmMdfTestReportOrderPlanVatMode")]
    public partial class ReportOrderPlanVatMode: MdfContainerObject {
        
        private ReportOrderPlanTemplate _Template;
        [Association]
        [Browsable(false)]
        public ReportOrderPlanTemplate Template {
            get { return _Template; }
            set {
                if (SetPropertyValue(ref _Template, value) && !IsLoading && value != null) {
                    Container = value;
                }
            }
        }
        
        private String _Code;
        [Size(64)]
        [VisibleInListView(true)]
        public String Code {
            get { return _Code; }
            set { SetPropertyValue(ref _Code, value); }
        }
        
        private String _NameShort;
        [ModelDefault("RowCount", "1")]
        [Size(128)]
        [VisibleInListView(true)]
        public String NameShort {
            get { return _NameShort; }
            set { SetPropertyValue(ref _NameShort, value); }
        }
        
        private ReportOrderPlanVatModeType _ValueType;
        public ReportOrderPlanVatModeType ValueType {
            get { return _ValueType; }
            set { SetPropertyValue(ref _ValueType, value); }
        }
        
        public ReportOrderPlanVatMode(Session session): base(session) { }
    }
    
    public enum ReportOrderPlanValutaType {
        DIM_REPORT_VALUTA = 15,
        DIM_FINDEAL_VALUTA = 16,
        USD = 17,
        EUR = 18,
        RUB = 19,
        ALL_OBLIGATION = 113,
    }
    
    [Persistent("FmMdfTestReportOrderPlanValuta")]
    public partial class ReportOrderPlanValuta: MdfContainerObject {
        
        private ReportOrderPlanTemplate _Template;
        [Association]
        [Browsable(false)]
        public ReportOrderPlanTemplate Template {
            get { return _Template; }
            set {
                if (SetPropertyValue(ref _Template, value) && !IsLoading && value != null) {
                    Container = value;
                }
            }
        }
        
        private String _Code;
        [Size(64)]
        [VisibleInListView(true)]
        public String Code {
            get { return _Code; }
            set { SetPropertyValue(ref _Code, value); }
        }
        
        private String _NameShort;
        [ModelDefault("RowCount", "1")]
        [Size(128)]
        [VisibleInListView(true)]
        public String NameShort {
            get { return _NameShort; }
            set { SetPropertyValue(ref _NameShort, value); }
        }
        
        private ReportOrderPlanValutaType _ValueType;
        public ReportOrderPlanValutaType ValueType {
            get { return _ValueType; }
            set { SetPropertyValue(ref _ValueType, value); }
        }
        
        public ReportOrderPlanValuta(Session session): base(session) { }
    }
    
    public enum ReportOrderPlanEntityType {
        PARTY_BAY_PARTY = 20,
        PARTY_BAY_STAFF = 21,
        PARTY_BAY_STAFF_KB = 22,
        PARTY_BAY_STAFF_OZM = 23,
        PARTY_BAY_STAFF_ORION = 24,
        PARTY_BAY_STAFF_LC = 25,
        PARTY_SALE_PARTY = 63,
        PARTY_BAY_PARTY_OTHER = 64,
        PARTY_SALE_PARTY_OTHER = 65,
        PARTY_BAY_INTERNAL = 66,
        DIM_FINDEAL_PARTY = 70,
        DIM_REPORT_ENTITY = 84,
        DIM_DEAL_PARTY = 89,
    }
    
    [Persistent("FmMdfTestReportOrderPlanEntity")]
    public partial class ReportOrderPlanEntity: MdfContainerObject {
        
        private ReportOrderPlanReport _Report;
        [Association]
        [Browsable(false)]
        public ReportOrderPlanReport Report {
            get { return _Report; }
            set {
                if (SetPropertyValue(ref _Report, value) && !IsLoading && value != null) {
                    Container = value;
                }
            }
        }
        
        private ReportOrderPlanTemplate _Template;
        [Association]
        [Browsable(false)]
        public ReportOrderPlanTemplate Template {
            get { return _Template; }
            set {
                if (SetPropertyValue(ref _Template, value) && !IsLoading && value != null) {
                    Container = value;
                }
            }
        }
        
        private String _Code;
        [Size(64)]
        [VisibleInListView(true)]
        public String Code {
            get { return _Code; }
            set { SetPropertyValue(ref _Code, value); }
        }
        
        private String _NameShort;
        [ModelDefault("RowCount", "1")]
        [Size(128)]
        [VisibleInListView(true)]
        public String NameShort {
            get { return _NameShort; }
            set { SetPropertyValue(ref _NameShort, value); }
        }
        
        private ReportOrderPlanEntityType _ValueType;
        public ReportOrderPlanEntityType ValueType {
            get { return _ValueType; }
            set { SetPropertyValue(ref _ValueType, value); }
        }
        
        private ReportOrderPlanEntityKind _Kind;
        [DataSourceCriteriaProperty("Container.ContainersCritery")]
        public ReportOrderPlanEntityKind Kind {
            get { return _Kind; }
            set { SetPropertyValue(ref _Kind, value); }
        }
        
        private System.Boolean _IsOther;
        public System.Boolean IsOther {
            get { return _IsOther; }
            set { SetPropertyValue(ref _IsOther, value); }
        }
        
        public ReportOrderPlanEntity(Session session): base(session) { }
    }
    
    public enum ReportOrderPlanDealType {
        DEAL_KB = 75,
        DEAL_OZM = 76,
        DEAL_ORION = 77,
        DEAL_LC = 78,
        DIM_FINDEAL_DEAL = 85,
        DEAL_OTHER_SALE = 133,
        DEAL_OTHER_BUY = 134,
    }
    
    [Persistent("FmMdfTestReportOrderPlanDeal")]
    public partial class ReportOrderPlanDeal: MdfContainerObject {
        
        private ReportOrderPlanReport _Report;
        [Association]
        [Browsable(false)]
        public ReportOrderPlanReport Report {
            get { return _Report; }
            set {
                if (SetPropertyValue(ref _Report, value) && !IsLoading && value != null) {
                    Container = value;
                }
            }
        }
        
        private ReportOrderPlanTemplate _Template;
        [Association]
        [Browsable(false)]
        public ReportOrderPlanTemplate Template {
            get { return _Template; }
            set {
                if (SetPropertyValue(ref _Template, value) && !IsLoading && value != null) {
                    Container = value;
                }
            }
        }
        
        private String _Code;
        [Size(64)]
        [VisibleInListView(true)]
        public String Code {
            get { return _Code; }
            set { SetPropertyValue(ref _Code, value); }
        }
        
        private String _NameShort;
        [ModelDefault("RowCount", "1")]
        [Size(128)]
        [VisibleInListView(true)]
        public String NameShort {
            get { return _NameShort; }
            set { SetPropertyValue(ref _NameShort, value); }
        }
        
        private ReportOrderPlanDealType _ValueType;
        public ReportOrderPlanDealType ValueType {
            get { return _ValueType; }
            set { SetPropertyValue(ref _ValueType, value); }
        }
        
        private System.String _Number;
        public System.String Number {
            get { return _Number; }
            set { SetPropertyValue(ref _Number, value); }
        }
        
        private System.DateTime _Date;
        public System.DateTime Date {
            get { return _Date; }
            set { SetPropertyValue(ref _Date, value); }
        }
        
        private ReportOrderPlanEntity _Party;
        [DataSourceCriteriaProperty("Container.ContainersCritery")]
        public ReportOrderPlanEntity Party {
            get { return _Party; }
            set { SetPropertyValue(ref _Party, value); }
        }
        
        private ReportOrderPlanDealKind _Kind;
        [DataSourceCriteriaProperty("Container.ContainersCritery")]
        public ReportOrderPlanDealKind Kind {
            get { return _Kind; }
            set { SetPropertyValue(ref _Kind, value); }
        }
        
        private ReportOrderPlanEntity _Entity;
        [Association]
        [DataSourceCriteriaProperty("Container.ContainersCritery")]
        public ReportOrderPlanEntity Entity {
            get { return _Entity; }
            set { SetPropertyValue(ref _Entity, value); }
        }
        
        private System.Boolean _IsOther;
        public System.Boolean IsOther {
            get { return _IsOther; }
            set { SetPropertyValue(ref _IsOther, value); }
        }
        
        public ReportOrderPlanDeal(Session session): base(session) { }
    }
    
    public enum ReportOrderPlanFindealType {
        FINDEAL_BUY = 26,
        FINDEAL_SALE_PLAN = 27,
        FINDEAL_IMPORT = 69,
        FINDEAL_STAFF_KB = 71,
        FINDEAL_STAFF_OZM = 72,
        FINDEAL_STAFF_ORION = 73,
        FINDEAL_STAFF_LC = 74,
        FINDEAL_SALE = 90,
        FINDEAL_OTHER = 92,
        FINDEAL = 116,
        FINDEAL_OTHER_SALE = 135,
        FINDEAL_OTHER_BUY_GOOD_CABLE = 136,
        FINDEAL_OTHER_BUY_GOOD_CHEMICAL = 137,
        FINDEAL_OTHER_BUY_GOOD_COMPONENT = 138,
        FINDEAL_OTHER_BUY_GOOD_EQUIPMENT = 139,
        FINDEAL_OTHER_BUY_GOOD_FERRO = 140,
        FINDEAL_OTHER_BUY_GOOD_INSTRUMENT = 141,
        FINDEAL_OTHER_BUY_GOOD_MATERIAL = 142,
        FINDEAL_OTHER_BUY_GOOD_NONFERRO = 143,
        FINDEAL_OTHER_BUY_GOOD_OTHER = 144,
        FINDEAL_OTHER_BUY_GOOD_STAMPING = 145,
        FINDEAL_OTHER_BUY_SERVICE_BANK = 146,
        FINDEAL_OTHER_BUY_SERVICE_COMMERC = 147,
        FINDEAL_OTHER_BUY_SERVICE_CUSTOM = 148,
        FINDEAL_OTHER_BUY_SERVICE_FAPRID = 149,
        FINDEAL_OTHER_BUY_SERVICE_GUARANTEE = 150,
        FINDEAL_OTHER_BUY_SERVICE_INSURANCE = 151,
        FINDEAL_OTHER_BUY_SERVICE_LIC = 152,
        FINDEAL_OTHER_BUY_SERVICE_MORF = 153,
        FINDEAL_OTHER_BUY_SERVICE_OTHER = 154,
        FINDEAL_OTHER_BUY_SERVICE_PASP = 155,
        FINDEAL_OTHER_BUY_SERVICE_TRANSP = 156,
        FINDEAL_OTHER_BUY_SERVICE_TRIP = 157,
        FINDEAL_NOTPARTY = 175,
        FINDEAL_PARTY = 176,
        FINDEAL_NOTREPORT_VALUTA = 177,
    }
    
    [Persistent("FmMdfTestReportOrderPlanFindeal")]
    public partial class ReportOrderPlanFindeal: MdfContainerObject {
        
        private ReportOrderPlanReport _Report;
        [Association]
        [Browsable(false)]
        public ReportOrderPlanReport Report {
            get { return _Report; }
            set {
                if (SetPropertyValue(ref _Report, value) && !IsLoading && value != null) {
                    Container = value;
                }
            }
        }
        
        private ReportOrderPlanTemplate _Template;
        [Association]
        [Browsable(false)]
        public ReportOrderPlanTemplate Template {
            get { return _Template; }
            set {
                if (SetPropertyValue(ref _Template, value) && !IsLoading && value != null) {
                    Container = value;
                }
            }
        }
        
        private String _Code;
        [Size(64)]
        [VisibleInListView(true)]
        public String Code {
            get { return _Code; }
            set { SetPropertyValue(ref _Code, value); }
        }
        
        private String _NameShort;
        [ModelDefault("RowCount", "1")]
        [Size(128)]
        [VisibleInListView(true)]
        public String NameShort {
            get { return _NameShort; }
            set { SetPropertyValue(ref _NameShort, value); }
        }
        
        private ReportOrderPlanFindealType _ValueType;
        public ReportOrderPlanFindealType ValueType {
            get { return _ValueType; }
            set { SetPropertyValue(ref _ValueType, value); }
        }
        
        private ReportOrderPlanEntity _Party;
        [DataSourceCriteriaProperty("Container.ContainersCritery")]
        public ReportOrderPlanEntity Party {
            get { return _Party; }
            set { SetPropertyValue(ref _Party, value); }
        }
        
        private ReportOrderPlanDeal _Deal;
        [DataSourceCriteriaProperty("Container.ContainersCritery")]
        public ReportOrderPlanDeal Deal {
            get { return _Deal; }
            set { SetPropertyValue(ref _Deal, value); }
        }
        
        private ReportOrderPlanValuta _Valuta;
        [DataSourceCriteriaProperty("Container.ContainersCritery")]
        public ReportOrderPlanValuta Valuta {
            get { return _Valuta; }
            set { SetPropertyValue(ref _Valuta, value); }
        }
        
        private ReportOrderPlanVatMode _VatMode;
        [DataSourceCriteriaProperty("Container.ContainersCritery")]
        public ReportOrderPlanVatMode VatMode {
            get { return _VatMode; }
            set { SetPropertyValue(ref _VatMode, value); }
        }
        
        private ReportOrderPlanArticle _Article;
        [DataSourceCriteriaProperty("Container.ContainersCritery")]
        public ReportOrderPlanArticle Article {
            get { return _Article; }
            set { SetPropertyValue(ref _Article, value); }
        }
        
        private ReportOrderPlanDealKind _DealKind;
        [DataSourceCriteriaProperty("Container.ContainersCritery")]
        public ReportOrderPlanDealKind DealKind {
            get { return _DealKind; }
            set { SetPropertyValue(ref _DealKind, value); }
        }
        
        private System.String _DealNumber;
        public System.String DealNumber {
            get { return _DealNumber; }
            set { SetPropertyValue(ref _DealNumber, value); }
        }
        
        private System.DateTime _DealDate;
        public System.DateTime DealDate {
            get { return _DealDate; }
            set { SetPropertyValue(ref _DealDate, value); }
        }
        
        private ReportOrderPlanEntityKind _PartyKind;
        [DataSourceCriteriaProperty("Container.ContainersCritery")]
        public ReportOrderPlanEntityKind PartyKind {
            get { return _PartyKind; }
            set { SetPropertyValue(ref _PartyKind, value); }
        }
        
        private ReportOrderPlanFindealKind _Kind;
        [DataSourceCriteriaProperty("Container.ContainersCritery")]
        public ReportOrderPlanFindealKind Kind {
            get { return _Kind; }
            set { SetPropertyValue(ref _Kind, value); }
        }
        
        public ReportOrderPlanFindeal(Session session): base(session) { }
    }
    
    public enum ReportOrderPlanOrderType {
        DIM_REPORT_ORDER = 67,
    }
    
    [Persistent("FmMdfTestReportOrderPlanOrder")]
    public partial class ReportOrderPlanOrder: MdfContainerObject {
        
        private ReportOrderPlanTemplate _Template;
        [Association]
        [Browsable(false)]
        public ReportOrderPlanTemplate Template {
            get { return _Template; }
            set {
                if (SetPropertyValue(ref _Template, value) && !IsLoading && value != null) {
                    Container = value;
                }
            }
        }
        
        private String _Code;
        [Size(64)]
        [VisibleInListView(true)]
        public String Code {
            get { return _Code; }
            set { SetPropertyValue(ref _Code, value); }
        }
        
        private String _NameShort;
        [ModelDefault("RowCount", "1")]
        [Size(128)]
        [VisibleInListView(true)]
        public String NameShort {
            get { return _NameShort; }
            set { SetPropertyValue(ref _NameShort, value); }
        }
        
        private ReportOrderPlanOrderType _ValueType;
        public ReportOrderPlanOrderType ValueType {
            get { return _ValueType; }
            set { SetPropertyValue(ref _ValueType, value); }
        }
        
        private ReportOrderPlanVatMode _VatMode;
        [DataSourceCriteriaProperty("Container.ContainersCritery")]
        public ReportOrderPlanVatMode VatMode {
            get { return _VatMode; }
            set { SetPropertyValue(ref _VatMode, value); }
        }
        
        private ReportOrderPlanEntity _Party;
        [DataSourceCriteriaProperty("Container.ContainersCritery")]
        public ReportOrderPlanEntity Party {
            get { return _Party; }
            set { SetPropertyValue(ref _Party, value); }
        }
        
        private ReportOrderPlanDeal _Deal;
        [DataSourceCriteriaProperty("Container.ContainersCritery")]
        public ReportOrderPlanDeal Deal {
            get { return _Deal; }
            set { SetPropertyValue(ref _Deal, value); }
        }
        
        public ReportOrderPlanOrder(Session session): base(session) { }
    }
    
    public enum ReportOrderPlanPeriodType {
        PERIOD_PLAN = 28,
        PERIOD_PLAN_BALANCE_BEGIN = 29,
        PERIOD_PLAN_BALANCE_END = 30,
        PERIOD_PLAN_YEAR = 31,
        PERIOD_PLAN_FIRST_YEAR = 32,
        PERIOD_PLAN_SECOND_YEAR = 33,
        PERIOD_PLAN_YEAR_BALANCE_BEGIN = 34,
        PERIOD_PLAN_YEAR_BALANCE_END = 35,
        PERIOD_PLAN_QUARTER = 36,
        PERIOD_PLAN_MONTH = 37,
        PERIOD_PLAN_YEAR_TOEND = 178,
        PERIOD_BEGIN = 180,
        PERIOD_END = 181,
    }
    
    [Persistent("FmMdfTestReportOrderPlanPeriod")]
    public partial class ReportOrderPlanPeriod: MdfContainerObject {
        
        private ReportOrderPlanReport _Report;
        [Association]
        [Browsable(false)]
        public ReportOrderPlanReport Report {
            get { return _Report; }
            set {
                if (SetPropertyValue(ref _Report, value) && !IsLoading && value != null) {
                    Container = value;
                }
            }
        }
        
        private String _Code;
        [Size(64)]
        [VisibleInListView(true)]
        public String Code {
            get { return _Code; }
            set { SetPropertyValue(ref _Code, value); }
        }
        
        private String _NameShort;
        [ModelDefault("RowCount", "1")]
        [Size(128)]
        [VisibleInListView(true)]
        public String NameShort {
            get { return _NameShort; }
            set { SetPropertyValue(ref _NameShort, value); }
        }
        
        private ReportOrderPlanPeriodType _ValueType;
        public ReportOrderPlanPeriodType ValueType {
            get { return _ValueType; }
            set { SetPropertyValue(ref _ValueType, value); }
        }
        
        public ReportOrderPlanPeriod(Session session): base(session) { }
    }
    
    public enum ReportOrderPlanScenarioType {
        PLAN = 38,
        FACT = 39,
        FORECAST = 40,
        IMPORT = 174,
    }
    
    [Persistent("FmMdfTestReportOrderPlanScenario")]
    public partial class ReportOrderPlanScenario: MdfContainerObject {
        
        private ReportOrderPlanTemplate _Template;
        [Association]
        [Browsable(false)]
        public ReportOrderPlanTemplate Template {
            get { return _Template; }
            set {
                if (SetPropertyValue(ref _Template, value) && !IsLoading && value != null) {
                    Container = value;
                }
            }
        }
        
        private String _Code;
        [Size(64)]
        [VisibleInListView(true)]
        public String Code {
            get { return _Code; }
            set { SetPropertyValue(ref _Code, value); }
        }
        
        private String _NameShort;
        [ModelDefault("RowCount", "1")]
        [Size(128)]
        [VisibleInListView(true)]
        public String NameShort {
            get { return _NameShort; }
            set { SetPropertyValue(ref _NameShort, value); }
        }
        
        private ReportOrderPlanScenarioType _ValueType;
        public ReportOrderPlanScenarioType ValueType {
            get { return _ValueType; }
            set { SetPropertyValue(ref _ValueType, value); }
        }
        
        public ReportOrderPlanScenario(Session session): base(session) { }
    }
    
    public enum ReportOrderPlanArticleType {
        ARTICLE_INCOME = 41,
        ARTICLE_EXPENSE = 42,
        ARTICLE_EXPENSE_GOOD = 43,
        ARTICLE_EXPENSE_GOOD_MATERIAL = 44,
        ARTICLE_EXPENSE_GOOD_COMPONENT = 45,
        ARTICLE_EXPENSE_STAFF = 46,
        ARTICLE_EXPENSE_PARTY = 47,
        ARTICLE_EXPENSE_OTHER = 48,
        ARTICLE_EXPENSE_OTHER_TRIP = 49,
        ARTICLE_EXPENSE_OTHER_LIC = 50,
        ARTICLE_EXPENSE_OTHER_PASP = 51,
        ARTICLE_EXPENSE_OTHER_TRANSP = 52,
        ARTICLE_EXPENSE_OTHER_CUSTOM = 53,
        ARTICLE_EXPENSE_OTHER_INSURANCE = 54,
        ARTICLE_EXPENSE_OTHER_MORF = 55,
        ARTICLE_EXPENSE_OTHER_FAPRID = 56,
        ARTICLE_EXPENSE_OTHER_GUARANTEE = 57,
        ARTICLE_EXPENSE_OTHER_COMMERC = 58,
        ARTICLE_EXPENSE_OTHER_BANK = 59,
        ARTICLE_EXPENSE_OTHER_OTHER = 60,
        DIM_FINDEAL_ACTICLE = 86,
        ARTICLE_EXPENSE_GOOD_FERRO = 93,
        ARTICLE_EXPENSE_GOOD_NONFERRO = 94,
        ARTICLE_EXPENSE_GOOD_CABLE = 95,
        ARTICLE_EXPENSE_GOOD_CHEMICAL = 96,
        ARTICLE_EXPENSE_GOOD_STAMPING = 97,
        ARTICLE_EXPENSE_GOOD_INSTRUMENT = 98,
        ARTICLE_EXPENSE_GOOD_EQUIPMENT = 99,
        ARTICLE_EXPENSE_GOOD_OTHER = 100,
        ARTICLE_VAT = 118,
        HIE_ARTICLE_IE_ROOT = 122,
        ARTICLE_EXPENSE_STAFF_SALARY = 123,
        ARTICLE_EXPENSE_STAFF_INSURANCE = 124,
        ARTICLE_EXPENSE_STAFF_OVERHEAD = 125,
        ARTICLE_INCOME_SALE_REVENUE = 126,
        ARTICLE_EXPENSE_PARTY_WORK = 168,
        ARTICLE_EXPENSE_PARTY_COMPONENT = 169,
        ARTICLE_INCOME_SALE = 170,
        ARTICLE_EXPENSE_OWN = 171,
        ARTICLE_INCOME_OWN = 172,
        ARTICLE_EXPENSE_NOT_OWN = 173,
    }
    
    [Persistent("FmMdfTestReportOrderPlanArticle")]
    public partial class ReportOrderPlanArticle: MdfContainerObject {
        
        private ReportOrderPlanTemplate _Template;
        [Association]
        [Browsable(false)]
        public ReportOrderPlanTemplate Template {
            get { return _Template; }
            set {
                if (SetPropertyValue(ref _Template, value) && !IsLoading && value != null) {
                    Container = value;
                }
            }
        }
        
        private String _Code;
        [Size(64)]
        [VisibleInListView(true)]
        public String Code {
            get { return _Code; }
            set { SetPropertyValue(ref _Code, value); }
        }
        
        private String _NameShort;
        [ModelDefault("RowCount", "1")]
        [Size(128)]
        [VisibleInListView(true)]
        public String NameShort {
            get { return _NameShort; }
            set { SetPropertyValue(ref _NameShort, value); }
        }
        
        private ReportOrderPlanArticleType _ValueType;
        public ReportOrderPlanArticleType ValueType {
            get { return _ValueType; }
            set { SetPropertyValue(ref _ValueType, value); }
        }
        
        private ReportOrderPlanPrimaryValue _PrimaryValue;
        [DataSourceCriteriaProperty("Container.ContainersCritery")]
        public ReportOrderPlanPrimaryValue PrimaryValue {
            get { return _PrimaryValue; }
            set { SetPropertyValue(ref _PrimaryValue, value); }
        }
        
        private ReportOrderPlanArticle _HieArticleIeUp;
        [DataSourceCriteriaProperty("Container.ContainersCritery")]
        [Association("ReportOrderPlan-HieArticleIe")]
        public ReportOrderPlanArticle HieArticleIeUp {
            get { return _HieArticleIeUp; }
            set { SetPropertyValue<ReportOrderPlanArticle>(ref _HieArticleIeUp, value); }
        }
        
        private Int32 _HieArticleIeOrder;
        public Int32 HieArticleIeOrder {
            get { return _HieArticleIeOrder; }
            set { SetPropertyValue<Int32>(ref _HieArticleIeOrder, value); }
        }
        
        [Association("ReportOrderPlan-HieArticleIe")]
        public XPCollection<ReportOrderPlanArticle> HieArticleIeDowns {
            get { return GetCollection<ReportOrderPlanArticle>("HieArticleIeDowns"); }
        }
        
        private ReportOrderPlanArticle _HieArticleCfUp;
        [DataSourceCriteriaProperty("Container.ContainersCritery")]
        [Association("ReportOrderPlan-HieArticleCf")]
        public ReportOrderPlanArticle HieArticleCfUp {
            get { return _HieArticleCfUp; }
            set { SetPropertyValue<ReportOrderPlanArticle>(ref _HieArticleCfUp, value); }
        }
        
        private Int32 _HieArticleCfOrder;
        public Int32 HieArticleCfOrder {
            get { return _HieArticleCfOrder; }
            set { SetPropertyValue<Int32>(ref _HieArticleCfOrder, value); }
        }
        
        [Association("ReportOrderPlan-HieArticleCf")]
        public XPCollection<ReportOrderPlanArticle> HieArticleCfDowns {
            get { return GetCollection<ReportOrderPlanArticle>("HieArticleCfDowns"); }
        }
        
        public ReportOrderPlanArticle(Session session): base(session) { }
    }
    
    public enum ReportOrderPlanFinrepType {
        FINREP_IE = 61,
        FINREP_CF = 62,
        FINREP_DC = 117,
    }
    
    [Persistent("FmMdfTestReportOrderPlanFinrep")]
    public partial class ReportOrderPlanFinrep: MdfContainerObject {
        
        private ReportOrderPlanTemplate _Template;
        [Association]
        [Browsable(false)]
        public ReportOrderPlanTemplate Template {
            get { return _Template; }
            set {
                if (SetPropertyValue(ref _Template, value) && !IsLoading && value != null) {
                    Container = value;
                }
            }
        }
        
        private String _Code;
        [Size(64)]
        [VisibleInListView(true)]
        public String Code {
            get { return _Code; }
            set { SetPropertyValue(ref _Code, value); }
        }
        
        private String _NameShort;
        [ModelDefault("RowCount", "1")]
        [Size(128)]
        [VisibleInListView(true)]
        public String NameShort {
            get { return _NameShort; }
            set { SetPropertyValue(ref _NameShort, value); }
        }
        
        private ReportOrderPlanFinrepType _ValueType;
        public ReportOrderPlanFinrepType ValueType {
            get { return _ValueType; }
            set { SetPropertyValue(ref _ValueType, value); }
        }
        
        public ReportOrderPlanFinrep(Session session): base(session) { }
    }
    
    public enum ReportOrderPlanEntityKindType {
        ENTITY = 79,
        STAFF = 80,
        INTERNAL = 81,
        DIM_PARTY_TYPE = 88,
    }
    
    [Persistent("FmMdfTestReportOrderPlanEntityKind")]
    public partial class ReportOrderPlanEntityKind: MdfContainerObject {
        
        private ReportOrderPlanTemplate _Template;
        [Association]
        [Browsable(false)]
        public ReportOrderPlanTemplate Template {
            get { return _Template; }
            set {
                if (SetPropertyValue(ref _Template, value) && !IsLoading && value != null) {
                    Container = value;
                }
            }
        }
        
        private String _Code;
        [Size(64)]
        [VisibleInListView(true)]
        public String Code {
            get { return _Code; }
            set { SetPropertyValue(ref _Code, value); }
        }
        
        private String _NameShort;
        [ModelDefault("RowCount", "1")]
        [Size(128)]
        [VisibleInListView(true)]
        public String NameShort {
            get { return _NameShort; }
            set { SetPropertyValue(ref _NameShort, value); }
        }
        
        private ReportOrderPlanEntityKindType _ValueType;
        public ReportOrderPlanEntityKindType ValueType {
            get { return _ValueType; }
            set { SetPropertyValue(ref _ValueType, value); }
        }
        
        public ReportOrderPlanEntityKind(Session session): base(session) { }
    }
    
    public enum ReportOrderPlanDealKindType {
        SALE = 82,
        BUY = 83,
        DIM_DEAL_TYPE = 87,
    }
    
    [Persistent("FmMdfTestReportOrderPlanDealKind")]
    public partial class ReportOrderPlanDealKind: MdfContainerObject {
        
        private ReportOrderPlanTemplate _Template;
        [Association]
        [Browsable(false)]
        public ReportOrderPlanTemplate Template {
            get { return _Template; }
            set {
                if (SetPropertyValue(ref _Template, value) && !IsLoading && value != null) {
                    Container = value;
                }
            }
        }
        
        private String _Code;
        [Size(64)]
        [VisibleInListView(true)]
        public String Code {
            get { return _Code; }
            set { SetPropertyValue(ref _Code, value); }
        }
        
        private String _NameShort;
        [ModelDefault("RowCount", "1")]
        [Size(128)]
        [VisibleInListView(true)]
        public String NameShort {
            get { return _NameShort; }
            set { SetPropertyValue(ref _NameShort, value); }
        }
        
        private ReportOrderPlanDealKindType _ValueType;
        public ReportOrderPlanDealKindType ValueType {
            get { return _ValueType; }
            set { SetPropertyValue(ref _ValueType, value); }
        }
        
        public ReportOrderPlanDealKind(Session session): base(session) { }
    }
    
    public enum ReportOrderPlanCorporatorType {
        NPO_MASH = 91,
    }
    
    [Persistent("FmMdfTestReportOrderPlanCorporator")]
    public partial class ReportOrderPlanCorporator: MdfContainerObject {
        
        private ReportOrderPlanTemplate _Template;
        [Association]
        [Browsable(false)]
        public ReportOrderPlanTemplate Template {
            get { return _Template; }
            set {
                if (SetPropertyValue(ref _Template, value) && !IsLoading && value != null) {
                    Container = value;
                }
            }
        }
        
        private String _Code;
        [Size(64)]
        [VisibleInListView(true)]
        public String Code {
            get { return _Code; }
            set { SetPropertyValue(ref _Code, value); }
        }
        
        private String _NameShort;
        [ModelDefault("RowCount", "1")]
        [Size(128)]
        [VisibleInListView(true)]
        public String NameShort {
            get { return _NameShort; }
            set { SetPropertyValue(ref _NameShort, value); }
        }
        
        private ReportOrderPlanCorporatorType _ValueType;
        public ReportOrderPlanCorporatorType ValueType {
            get { return _ValueType; }
            set { SetPropertyValue(ref _ValueType, value); }
        }
        
        private ReportOrderPlanEntity _Entity;
        [DataSourceCriteriaProperty("Container.ContainersCritery")]
        public ReportOrderPlanEntity Entity {
            get { return _Entity; }
            set { SetPropertyValue(ref _Entity, value); }
        }
        
        public ReportOrderPlanCorporator(Session session): base(session) { }
    }
    
    public enum ReportOrderPlanStandartType {
        STD_EXCHANGE_RATE = 101,
        STD_STAFF_FOT = 102,
        STD_STAFF_INSURANCE = 103,
        STD_STAFF_OVERHEAD = 104,
        STD_TAX_VAT = 105,
    }
    
    [Persistent("FmMdfTestReportOrderPlanStandart")]
    public partial class ReportOrderPlanStandart: MdfContainerObject {
        
        private ReportOrderPlanTemplate _Template;
        [Association]
        [Browsable(false)]
        public ReportOrderPlanTemplate Template {
            get { return _Template; }
            set {
                if (SetPropertyValue(ref _Template, value) && !IsLoading && value != null) {
                    Container = value;
                }
            }
        }
        
        private String _Code;
        [Size(64)]
        [VisibleInListView(true)]
        public String Code {
            get { return _Code; }
            set { SetPropertyValue(ref _Code, value); }
        }
        
        private String _NameShort;
        [ModelDefault("RowCount", "1")]
        [Size(128)]
        [VisibleInListView(true)]
        public String NameShort {
            get { return _NameShort; }
            set { SetPropertyValue(ref _NameShort, value); }
        }
        
        private ReportOrderPlanStandartType _ValueType;
        public ReportOrderPlanStandartType ValueType {
            get { return _ValueType; }
            set { SetPropertyValue(ref _ValueType, value); }
        }
        
        public ReportOrderPlanStandart(Session session): base(session) { }
    }
    
    public enum ReportOrderPlanPrimaryValueType {
        PRIMARY_SUMM_COST = 106,
        PRIMARY_SUMM_ALL = 107,
        PRIMARY_COUNT = 108,
        PRIMARY_BALANCE = 182,
    }
    
    [Persistent("FmMdfTestReportOrderPlanPrimaryValue")]
    public partial class ReportOrderPlanPrimaryValue: MdfContainerObject {
        
        private ReportOrderPlanTemplate _Template;
        [Association]
        [Browsable(false)]
        public ReportOrderPlanTemplate Template {
            get { return _Template; }
            set {
                if (SetPropertyValue(ref _Template, value) && !IsLoading && value != null) {
                    Container = value;
                }
            }
        }
        
        private String _Code;
        [Size(64)]
        [VisibleInListView(true)]
        public String Code {
            get { return _Code; }
            set { SetPropertyValue(ref _Code, value); }
        }
        
        private String _NameShort;
        [ModelDefault("RowCount", "1")]
        [Size(128)]
        [VisibleInListView(true)]
        public String NameShort {
            get { return _NameShort; }
            set { SetPropertyValue(ref _NameShort, value); }
        }
        
        private ReportOrderPlanPrimaryValueType _ValueType;
        public ReportOrderPlanPrimaryValueType ValueType {
            get { return _ValueType; }
            set { SetPropertyValue(ref _ValueType, value); }
        }
        
        public ReportOrderPlanPrimaryValue(Session session): base(session) { }
    }
    
    public enum ReportOrderPlanAccKindType {
        DEBET = 111,
        CREDIT = 112,
    }
    
    [Persistent("FmMdfTestReportOrderPlanAccKind")]
    public partial class ReportOrderPlanAccKind: MdfContainerObject {
        
        private String _Code;
        [Size(64)]
        [VisibleInListView(true)]
        public String Code {
            get { return _Code; }
            set { SetPropertyValue(ref _Code, value); }
        }
        
        private String _NameShort;
        [ModelDefault("RowCount", "1")]
        [Size(128)]
        [VisibleInListView(true)]
        public String NameShort {
            get { return _NameShort; }
            set { SetPropertyValue(ref _NameShort, value); }
        }
        
        private ReportOrderPlanAccKindType _ValueType;
        public ReportOrderPlanAccKindType ValueType {
            get { return _ValueType; }
            set { SetPropertyValue(ref _ValueType, value); }
        }
        
        public ReportOrderPlanAccKind(Session session): base(session) { }
    }
    
    public enum ReportOrderPlanFindealKindType {
        TRADE = 127,
        RESERVE = 128,
        TRANSFER = 129,
        DIM_FINDEAL_KIND = 130,
    }
    
    [Persistent("FmMdfTestReportOrderPlanFindealKind")]
    public partial class ReportOrderPlanFindealKind: MdfContainerObject {
        
        private ReportOrderPlanTemplate _Template;
        [Association]
        [Browsable(false)]
        public ReportOrderPlanTemplate Template {
            get { return _Template; }
            set {
                if (SetPropertyValue(ref _Template, value) && !IsLoading && value != null) {
                    Container = value;
                }
            }
        }
        
        private String _Code;
        [Size(64)]
        [VisibleInListView(true)]
        public String Code {
            get { return _Code; }
            set { SetPropertyValue(ref _Code, value); }
        }
        
        private String _NameShort;
        [ModelDefault("RowCount", "1")]
        [Size(128)]
        [VisibleInListView(true)]
        public String NameShort {
            get { return _NameShort; }
            set { SetPropertyValue(ref _NameShort, value); }
        }
        
        private ReportOrderPlanFindealKindType _ValueType;
        public ReportOrderPlanFindealKindType ValueType {
            get { return _ValueType; }
            set { SetPropertyValue(ref _ValueType, value); }
        }
        
        public ReportOrderPlanFindealKind(Session session): base(session) { }
    }
    
    public enum ReportOrderPlanTransKindType {
        COST = 131,
        CASH = 132,
    }
    
    [Persistent("FmMdfTestReportOrderPlanTransKind")]
    public partial class ReportOrderPlanTransKind: MdfContainerObject {
        
        private String _Code;
        [Size(64)]
        [VisibleInListView(true)]
        public String Code {
            get { return _Code; }
            set { SetPropertyValue(ref _Code, value); }
        }
        
        private String _NameShort;
        [ModelDefault("RowCount", "1")]
        [Size(128)]
        [VisibleInListView(true)]
        public String NameShort {
            get { return _NameShort; }
            set { SetPropertyValue(ref _NameShort, value); }
        }
        
        private ReportOrderPlanTransKindType _ValueType;
        public ReportOrderPlanTransKindType ValueType {
            get { return _ValueType; }
            set { SetPropertyValue(ref _ValueType, value); }
        }
        
        public ReportOrderPlanTransKind(Session session): base(session) { }
    }
    
    public enum ReportOrderPlanComponentType {
        COST = 160,
        VAT = 161,
        VATINCOST = 162,
    }
    
    [Persistent("FmMdfTestReportOrderPlanComponent")]
    public partial class ReportOrderPlanComponent: MdfContainerObject {
        
        private String _Code;
        [Size(64)]
        [VisibleInListView(true)]
        public String Code {
            get { return _Code; }
            set { SetPropertyValue(ref _Code, value); }
        }
        
        private String _NameShort;
        [ModelDefault("RowCount", "1")]
        [Size(128)]
        [VisibleInListView(true)]
        public String NameShort {
            get { return _NameShort; }
            set { SetPropertyValue(ref _NameShort, value); }
        }
        
        private ReportOrderPlanComponentType _ValueType;
        public ReportOrderPlanComponentType ValueType {
            get { return _ValueType; }
            set { SetPropertyValue(ref _ValueType, value); }
        }
        
        public ReportOrderPlanComponent(Session session): base(session) { }
    }
    
    public enum ReportOrderPlanPresentmultType {
        MULT_NONE = 183,
        MULT_THROUSANT = 184,
        MULT_MILLION = 185,
    }
    
    [Persistent("FmMdfTestReportOrderPlanPresentmult")]
    public partial class ReportOrderPlanPresentmult: MdfContainerObject {
        
        private ReportOrderPlanTemplate _Template;
        [Association]
        [Browsable(false)]
        public ReportOrderPlanTemplate Template {
            get { return _Template; }
            set {
                if (SetPropertyValue(ref _Template, value) && !IsLoading && value != null) {
                    Container = value;
                }
            }
        }
        
        private String _Code;
        [Size(64)]
        [VisibleInListView(true)]
        public String Code {
            get { return _Code; }
            set { SetPropertyValue(ref _Code, value); }
        }
        
        private String _NameShort;
        [ModelDefault("RowCount", "1")]
        [Size(128)]
        [VisibleInListView(true)]
        public String NameShort {
            get { return _NameShort; }
            set { SetPropertyValue(ref _NameShort, value); }
        }
        
        private ReportOrderPlanPresentmultType _ValueType;
        public ReportOrderPlanPresentmultType ValueType {
            get { return _ValueType; }
            set { SetPropertyValue(ref _ValueType, value); }
        }
        
        public ReportOrderPlanPresentmult(Session session): base(session) { }
    }
    
    public enum ReportOrderPlanCalcVariant {
        IMPORT = 1,
    }
    
    public partial class ReportOrderPlanReportCore: MdfReportCore<ReportOrderPlanReport,ReportOrderPlanCategoryValue,ReportOrderPlanTable,ReportOrderPlanTableCell,ReportOrderPlanDataPoint> {
        
        private ReportOrderPlanAxisReport _AxisAxisReport;
        [Browsable(false)]
        public ReportOrderPlanAxisReport AxisAxisReport {
            get {
                if (_AxisAxisReport == null) { 
                    _AxisAxisReport = new ReportOrderPlanAxisReport(this.Report);
                    _AxisAxisReport.Render();
                }
                return _AxisAxisReport;
            }
        }
        
        private ReportOrderPlanAxisPeriodImport _AxisAxisPeriodImport;
        [Browsable(false)]
        public ReportOrderPlanAxisPeriodImport AxisAxisPeriodImport {
            get {
                if (_AxisAxisPeriodImport == null) { 
                    _AxisAxisPeriodImport = new ReportOrderPlanAxisPeriodImport(this.Report);
                    _AxisAxisPeriodImport.Render();
                }
                return _AxisAxisPeriodImport;
            }
        }
        
        private ReportOrderPlanAxisPeriod _AxisAxisPeriod;
        [Browsable(false)]
        public ReportOrderPlanAxisPeriod AxisAxisPeriod {
            get {
                if (_AxisAxisPeriod == null) { 
                    _AxisAxisPeriod = new ReportOrderPlanAxisPeriod(this.Report);
                    _AxisAxisPeriod.Render();
                }
                return _AxisAxisPeriod;
            }
        }
        
        private ReportOrderPlanAxisIeArticleImport _AxisAxisIeArticleImport;
        [Browsable(false)]
        public ReportOrderPlanAxisIeArticleImport AxisAxisIeArticleImport {
            get {
                if (_AxisAxisIeArticleImport == null) { 
                    _AxisAxisIeArticleImport = new ReportOrderPlanAxisIeArticleImport(this.Report);
                    _AxisAxisIeArticleImport.Render();
                }
                return _AxisAxisIeArticleImport;
            }
        }
        
        private ReportOrderPlanAxisCfArticleImport _AxisAxisCfArticleImport;
        [Browsable(false)]
        public ReportOrderPlanAxisCfArticleImport AxisAxisCfArticleImport {
            get {
                if (_AxisAxisCfArticleImport == null) { 
                    _AxisAxisCfArticleImport = new ReportOrderPlanAxisCfArticleImport(this.Report);
                    _AxisAxisCfArticleImport.Render();
                }
                return _AxisAxisCfArticleImport;
            }
        }
        
        private ReportOrderPlanAxisIeArticle _AxisAxisIeArticle;
        [Browsable(false)]
        public ReportOrderPlanAxisIeArticle AxisAxisIeArticle {
            get {
                if (_AxisAxisIeArticle == null) { 
                    _AxisAxisIeArticle = new ReportOrderPlanAxisIeArticle(this.Report);
                    _AxisAxisIeArticle.Render();
                }
                return _AxisAxisIeArticle;
            }
        }
        
        private ReportOrderPlanAxisCfArticle _AxisAxisCfArticle;
        [Browsable(false)]
        public ReportOrderPlanAxisCfArticle AxisAxisCfArticle {
            get {
                if (_AxisAxisCfArticle == null) { 
                    _AxisAxisCfArticle = new ReportOrderPlanAxisCfArticle(this.Report);
                    _AxisAxisCfArticle.Render();
                }
                return _AxisAxisCfArticle;
            }
        }
        
        private ReportOrderPlanAxisFindeal _AxisAxisFindeal;
        [Browsable(false)]
        public ReportOrderPlanAxisFindeal AxisAxisFindeal {
            get {
                if (_AxisAxisFindeal == null) { 
                    _AxisAxisFindeal = new ReportOrderPlanAxisFindeal(this.Report);
                    _AxisAxisFindeal.Render();
                }
                return _AxisAxisFindeal;
            }
        }
        
        private ReportOrderPlanAxisPersFindealIeCols _AxisAxisPersFindealIeCols;
        [Browsable(false)]
        public ReportOrderPlanAxisPersFindealIeCols AxisAxisPersFindealIeCols {
            get {
                if (_AxisAxisPersFindealIeCols == null) { 
                    _AxisAxisPersFindealIeCols = new ReportOrderPlanAxisPersFindealIeCols(this.Report);
                    _AxisAxisPersFindealIeCols.Render();
                }
                return _AxisAxisPersFindealIeCols;
            }
        }
        
        private ReportOrderPlanAxisPersFindealIeRows _AxisAxisPersFindealIeRows;
        [Browsable(false)]
        public ReportOrderPlanAxisPersFindealIeRows AxisAxisPersFindealIeRows {
            get {
                if (_AxisAxisPersFindealIeRows == null) { 
                    _AxisAxisPersFindealIeRows = new ReportOrderPlanAxisPersFindealIeRows(this.Report);
                    _AxisAxisPersFindealIeRows.Render();
                }
                return _AxisAxisPersFindealIeRows;
            }
        }
        
        private ReportOrderPlanAxisGoodsImport _AxisAxisGoodsImport;
        [Browsable(false)]
        public ReportOrderPlanAxisGoodsImport AxisAxisGoodsImport {
            get {
                if (_AxisAxisGoodsImport == null) { 
                    _AxisAxisGoodsImport = new ReportOrderPlanAxisGoodsImport(this.Report);
                    _AxisAxisGoodsImport.Render();
                }
                return _AxisAxisGoodsImport;
            }
        }
        
        private ReportOrderPlanAxisCalcImportCol _AxisAxisCalcImportCol;
        [Browsable(false)]
        public ReportOrderPlanAxisCalcImportCol AxisAxisCalcImportCol {
            get {
                if (_AxisAxisCalcImportCol == null) { 
                    _AxisAxisCalcImportCol = new ReportOrderPlanAxisCalcImportCol(this.Report);
                    _AxisAxisCalcImportCol.Render();
                }
                return _AxisAxisCalcImportCol;
            }
        }
        
        private ReportOrderPlanAxisCalcImportRow _AxisAxisCalcImportRow;
        [Browsable(false)]
        public ReportOrderPlanAxisCalcImportRow AxisAxisCalcImportRow {
            get {
                if (_AxisAxisCalcImportRow == null) { 
                    _AxisAxisCalcImportRow = new ReportOrderPlanAxisCalcImportRow(this.Report);
                    _AxisAxisCalcImportRow.Render();
                }
                return _AxisAxisCalcImportRow;
            }
        }
        
        private ReportOrderPlanAxisStandartCol _AxisAxisStandartCol;
        [Browsable(false)]
        public ReportOrderPlanAxisStandartCol AxisAxisStandartCol {
            get {
                if (_AxisAxisStandartCol == null) { 
                    _AxisAxisStandartCol = new ReportOrderPlanAxisStandartCol(this.Report);
                    _AxisAxisStandartCol.Render();
                }
                return _AxisAxisStandartCol;
            }
        }
        
        private ReportOrderPlanAxisStandartRow _AxisAxisStandartRow;
        [Browsable(false)]
        public ReportOrderPlanAxisStandartRow AxisAxisStandartRow {
            get {
                if (_AxisAxisStandartRow == null) { 
                    _AxisAxisStandartRow = new ReportOrderPlanAxisStandartRow(this.Report);
                    _AxisAxisStandartRow.Render();
                }
                return _AxisAxisStandartRow;
            }
        }
        
        private ReportOrderPlanAxisStandartImport _AxisAxisStandartImport;
        [Browsable(false)]
        public ReportOrderPlanAxisStandartImport AxisAxisStandartImport {
            get {
                if (_AxisAxisStandartImport == null) { 
                    _AxisAxisStandartImport = new ReportOrderPlanAxisStandartImport(this.Report);
                    _AxisAxisStandartImport.Render();
                }
                return _AxisAxisStandartImport;
            }
        }
        
        private ReportOrderPlanAxisPersFindealCfRows _AxisAxisPersFindealCfRows;
        [Browsable(false)]
        public ReportOrderPlanAxisPersFindealCfRows AxisAxisPersFindealCfRows {
            get {
                if (_AxisAxisPersFindealCfRows == null) { 
                    _AxisAxisPersFindealCfRows = new ReportOrderPlanAxisPersFindealCfRows(this.Report);
                    _AxisAxisPersFindealCfRows.Render();
                }
                return _AxisAxisPersFindealCfRows;
            }
        }
        
        private ReportOrderPlanAxisPersFindealCfCols _AxisAxisPersFindealCfCols;
        [Browsable(false)]
        public ReportOrderPlanAxisPersFindealCfCols AxisAxisPersFindealCfCols {
            get {
                if (_AxisAxisPersFindealCfCols == null) { 
                    _AxisAxisPersFindealCfCols = new ReportOrderPlanAxisPersFindealCfCols(this.Report);
                    _AxisAxisPersFindealCfCols.Render();
                }
                return _AxisAxisPersFindealCfCols;
            }
        }
        
        private ReportOrderPlanAxisPersFindealCheckRows _AxisAxisPersFindealCheckRows;
        [Browsable(false)]
        public ReportOrderPlanAxisPersFindealCheckRows AxisAxisPersFindealCheckRows {
            get {
                if (_AxisAxisPersFindealCheckRows == null) { 
                    _AxisAxisPersFindealCheckRows = new ReportOrderPlanAxisPersFindealCheckRows(this.Report);
                    _AxisAxisPersFindealCheckRows.Render();
                }
                return _AxisAxisPersFindealCheckRows;
            }
        }
        
        private ReportOrderPlanAxisPersFindealCheckCols _AxisAxisPersFindealCheckCols;
        [Browsable(false)]
        public ReportOrderPlanAxisPersFindealCheckCols AxisAxisPersFindealCheckCols {
            get {
                if (_AxisAxisPersFindealCheckCols == null) { 
                    _AxisAxisPersFindealCheckCols = new ReportOrderPlanAxisPersFindealCheckCols(this.Report);
                    _AxisAxisPersFindealCheckCols.Render();
                }
                return _AxisAxisPersFindealCheckCols;
            }
        }
        
        private ReportOrderPlanTableTableIeImport _TableTableIeImport;
        [Browsable(false)]
        public ReportOrderPlanTableTableIeImport TableTableIeImport {
            get {
                if (_TableTableIeImport == null) { 
                    _TableTableIeImport = new ReportOrderPlanTableTableIeImport(this.Report);
                    _TableTableIeImport.Axiss.Add(AxisAxisPeriodImport);
                    _TableTableIeImport.Axiss.Add(AxisAxisIeArticleImport);
                }
                return _TableTableIeImport;
            }
        }
        
        private ReportOrderPlanTableTableIe _TableTableIe;
        [Browsable(false)]
        public ReportOrderPlanTableTableIe TableTableIe {
            get {
                if (_TableTableIe == null) { 
                    _TableTableIe = new ReportOrderPlanTableTableIe(this.Report);
                    _TableTableIe.Axiss.Add(AxisAxisPeriod);
                    _TableTableIe.Axiss.Add(AxisAxisIeArticle);
                }
                return _TableTableIe;
            }
        }
        
        private ReportOrderPlanTableTableCfImport _TableTableCfImport;
        [Browsable(false)]
        public ReportOrderPlanTableTableCfImport TableTableCfImport {
            get {
                if (_TableTableCfImport == null) { 
                    _TableTableCfImport = new ReportOrderPlanTableTableCfImport(this.Report);
                    _TableTableCfImport.Axiss.Add(AxisAxisPeriodImport);
                    _TableTableCfImport.Axiss.Add(AxisAxisCfArticleImport);
                }
                return _TableTableCfImport;
            }
        }
        
        private ReportOrderPlanTableTableCf _TableTableCf;
        [Browsable(false)]
        public ReportOrderPlanTableTableCf TableTableCf {
            get {
                if (_TableTableCf == null) { 
                    _TableTableCf = new ReportOrderPlanTableTableCf(this.Report);
                    _TableTableCf.Axiss.Add(AxisAxisPeriod);
                    _TableTableCf.Axiss.Add(AxisAxisCfArticle);
                }
                return _TableTableCf;
            }
        }
        
        private ReportOrderPlanTableTableBayDealImport _TableTableBayDealImport;
        [Browsable(false)]
        public ReportOrderPlanTableTableBayDealImport TableTableBayDealImport {
            get {
                if (_TableTableBayDealImport == null) { 
                    _TableTableBayDealImport = new ReportOrderPlanTableTableBayDealImport(this.Report);
                    _TableTableBayDealImport.Axiss.Add(AxisAxisPeriodImport);
                    _TableTableBayDealImport.Axiss.Add(AxisAxisFindeal);
                }
                return _TableTableBayDealImport;
            }
        }
        
        private ReportOrderPlanTableTableBayDeal _TableTableBayDeal;
        [Browsable(false)]
        public ReportOrderPlanTableTableBayDeal TableTableBayDeal {
            get {
                if (_TableTableBayDeal == null) { 
                    _TableTableBayDeal = new ReportOrderPlanTableTableBayDeal(this.Report);
                    _TableTableBayDeal.Axiss.Add(AxisAxisPeriod);
                    _TableTableBayDeal.Axiss.Add(AxisAxisFindeal);
                }
                return _TableTableBayDeal;
            }
        }
        
        private ReportOrderPlanTablePersIeBalance _TablePersIeBalance;
        [Browsable(false)]
        public ReportOrderPlanTablePersIeBalance TablePersIeBalance {
            get {
                if (_TablePersIeBalance == null) { 
                    _TablePersIeBalance = new ReportOrderPlanTablePersIeBalance(this.Report);
                    _TablePersIeBalance.Axiss.Add(AxisAxisPersFindealIeCols);
                    _TablePersIeBalance.Axiss.Add(AxisAxisPersFindealIeRows);
                }
                return _TablePersIeBalance;
            }
        }
        
        private ReportOrderPlanTableTableGoodsImport _TableTableGoodsImport;
        [Browsable(false)]
        public ReportOrderPlanTableTableGoodsImport TableTableGoodsImport {
            get {
                if (_TableTableGoodsImport == null) { 
                    _TableTableGoodsImport = new ReportOrderPlanTableTableGoodsImport(this.Report);
                    _TableTableGoodsImport.Axiss.Add(AxisAxisPeriodImport);
                    _TableTableGoodsImport.Axiss.Add(AxisAxisGoodsImport);
                }
                return _TableTableGoodsImport;
            }
        }
        
        private ReportOrderPlanTablePersStandarts _TablePersStandarts;
        [Browsable(false)]
        public ReportOrderPlanTablePersStandarts TablePersStandarts {
            get {
                if (_TablePersStandarts == null) { 
                    _TablePersStandarts = new ReportOrderPlanTablePersStandarts(this.Report);
                    _TablePersStandarts.Axiss.Add(AxisAxisStandartCol);
                    _TablePersStandarts.Axiss.Add(AxisAxisStandartRow);
                }
                return _TablePersStandarts;
            }
        }
        
        private ReportOrderPlanTableTableStandartsImport _TableTableStandartsImport;
        [Browsable(false)]
        public ReportOrderPlanTableTableStandartsImport TableTableStandartsImport {
            get {
                if (_TableTableStandartsImport == null) { 
                    _TableTableStandartsImport = new ReportOrderPlanTableTableStandartsImport(this.Report);
                    _TableTableStandartsImport.Axiss.Add(AxisAxisPeriodImport);
                    _TableTableStandartsImport.Axiss.Add(AxisAxisStandartImport);
                }
                return _TableTableStandartsImport;
            }
        }
        
        private ReportOrderPlanTableTableCalcImport _TableTableCalcImport;
        [Browsable(false)]
        public ReportOrderPlanTableTableCalcImport TableTableCalcImport {
            get {
                if (_TableTableCalcImport == null) { 
                    _TableTableCalcImport = new ReportOrderPlanTableTableCalcImport(this.Report);
                    _TableTableCalcImport.Axiss.Add(AxisAxisCalcImportCol);
                    _TableTableCalcImport.Axiss.Add(AxisAxisCalcImportRow);
                }
                return _TableTableCalcImport;
            }
        }
        
        private ReportOrderPlanTablePersCfBalance _TablePersCfBalance;
        [Browsable(false)]
        public ReportOrderPlanTablePersCfBalance TablePersCfBalance {
            get {
                if (_TablePersCfBalance == null) { 
                    _TablePersCfBalance = new ReportOrderPlanTablePersCfBalance(this.Report);
                    _TablePersCfBalance.Axiss.Add(AxisAxisPersFindealCfCols);
                    _TablePersCfBalance.Axiss.Add(AxisAxisPersFindealCfRows);
                }
                return _TablePersCfBalance;
            }
        }
        
        private ReportOrderPlanTablePersCheck _TablePersCheck;
        [Browsable(false)]
        public ReportOrderPlanTablePersCheck TablePersCheck {
            get {
                if (_TablePersCheck == null) { 
                    _TablePersCheck = new ReportOrderPlanTablePersCheck(this.Report);
                    _TablePersCheck.Axiss.Add(AxisAxisPersFindealCheckCols);
                    _TablePersCheck.Axiss.Add(AxisAxisPersFindealCheckRows);
                }
                return _TablePersCheck;
            }
        }
        
        private Dictionary<ReportOrderPlanArticleType, ReportOrderPlanArticle> _ConstArticle;
        [Browsable(false)]
        public IDictionary<ReportOrderPlanArticleType, ReportOrderPlanArticle> ConstArticle {
            get {
                if (_ConstArticle == null) {
                    _ConstArticle = new Dictionary<ReportOrderPlanArticleType, ReportOrderPlanArticle>(128);
                    foreach (var value in Report.ReportOrderPlanTemplate.ReportOrderPlanArticles) {
                        _ConstArticle[value.ValueType] = value;
                    }
                }
                return _ConstArticle;
            }
        }
        
        private Dictionary<ReportOrderPlanDealType, ReportOrderPlanDeal> _ConstDeal;
        [Browsable(false)]
        public IDictionary<ReportOrderPlanDealType, ReportOrderPlanDeal> ConstDeal {
            get {
                if (_ConstDeal == null) {
                    _ConstDeal = new Dictionary<ReportOrderPlanDealType, ReportOrderPlanDeal>(128);
                    foreach (var value in Report.ReportOrderPlanTemplate.ReportOrderPlanDeals) {
                        _ConstDeal[value.ValueType] = value;
                    }
                }
                return _ConstDeal;
            }
        }
        
        private Dictionary<ReportOrderPlanEntityType, ReportOrderPlanEntity> _ConstEntity;
        [Browsable(false)]
        public IDictionary<ReportOrderPlanEntityType, ReportOrderPlanEntity> ConstEntity {
            get {
                if (_ConstEntity == null) {
                    _ConstEntity = new Dictionary<ReportOrderPlanEntityType, ReportOrderPlanEntity>(128);
                    foreach (var value in Report.ReportOrderPlanTemplate.ReportOrderPlanEntitys) {
                        _ConstEntity[value.ValueType] = value;
                    }
                }
                return _ConstEntity;
            }
        }
        
        private Dictionary<ReportOrderPlanFindealType, ReportOrderPlanFindeal> _ConstFindeal;
        [Browsable(false)]
        public IDictionary<ReportOrderPlanFindealType, ReportOrderPlanFindeal> ConstFindeal {
            get {
                if (_ConstFindeal == null) {
                    _ConstFindeal = new Dictionary<ReportOrderPlanFindealType, ReportOrderPlanFindeal>(128);
                    foreach (var value in Report.ReportOrderPlanTemplate.ReportOrderPlanFindeals) {
                        _ConstFindeal[value.ValueType] = value;
                    }
                }
                return _ConstFindeal;
            }
        }
        
        private Dictionary<ReportOrderPlanFinrepType, ReportOrderPlanFinrep> _ConstFinrep;
        [Browsable(false)]
        public IDictionary<ReportOrderPlanFinrepType, ReportOrderPlanFinrep> ConstFinrep {
            get {
                if (_ConstFinrep == null) {
                    _ConstFinrep = new Dictionary<ReportOrderPlanFinrepType, ReportOrderPlanFinrep>(128);
                    foreach (var value in Report.ReportOrderPlanTemplate.ReportOrderPlanFinreps) {
                        _ConstFinrep[value.ValueType] = value;
                    }
                }
                return _ConstFinrep;
            }
        }
        
        private Dictionary<ReportOrderPlanPayTypeType, ReportOrderPlanPayType> _ConstPayType;
        [Browsable(false)]
        public IDictionary<ReportOrderPlanPayTypeType, ReportOrderPlanPayType> ConstPayType {
            get {
                if (_ConstPayType == null) {
                    _ConstPayType = new Dictionary<ReportOrderPlanPayTypeType, ReportOrderPlanPayType>(128);
                    foreach (var value in Report.ReportOrderPlanTemplate.ReportOrderPlanPayTypes) {
                        _ConstPayType[value.ValueType] = value;
                    }
                }
                return _ConstPayType;
            }
        }
        
        private Dictionary<ReportOrderPlanScenarioType, ReportOrderPlanScenario> _ConstScenario;
        [Browsable(false)]
        public IDictionary<ReportOrderPlanScenarioType, ReportOrderPlanScenario> ConstScenario {
            get {
                if (_ConstScenario == null) {
                    _ConstScenario = new Dictionary<ReportOrderPlanScenarioType, ReportOrderPlanScenario>(128);
                    foreach (var value in Report.ReportOrderPlanTemplate.ReportOrderPlanScenarios) {
                        _ConstScenario[value.ValueType] = value;
                    }
                }
                return _ConstScenario;
            }
        }
        
        private Dictionary<ReportOrderPlanValueTypeType, ReportOrderPlanValueType> _ConstValueType;
        [Browsable(false)]
        public IDictionary<ReportOrderPlanValueTypeType, ReportOrderPlanValueType> ConstValueType {
            get {
                if (_ConstValueType == null) {
                    _ConstValueType = new Dictionary<ReportOrderPlanValueTypeType, ReportOrderPlanValueType>(128);
                    foreach (var value in Report.ReportOrderPlanTemplate.ReportOrderPlanValueTypes) {
                        _ConstValueType[value.ValueType] = value;
                    }
                }
                return _ConstValueType;
            }
        }
        
        private Dictionary<ReportOrderPlanValutaType, ReportOrderPlanValuta> _ConstValuta;
        [Browsable(false)]
        public IDictionary<ReportOrderPlanValutaType, ReportOrderPlanValuta> ConstValuta {
            get {
                if (_ConstValuta == null) {
                    _ConstValuta = new Dictionary<ReportOrderPlanValutaType, ReportOrderPlanValuta>(128);
                    foreach (var value in Report.ReportOrderPlanTemplate.ReportOrderPlanValutas) {
                        _ConstValuta[value.ValueType] = value;
                    }
                }
                return _ConstValuta;
            }
        }
        
        private Dictionary<ReportOrderPlanVatModeType, ReportOrderPlanVatMode> _ConstVatMode;
        [Browsable(false)]
        public IDictionary<ReportOrderPlanVatModeType, ReportOrderPlanVatMode> ConstVatMode {
            get {
                if (_ConstVatMode == null) {
                    _ConstVatMode = new Dictionary<ReportOrderPlanVatModeType, ReportOrderPlanVatMode>(128);
                    foreach (var value in Report.ReportOrderPlanTemplate.ReportOrderPlanVatModes) {
                        _ConstVatMode[value.ValueType] = value;
                    }
                }
                return _ConstVatMode;
            }
        }
        
        private Dictionary<ReportOrderPlanEntityKindType, ReportOrderPlanEntityKind> _ConstEntityKind;
        [Browsable(false)]
        public IDictionary<ReportOrderPlanEntityKindType, ReportOrderPlanEntityKind> ConstEntityKind {
            get {
                if (_ConstEntityKind == null) {
                    _ConstEntityKind = new Dictionary<ReportOrderPlanEntityKindType, ReportOrderPlanEntityKind>(128);
                    foreach (var value in Report.ReportOrderPlanTemplate.ReportOrderPlanEntityKinds) {
                        _ConstEntityKind[value.ValueType] = value;
                    }
                }
                return _ConstEntityKind;
            }
        }
        
        private Dictionary<ReportOrderPlanDealKindType, ReportOrderPlanDealKind> _ConstDealKind;
        [Browsable(false)]
        public IDictionary<ReportOrderPlanDealKindType, ReportOrderPlanDealKind> ConstDealKind {
            get {
                if (_ConstDealKind == null) {
                    _ConstDealKind = new Dictionary<ReportOrderPlanDealKindType, ReportOrderPlanDealKind>(128);
                    foreach (var value in Report.ReportOrderPlanTemplate.ReportOrderPlanDealKinds) {
                        _ConstDealKind[value.ValueType] = value;
                    }
                }
                return _ConstDealKind;
            }
        }
        
        private Dictionary<ReportOrderPlanCorporatorType, ReportOrderPlanCorporator> _ConstCorporator;
        [Browsable(false)]
        public IDictionary<ReportOrderPlanCorporatorType, ReportOrderPlanCorporator> ConstCorporator {
            get {
                if (_ConstCorporator == null) {
                    _ConstCorporator = new Dictionary<ReportOrderPlanCorporatorType, ReportOrderPlanCorporator>(128);
                    foreach (var value in Report.ReportOrderPlanTemplate.ReportOrderPlanCorporators) {
                        _ConstCorporator[value.ValueType] = value;
                    }
                }
                return _ConstCorporator;
            }
        }
        
        private Dictionary<ReportOrderPlanOrderType, ReportOrderPlanOrder> _ConstOrder;
        [Browsable(false)]
        public IDictionary<ReportOrderPlanOrderType, ReportOrderPlanOrder> ConstOrder {
            get {
                if (_ConstOrder == null) {
                    _ConstOrder = new Dictionary<ReportOrderPlanOrderType, ReportOrderPlanOrder>(128);
                    foreach (var value in Report.ReportOrderPlanTemplate.ReportOrderPlanOrders) {
                        _ConstOrder[value.ValueType] = value;
                    }
                }
                return _ConstOrder;
            }
        }
        
        private Dictionary<ReportOrderPlanStandartType, ReportOrderPlanStandart> _ConstStandart;
        [Browsable(false)]
        public IDictionary<ReportOrderPlanStandartType, ReportOrderPlanStandart> ConstStandart {
            get {
                if (_ConstStandart == null) {
                    _ConstStandart = new Dictionary<ReportOrderPlanStandartType, ReportOrderPlanStandart>(128);
                    foreach (var value in Report.ReportOrderPlanTemplate.ReportOrderPlanStandarts) {
                        _ConstStandart[value.ValueType] = value;
                    }
                }
                return _ConstStandart;
            }
        }
        
        private Dictionary<ReportOrderPlanPrimaryValueType, ReportOrderPlanPrimaryValue> _ConstPrimaryValue;
        [Browsable(false)]
        public IDictionary<ReportOrderPlanPrimaryValueType, ReportOrderPlanPrimaryValue> ConstPrimaryValue {
            get {
                if (_ConstPrimaryValue == null) {
                    _ConstPrimaryValue = new Dictionary<ReportOrderPlanPrimaryValueType, ReportOrderPlanPrimaryValue>(128);
                    foreach (var value in Report.ReportOrderPlanTemplate.ReportOrderPlanPrimaryValues) {
                        _ConstPrimaryValue[value.ValueType] = value;
                    }
                }
                return _ConstPrimaryValue;
            }
        }
        
        private Dictionary<ReportOrderPlanFindealKindType, ReportOrderPlanFindealKind> _ConstFindealKind;
        [Browsable(false)]
        public IDictionary<ReportOrderPlanFindealKindType, ReportOrderPlanFindealKind> ConstFindealKind {
            get {
                if (_ConstFindealKind == null) {
                    _ConstFindealKind = new Dictionary<ReportOrderPlanFindealKindType, ReportOrderPlanFindealKind>(128);
                    foreach (var value in Report.ReportOrderPlanTemplate.ReportOrderPlanFindealKinds) {
                        _ConstFindealKind[value.ValueType] = value;
                    }
                }
                return _ConstFindealKind;
            }
        }
        
        private Dictionary<ReportOrderPlanPresentmultType, ReportOrderPlanPresentmult> _ConstPresentmult;
        [Browsable(false)]
        public IDictionary<ReportOrderPlanPresentmultType, ReportOrderPlanPresentmult> ConstPresentmult {
            get {
                if (_ConstPresentmult == null) {
                    _ConstPresentmult = new Dictionary<ReportOrderPlanPresentmultType, ReportOrderPlanPresentmult>(128);
                    foreach (var value in Report.ReportOrderPlanTemplate.ReportOrderPlanPresentmults) {
                        _ConstPresentmult[value.ValueType] = value;
                    }
                }
                return _ConstPresentmult;
            }
        }
        
        public ReportOrderPlanReportCore(ReportOrderPlanReport report) : base(report, NewCategoryValues()) { }
        
        private static ReportOrderPlanCategoryValues NewCategoryValues() {
            return new ReportOrderPlanCategoryValues();
        }
    }
    
    public abstract partial class ReportOrderPlanTable: MdfReportTable<ReportOrderPlanReport,ReportOrderPlanCategoryValue,ReportOrderPlanTable,ReportOrderPlanTableCell,ReportOrderPlanDataPoint> {
        
        public ReportOrderPlanTable(ReportOrderPlanReport report) : base(report) { }
        
        public ReportOrderPlanCalcVariant Variant { get; protected set; }
        
        public void Render(ReportOrderPlanReport report, ReportOrderPlanCalcVariant variant) {
            Variant = variant;
            RenderCore(report.ReportCore);
        }
        
        protected override void CellCustom(ReportOrderPlanTableCell cell) {
            CellCustom(cell, Variant);
        }
        
        protected virtual void CellCustom(ReportOrderPlanTableCell cell, ReportOrderPlanCalcVariant variant) { }
        
    }
    
    public abstract partial class ReportOrderPlanTableCell: MdfReportTableCell<ReportOrderPlanReport,ReportOrderPlanCategoryValue,ReportOrderPlanTable,ReportOrderPlanTableCell,ReportOrderPlanDataPoint> {
        
        public ReportOrderPlanTableCell(ReportOrderPlanTable table) : base(table) { }
        
    }
    
    public partial class ReportOrderPlanTableTableIeImport: ReportOrderPlanTable {
        
        public  ReportOrderPlanTableTableIeImport(ReportOrderPlanReport report) : base(report) { }
        
        protected override ReportOrderPlanTableCell CellCreate() {
            return new  ReportOrderPlanTableTableIeImportCell(this);
        }
        
        void TestCalcExpression() {
        }
        
        protected override void CellCustom(ReportOrderPlanTableCell cell, ReportOrderPlanCalcVariant variant) {
            var ord0 = ((ReportOrderPlanAxisPeriodImport.Ordinate)cell.Ordinates[0]).OrdinateType;
            var ord1 = ((ReportOrderPlanAxisIeArticleImport.Ordinate)cell.Ordinates[1]).OrdinateType;
            ReportOrderPlanCategoryValue category_value;
            ReportOrderPlanDataPoint data_point;
            IList<ReportOrderPlanCategoryValue> category_value_list = new List<ReportOrderPlanCategoryValue>(32);
            IList<ReportOrderPlanDataPoint> data_point_list = new List<ReportOrderPlanDataPoint>(32);
        }
        
    }
    
    public partial class ReportOrderPlanTableTableIeImportCell: ReportOrderPlanTableCell {
        
        public ReportOrderPlanTableTableIeImportCell(ReportOrderPlanTableTableIeImport table) : base(table) { }
        
    }
    
    public partial class ReportOrderPlanTableTableIe: ReportOrderPlanTable {
        
        public  ReportOrderPlanTableTableIe(ReportOrderPlanReport report) : base(report) { }
        
        protected override ReportOrderPlanTableCell CellCreate() {
            return new  ReportOrderPlanTableTableIeCell(this);
        }
        
        void TestCalcExpression() {
        }
        
        protected override void CellCustom(ReportOrderPlanTableCell cell, ReportOrderPlanCalcVariant variant) {
            var ord0 = ((ReportOrderPlanAxisPeriod.Ordinate)cell.Ordinates[0]).OrdinateType;
            var ord1 = ((ReportOrderPlanAxisIeArticle.Ordinate)cell.Ordinates[1]).OrdinateType;
            ReportOrderPlanCategoryValue category_value;
            ReportOrderPlanDataPoint data_point;
            IList<ReportOrderPlanCategoryValue> category_value_list = new List<ReportOrderPlanCategoryValue>(32);
            IList<ReportOrderPlanDataPoint> data_point_list = new List<ReportOrderPlanDataPoint>(32);
        }
        
    }
    
    public partial class ReportOrderPlanTableTableIeCell: ReportOrderPlanTableCell {
        
        public ReportOrderPlanTableTableIeCell(ReportOrderPlanTableTableIe table) : base(table) { }
        
    }
    
    public partial class ReportOrderPlanTableTableCfImport: ReportOrderPlanTable {
        
        public  ReportOrderPlanTableTableCfImport(ReportOrderPlanReport report) : base(report) { }
        
        protected override ReportOrderPlanTableCell CellCreate() {
            return new  ReportOrderPlanTableTableCfImportCell(this);
        }
        
        void TestCalcExpression() {
        }
        
        protected override void CellCustom(ReportOrderPlanTableCell cell, ReportOrderPlanCalcVariant variant) {
            var ord0 = ((ReportOrderPlanAxisPeriodImport.Ordinate)cell.Ordinates[0]).OrdinateType;
            var ord1 = ((ReportOrderPlanAxisCfArticleImport.Ordinate)cell.Ordinates[1]).OrdinateType;
            ReportOrderPlanCategoryValue category_value;
            ReportOrderPlanDataPoint data_point;
            IList<ReportOrderPlanCategoryValue> category_value_list = new List<ReportOrderPlanCategoryValue>(32);
            IList<ReportOrderPlanDataPoint> data_point_list = new List<ReportOrderPlanDataPoint>(32);
        }
        
    }
    
    public partial class ReportOrderPlanTableTableCfImportCell: ReportOrderPlanTableCell {
        
        public ReportOrderPlanTableTableCfImportCell(ReportOrderPlanTableTableCfImport table) : base(table) { }
        
    }
    
    public partial class ReportOrderPlanTableTableCf: ReportOrderPlanTable {
        
        public  ReportOrderPlanTableTableCf(ReportOrderPlanReport report) : base(report) { }
        
        protected override ReportOrderPlanTableCell CellCreate() {
            return new  ReportOrderPlanTableTableCfCell(this);
        }
        
        void TestCalcExpression() {
        }
        
        protected override void CellCustom(ReportOrderPlanTableCell cell, ReportOrderPlanCalcVariant variant) {
            var ord0 = ((ReportOrderPlanAxisPeriod.Ordinate)cell.Ordinates[0]).OrdinateType;
            var ord1 = ((ReportOrderPlanAxisCfArticle.Ordinate)cell.Ordinates[1]).OrdinateType;
            ReportOrderPlanCategoryValue category_value;
            ReportOrderPlanDataPoint data_point;
            IList<ReportOrderPlanCategoryValue> category_value_list = new List<ReportOrderPlanCategoryValue>(32);
            IList<ReportOrderPlanDataPoint> data_point_list = new List<ReportOrderPlanDataPoint>(32);
        }
        
    }
    
    public partial class ReportOrderPlanTableTableCfCell: ReportOrderPlanTableCell {
        
        public ReportOrderPlanTableTableCfCell(ReportOrderPlanTableTableCf table) : base(table) { }
        
    }
    
    public partial class ReportOrderPlanTableTableBayDealImport: ReportOrderPlanTable {
        
        public  ReportOrderPlanTableTableBayDealImport(ReportOrderPlanReport report) : base(report) { }
        
        protected override ReportOrderPlanTableCell CellCreate() {
            return new  ReportOrderPlanTableTableBayDealImportCell(this);
        }
        
        void TestCalcExpression() {
        }
        
        protected override void CellCustom(ReportOrderPlanTableCell cell, ReportOrderPlanCalcVariant variant) {
            var ord0 = ((ReportOrderPlanAxisPeriodImport.Ordinate)cell.Ordinates[0]).OrdinateType;
            var ord1 = ((ReportOrderPlanAxisFindeal.Ordinate)cell.Ordinates[1]).OrdinateType;
            ReportOrderPlanCategoryValue category_value;
            ReportOrderPlanDataPoint data_point;
            IList<ReportOrderPlanCategoryValue> category_value_list = new List<ReportOrderPlanCategoryValue>(32);
            IList<ReportOrderPlanDataPoint> data_point_list = new List<ReportOrderPlanDataPoint>(32);
        }
        
    }
    
    public partial class ReportOrderPlanTableTableBayDealImportCell: ReportOrderPlanTableCell {
        
        public ReportOrderPlanTableTableBayDealImportCell(ReportOrderPlanTableTableBayDealImport table) : base(table) { }
        
    }
    
    public partial class ReportOrderPlanTableTableBayDeal: ReportOrderPlanTable {
        
        public  ReportOrderPlanTableTableBayDeal(ReportOrderPlanReport report) : base(report) { }
        
        protected override ReportOrderPlanTableCell CellCreate() {
            return new  ReportOrderPlanTableTableBayDealCell(this);
        }
        
        void TestCalcExpression() {
        }
        
        protected override void CellCustom(ReportOrderPlanTableCell cell, ReportOrderPlanCalcVariant variant) {
            var ord0 = ((ReportOrderPlanAxisPeriod.Ordinate)cell.Ordinates[0]).OrdinateType;
            var ord1 = ((ReportOrderPlanAxisFindeal.Ordinate)cell.Ordinates[1]).OrdinateType;
            ReportOrderPlanCategoryValue category_value;
            ReportOrderPlanDataPoint data_point;
            IList<ReportOrderPlanCategoryValue> category_value_list = new List<ReportOrderPlanCategoryValue>(32);
            IList<ReportOrderPlanDataPoint> data_point_list = new List<ReportOrderPlanDataPoint>(32);
        }
        
    }
    
    public partial class ReportOrderPlanTableTableBayDealCell: ReportOrderPlanTableCell {
        
        public ReportOrderPlanTableTableBayDealCell(ReportOrderPlanTableTableBayDeal table) : base(table) { }
        
    }
    
    public partial class ReportOrderPlanTablePersIeBalance: ReportOrderPlanTable {
        
        public  ReportOrderPlanTablePersIeBalance(ReportOrderPlanReport report) : base(report) { }
        
        protected override ReportOrderPlanTableCell CellCreate() {
            return new  ReportOrderPlanTablePersIeBalanceCell(this);
        }
        
        void TestCalcExpression() {
        }
        
        protected override void CellCustom(ReportOrderPlanTableCell cell, ReportOrderPlanCalcVariant variant) {
            var ord0 = ((ReportOrderPlanAxisPersFindealIeCols.Ordinate)cell.Ordinates[0]).OrdinateType;
            var ord1 = ((ReportOrderPlanAxisPersFindealIeRows.Ordinate)cell.Ordinates[1]).OrdinateType;
            ReportOrderPlanCategoryValue category_value;
            ReportOrderPlanDataPoint data_point;
            IList<ReportOrderPlanCategoryValue> category_value_list = new List<ReportOrderPlanCategoryValue>(32);
            IList<ReportOrderPlanDataPoint> data_point_list = new List<ReportOrderPlanDataPoint>(32);
        }
        
    }
    
    public partial class ReportOrderPlanTablePersIeBalanceCell: ReportOrderPlanTableCell {
        
        public void CellDataPointStore(ReportOrderPlanDataPersIeBalance row) {
            ReportOrderPlanAxisPersFindealIeCols.OrdinateType ord_type = ((ReportOrderPlanAxisPersFindealIeCols.Ordinate)Ordinates[0]).OrdinateType;
            switch (ord_type) {
                case ReportOrderPlanAxisPersFindealIeCols.OrdinateType.IE_FORECAST_VAT:
                    row.IeForecastVat = DataPoint.ValueDecimal;
                    break;
                case ReportOrderPlanAxisPersFindealIeCols.OrdinateType.IE_FORECAST_COUNT:
                    row.IeForecastCount = DataPoint.ValueDecimal;
                    break;
                case ReportOrderPlanAxisPersFindealIeCols.OrdinateType.IE_FORECAST_SUMMALL:
                    row.IeForecastSummall = DataPoint.ValueDecimal;
                    break;
                case ReportOrderPlanAxisPersFindealIeCols.OrdinateType.IE_FORECAST_COST:
                    row.IeForecastCost = DataPoint.ValueDecimal;
                    break;
                case ReportOrderPlanAxisPersFindealIeCols.OrdinateType.IE_FORECAST_BALANCE:
                    row.IeForecastBalance = DataPoint.ValueDecimal;
                    break;
                case ReportOrderPlanAxisPersFindealIeCols.OrdinateType.IE_FORECAST_VATINCOST:
                    row.IeForecastVatincost = DataPoint.ValueDecimal;
                    break;
                case ReportOrderPlanAxisPersFindealIeCols.OrdinateType.IE_FORECAST_INSURANCE:
                    row.IeForecastInsurance = DataPoint.ValueDecimal;
                    break;
                case ReportOrderPlanAxisPersFindealIeCols.OrdinateType.IE_FORECAST_OVERHEAD:
                    row.IeForecastOverhead = DataPoint.ValueDecimal;
                    break;
                case ReportOrderPlanAxisPersFindealIeCols.OrdinateType.IE_FORECAST_ADVANCE:
                    row.IeForecastAdvance = DataPoint.ValueDecimal;
                    break;
            }
        }
        
        public void CellDataPointRestore(ReportOrderPlanDataPersIeBalance row) {
            ReportOrderPlanAxisPersFindealIeCols.OrdinateType ord_type = ((ReportOrderPlanAxisPersFindealIeCols.Ordinate)Ordinates[0]).OrdinateType;
            switch (ord_type) {
                case ReportOrderPlanAxisPersFindealIeCols.OrdinateType.IE_FORECAST_VAT:
                    DataPoint.Value = row.IeForecastVat;
                    break;
                case ReportOrderPlanAxisPersFindealIeCols.OrdinateType.IE_FORECAST_COUNT:
                    DataPoint.Value = row.IeForecastCount;
                    break;
                case ReportOrderPlanAxisPersFindealIeCols.OrdinateType.IE_FORECAST_SUMMALL:
                    DataPoint.Value = row.IeForecastSummall;
                    break;
                case ReportOrderPlanAxisPersFindealIeCols.OrdinateType.IE_FORECAST_COST:
                    DataPoint.Value = row.IeForecastCost;
                    break;
                case ReportOrderPlanAxisPersFindealIeCols.OrdinateType.IE_FORECAST_BALANCE:
                    DataPoint.Value = row.IeForecastBalance;
                    break;
                case ReportOrderPlanAxisPersFindealIeCols.OrdinateType.IE_FORECAST_VATINCOST:
                    DataPoint.Value = row.IeForecastVatincost;
                    break;
                case ReportOrderPlanAxisPersFindealIeCols.OrdinateType.IE_FORECAST_INSURANCE:
                    DataPoint.Value = row.IeForecastInsurance;
                    break;
                case ReportOrderPlanAxisPersFindealIeCols.OrdinateType.IE_FORECAST_OVERHEAD:
                    DataPoint.Value = row.IeForecastOverhead;
                    break;
                case ReportOrderPlanAxisPersFindealIeCols.OrdinateType.IE_FORECAST_ADVANCE:
                    DataPoint.Value = row.IeForecastAdvance;
                    break;
            }
        }
        
        public override void Store() {
            base.Store();
            var row = Table.Report.DataPersIeBalances.FirstOrDefault(
                x =>
                    x.DimReport == Ordinates[1].CategoryValue.DimReport &&
                    x.DimPeriod == Ordinates[1].CategoryValue.DimPeriod &&
                    x.DimFindeal == Ordinates[1].CategoryValue.DimFindeal &&
                    x.DimValuta == Ordinates[1].CategoryValue.DimValuta &&
                    true
                );
            if (row == null) {
                if ((DataPoint.DataType == MdfDataType.DT_DECIMAL ||
                    DataPoint.DataType == MdfDataType.DT_MONETARY) && 
                    DataPoint.ValueDecimal == 0m )
                        return;
                row = new ReportOrderPlanDataPersIeBalance(Table.Report.Session);
                Table.Report.DataPersIeBalances.Add(row);
                row.DimReport = Ordinates[1].CategoryValue.DimReport;
                row.DimPeriod = Ordinates[1].CategoryValue.DimPeriod;
                row.DimFindeal = Ordinates[1].CategoryValue.DimFindeal;
                row.DimValuta = Ordinates[1].CategoryValue.DimValuta;
            }
            CellDataPointStore(row);
        }
        
        public override void Restore() {
            base.Restore();
            var row = Table.Report.DataPersIeBalances.FirstOrDefault(
                x =>
                    x.DimReport == Ordinates[1].CategoryValue.DimReport &&
                    x.DimPeriod == Ordinates[1].CategoryValue.DimPeriod &&
                    x.DimFindeal == Ordinates[1].CategoryValue.DimFindeal &&
                    x.DimValuta == Ordinates[1].CategoryValue.DimValuta &&
                    true
                );
            if (row == null) {
                if (DataPoint.DataType == MdfDataType.DT_DECIMAL ||
                    DataPoint.DataType == MdfDataType.DT_MONETARY)
                        DataPoint.Value = 0m;
                return;
            }
            CellDataPointRestore(row);
        }
        
        public ReportOrderPlanTablePersIeBalanceCell(ReportOrderPlanTablePersIeBalance table) : base(table) { }
        
    }
    
    public partial class ReportOrderPlanTableTableGoodsImport: ReportOrderPlanTable {
        
        public  ReportOrderPlanTableTableGoodsImport(ReportOrderPlanReport report) : base(report) { }
        
        protected override ReportOrderPlanTableCell CellCreate() {
            return new  ReportOrderPlanTableTableGoodsImportCell(this);
        }
        
        void TestCalcExpression() {
        }
        
        protected override void CellCustom(ReportOrderPlanTableCell cell, ReportOrderPlanCalcVariant variant) {
            var ord0 = ((ReportOrderPlanAxisPeriodImport.Ordinate)cell.Ordinates[0]).OrdinateType;
            var ord1 = ((ReportOrderPlanAxisGoodsImport.Ordinate)cell.Ordinates[1]).OrdinateType;
            ReportOrderPlanCategoryValue category_value;
            ReportOrderPlanDataPoint data_point;
            IList<ReportOrderPlanCategoryValue> category_value_list = new List<ReportOrderPlanCategoryValue>(32);
            IList<ReportOrderPlanDataPoint> data_point_list = new List<ReportOrderPlanDataPoint>(32);
        }
        
    }
    
    public partial class ReportOrderPlanTableTableGoodsImportCell: ReportOrderPlanTableCell {
        
        public ReportOrderPlanTableTableGoodsImportCell(ReportOrderPlanTableTableGoodsImport table) : base(table) { }
        
    }
    
    public partial class ReportOrderPlanTablePersStandarts: ReportOrderPlanTable {
        
        public  ReportOrderPlanTablePersStandarts(ReportOrderPlanReport report) : base(report) { }
        
        protected override ReportOrderPlanTableCell CellCreate() {
            return new  ReportOrderPlanTablePersStandartsCell(this);
        }
        
        void TestCalcExpression() {
        }
        
        protected override void CellCustom(ReportOrderPlanTableCell cell, ReportOrderPlanCalcVariant variant) {
            var ord0 = ((ReportOrderPlanAxisStandartCol.Ordinate)cell.Ordinates[0]).OrdinateType;
            var ord1 = ((ReportOrderPlanAxisStandartRow.Ordinate)cell.Ordinates[1]).OrdinateType;
            ReportOrderPlanCategoryValue category_value;
            ReportOrderPlanDataPoint data_point;
            IList<ReportOrderPlanCategoryValue> category_value_list = new List<ReportOrderPlanCategoryValue>(32);
            IList<ReportOrderPlanDataPoint> data_point_list = new List<ReportOrderPlanDataPoint>(32);
        }
        
    }
    
    public partial class ReportOrderPlanTablePersStandartsCell: ReportOrderPlanTableCell {
        
        public void CellDataPointStore(ReportOrderPlanDataPersStandarts row) {
            ReportOrderPlanAxisStandartCol.OrdinateType ord_type = ((ReportOrderPlanAxisStandartCol.Ordinate)Ordinates[0]).OrdinateType;
            switch (ord_type) {
                case ReportOrderPlanAxisStandartCol.OrdinateType.STDC_STAFF_FOT:
                    row.StdcStaffFot = DataPoint.ValueDecimal;
                    break;
                case ReportOrderPlanAxisStandartCol.OrdinateType.STDC_STAFF_INSURANCE:
                    row.StdcStaffInsurance = DataPoint.ValueDecimal;
                    break;
                case ReportOrderPlanAxisStandartCol.OrdinateType.STDC_STAFF_OVERHEAD:
                    row.StdcStaffOverhead = DataPoint.ValueDecimal;
                    break;
                case ReportOrderPlanAxisStandartCol.OrdinateType.STDC_EXCHANGE_FROM_RUB:
                    row.StdcExchangeFromRub = DataPoint.ValueDecimal;
                    break;
                case ReportOrderPlanAxisStandartCol.OrdinateType.STDC_EXCHANGE_FROM_EUR:
                    row.StdcExchangeFromEur = DataPoint.ValueDecimal;
                    break;
                case ReportOrderPlanAxisStandartCol.OrdinateType.STDC_EXCHANGE_FROM_USD:
                    row.StdcExchangeFromUsd = DataPoint.ValueDecimal;
                    break;
                case ReportOrderPlanAxisStandartCol.OrdinateType.STDC_TAX_VAT_NORMAL:
                    row.StdcTaxVatNormal = DataPoint.ValueDecimal;
                    break;
                case ReportOrderPlanAxisStandartCol.OrdinateType.STDC_TAX_VAT_EXPORT:
                    row.StdcTaxVatExport = DataPoint.ValueDecimal;
                    break;
            }
        }
        
        public void CellDataPointRestore(ReportOrderPlanDataPersStandarts row) {
            ReportOrderPlanAxisStandartCol.OrdinateType ord_type = ((ReportOrderPlanAxisStandartCol.Ordinate)Ordinates[0]).OrdinateType;
            switch (ord_type) {
                case ReportOrderPlanAxisStandartCol.OrdinateType.STDC_STAFF_FOT:
                    DataPoint.Value = row.StdcStaffFot;
                    break;
                case ReportOrderPlanAxisStandartCol.OrdinateType.STDC_STAFF_INSURANCE:
                    DataPoint.Value = row.StdcStaffInsurance;
                    break;
                case ReportOrderPlanAxisStandartCol.OrdinateType.STDC_STAFF_OVERHEAD:
                    DataPoint.Value = row.StdcStaffOverhead;
                    break;
                case ReportOrderPlanAxisStandartCol.OrdinateType.STDC_EXCHANGE_FROM_RUB:
                    DataPoint.Value = row.StdcExchangeFromRub;
                    break;
                case ReportOrderPlanAxisStandartCol.OrdinateType.STDC_EXCHANGE_FROM_EUR:
                    DataPoint.Value = row.StdcExchangeFromEur;
                    break;
                case ReportOrderPlanAxisStandartCol.OrdinateType.STDC_EXCHANGE_FROM_USD:
                    DataPoint.Value = row.StdcExchangeFromUsd;
                    break;
                case ReportOrderPlanAxisStandartCol.OrdinateType.STDC_TAX_VAT_NORMAL:
                    DataPoint.Value = row.StdcTaxVatNormal;
                    break;
                case ReportOrderPlanAxisStandartCol.OrdinateType.STDC_TAX_VAT_EXPORT:
                    DataPoint.Value = row.StdcTaxVatExport;
                    break;
            }
        }
        
        public override void Store() {
            base.Store();
            var row = Table.Report.DataPersStandartss.FirstOrDefault(
                x =>
                    x.DimReport == Ordinates[1].CategoryValue.DimReport &&
                    x.DimPeriod == Ordinates[1].CategoryValue.DimPeriod &&
                    x.DimParty == Ordinates[1].CategoryValue.DimParty &&
                    true
                );
            if (row == null) {
                if ((DataPoint.DataType == MdfDataType.DT_DECIMAL ||
                    DataPoint.DataType == MdfDataType.DT_MONETARY) && 
                    DataPoint.ValueDecimal == 0m )
                        return;
                row = new ReportOrderPlanDataPersStandarts(Table.Report.Session);
                Table.Report.DataPersStandartss.Add(row);
                row.DimReport = Ordinates[1].CategoryValue.DimReport;
                row.DimPeriod = Ordinates[1].CategoryValue.DimPeriod;
                row.DimParty = Ordinates[1].CategoryValue.DimParty;
            }
            CellDataPointStore(row);
        }
        
        public override void Restore() {
            base.Restore();
            var row = Table.Report.DataPersStandartss.FirstOrDefault(
                x =>
                    x.DimReport == Ordinates[1].CategoryValue.DimReport &&
                    x.DimPeriod == Ordinates[1].CategoryValue.DimPeriod &&
                    x.DimParty == Ordinates[1].CategoryValue.DimParty &&
                    true
                );
            if (row == null) {
                if (DataPoint.DataType == MdfDataType.DT_DECIMAL ||
                    DataPoint.DataType == MdfDataType.DT_MONETARY)
                        DataPoint.Value = 0m;
                return;
            }
            CellDataPointRestore(row);
        }
        
        public ReportOrderPlanTablePersStandartsCell(ReportOrderPlanTablePersStandarts table) : base(table) { }
        
    }
    
    public partial class ReportOrderPlanTableTableStandartsImport: ReportOrderPlanTable {
        
        public  ReportOrderPlanTableTableStandartsImport(ReportOrderPlanReport report) : base(report) { }
        
        protected override ReportOrderPlanTableCell CellCreate() {
            return new  ReportOrderPlanTableTableStandartsImportCell(this);
        }
        
        void TestCalcExpression() {
        }
        
        protected override void CellCustom(ReportOrderPlanTableCell cell, ReportOrderPlanCalcVariant variant) {
            var ord0 = ((ReportOrderPlanAxisPeriodImport.Ordinate)cell.Ordinates[0]).OrdinateType;
            var ord1 = ((ReportOrderPlanAxisStandartImport.Ordinate)cell.Ordinates[1]).OrdinateType;
            ReportOrderPlanCategoryValue category_value;
            ReportOrderPlanDataPoint data_point;
            IList<ReportOrderPlanCategoryValue> category_value_list = new List<ReportOrderPlanCategoryValue>(32);
            IList<ReportOrderPlanDataPoint> data_point_list = new List<ReportOrderPlanDataPoint>(32);
        }
        
    }
    
    public partial class ReportOrderPlanTableTableStandartsImportCell: ReportOrderPlanTableCell {
        
        public ReportOrderPlanTableTableStandartsImportCell(ReportOrderPlanTableTableStandartsImport table) : base(table) { }
        
    }
    
    public partial class ReportOrderPlanTableTableCalcImport: ReportOrderPlanTable {
        
        public  ReportOrderPlanTableTableCalcImport(ReportOrderPlanReport report) : base(report) { }
        
        protected override ReportOrderPlanTableCell CellCreate() {
            return new  ReportOrderPlanTableTableCalcImportCell(this);
        }
        
        void TestCalcExpression() {
        }
        
        protected override void CellCustom(ReportOrderPlanTableCell cell, ReportOrderPlanCalcVariant variant) {
            var ord0 = ((ReportOrderPlanAxisCalcImportCol.Ordinate)cell.Ordinates[0]).OrdinateType;
            var ord1 = ((ReportOrderPlanAxisCalcImportRow.Ordinate)cell.Ordinates[1]).OrdinateType;
            ReportOrderPlanCategoryValue category_value;
            ReportOrderPlanDataPoint data_point;
            IList<ReportOrderPlanCategoryValue> category_value_list = new List<ReportOrderPlanCategoryValue>(32);
            IList<ReportOrderPlanDataPoint> data_point_list = new List<ReportOrderPlanDataPoint>(32);
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_MONTH && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDALL_VALFIN_SUMMALL) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPoint.ValueDecimal) + (x.Links[2].DataPoint.ValueDecimal)));
                cell.Calc.Formula = " (x.Links[1].DataPoint.ValueDecimal) + (x.Links[2].DataPoint.ValueDecimal)";
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value.DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value.DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value.DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value.DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value.DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value.DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value.DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value.DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value.DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value.DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value.DimValueType = Report.ReportCore.ConstValueType[ReportOrderPlanValueTypeType.COST];
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value.DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value.DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value.DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value.DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value.DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value.DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value.DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value.DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value.DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value.DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value.DimValueType = Report.ReportCore.ConstValueType[ReportOrderPlanValueTypeType.VAT];
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[2] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_MONTH && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTS_FINDOTHER_VALFIN_COST) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPoint.ValueDecimal)));
                cell.Calc.Formula = " (x.Links[1].DataPoint.ValueDecimal)";
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value.DimValueType = Report.ReportCore.ConstValueType[ReportOrderPlanValueTypeType.BALANCE];
                category_value.DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value.DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value.DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value.DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value.DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value.DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value.DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value.DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value.DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value.DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_MONTH && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTS_FINDPARTY_VALFIN_BALANCE) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPoint.ValueDecimal)));
                cell.Calc.Formula = " (x.Links[1].DataPoint.ValueDecimal)";
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value.DimValueType = Report.ReportCore.ConstValueType[ReportOrderPlanValueTypeType.COST];
                category_value.DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value.DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value.DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value.DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value.DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value.DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value.DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value.DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value.DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value.DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_MONTH && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUB_FINDALL_VALFIN_SUMMALL) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPoint.ValueDecimal)));
                cell.Calc.Formula = " (x.Links[1].DataPoint.ValueDecimal)";
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value.DimValueType = Report.ReportCore.ConstValueType[ReportOrderPlanValueTypeType.COST];
                category_value.DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value.DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value.DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value.DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value.DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value.DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value.DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value.DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value.DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value.DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_MONTH && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_STAFF_REPORT_PRIMARYCOUNT_FINDEAL_OVERHEAD) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPoint.ValueDecimal) * (x.Links[2].DataPoint.ValueDecimal)));
                cell.Calc.Formula = " (x.Links[1].DataPoint.ValueDecimal) * (x.Links[2].DataPoint.ValueDecimal)";
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value.DimValueType = Report.ReportCore.ConstValueType[ReportOrderPlanValueTypeType.COST];
                category_value.DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value.DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value.DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value.DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value.DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value.DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value.DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value.DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value.DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value.DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimValueType = Report.ReportCore.ConstValueType[ReportOrderPlanValueTypeType.STANDART];
                category_value.DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value.DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value.DimStandart = Report.ReportCore.ConstStandart[ReportOrderPlanStandartType.STD_STAFF_OVERHEAD];
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[2] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_MONTH && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_STAFF_REPORT_PRIMARYCOUNT_FINDEAL_INSURANCE) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPoint.ValueDecimal) * (x.Links[2].DataPoint.ValueDecimal)));
                cell.Calc.Formula = " (x.Links[1].DataPoint.ValueDecimal) * (x.Links[2].DataPoint.ValueDecimal)";
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value.DimValueType = Report.ReportCore.ConstValueType[ReportOrderPlanValueTypeType.COST];
                category_value.DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value.DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value.DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value.DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value.DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value.DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value.DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value.DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value.DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value.DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimValueType = Report.ReportCore.ConstValueType[ReportOrderPlanValueTypeType.STANDART];
                category_value.DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value.DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value.DimStandart = Report.ReportCore.ConstStandart[ReportOrderPlanStandartType.STD_STAFF_INSURANCE];
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[2] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_MONTH && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_CF_REPORT_PARTYSTAFF_FINDEALVALUTA_PREPAY) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPoint.ValueDecimal)));
                cell.Calc.Formula = " (x.Links[1].DataPoint.ValueDecimal)";
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value.DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value.DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value.DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value.DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value.DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value.DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value.DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value.DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value.DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value.DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value.DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_MONTH && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_STAFF_REPORT_PRIMARYCOUNT_FINDEAL_COST) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPoint.ValueDecimal) * (x.Links[2].DataPoint.ValueDecimal) / (x.Links[3].DataPoint.ValueDecimal)));
                cell.Calc.Formula = " (x.Links[1].DataPoint.ValueDecimal) * (x.Links[2].DataPoint.ValueDecimal) / (x.Links[3].DataPoint.ValueDecimal)";
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value.DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value.DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value.DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value.DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value.DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value.DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value.DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value.DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value.DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value.DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value.DimValueType = Report.ReportCore.ConstValueType[ReportOrderPlanValueTypeType.COUNT];
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value.DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value.DimValueType = Report.ReportCore.ConstValueType[ReportOrderPlanValueTypeType.STANDART];
                category_value.DimStandart = Report.ReportCore.ConstStandart[ReportOrderPlanStandartType.STD_STAFF_FOT];
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[2] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimValueType = Report.ReportCore.ConstValueType[ReportOrderPlanValueTypeType.PRESENTMULT];
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[3] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_MONTH && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_STAFF_REPORT_PRIMARYCOUNT_FINDEAL_BALANCE) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPoint.ValueDecimal) + (x.Links[2].DataPoint.ValueDecimal) + (x.Links[3].DataPoint.ValueDecimal)));
                cell.Calc.Formula = " (x.Links[1].DataPoint.ValueDecimal) + (x.Links[2].DataPoint.ValueDecimal) + (x.Links[3].DataPoint.ValueDecimal)";
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value.DimValueType = Report.ReportCore.ConstValueType[ReportOrderPlanValueTypeType.COST];
                category_value.DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value.DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value.DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value.DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value.DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value.DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value.DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value.DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value.DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value.DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value.DimValueType = Report.ReportCore.ConstValueType[ReportOrderPlanValueTypeType.INSURANCE];
                category_value.DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value.DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value.DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value.DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value.DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value.DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value.DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value.DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value.DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value.DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[2] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value.DimValueType = Report.ReportCore.ConstValueType[ReportOrderPlanValueTypeType.OVERHEAD];
                category_value.DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value.DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value.DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value.DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value.DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value.DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value.DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value.DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value.DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value.DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[3] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_MONTH && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_CF_REPORT_PARTYSTAFF_FINDEALVALUTA_ALLPAY) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPoint.ValueDecimal)));
                cell.Calc.Formula = " (x.Links[1].DataPoint.ValueDecimal)";
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value.DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value.DimFinrep = Report.ReportCore.ConstFinrep[ReportOrderPlanFinrepType.FINREP_IE];
                category_value.DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value.DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value.DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value.DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value.DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value.DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value.DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value.DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value.DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_MONTH && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_CF_PENTITY_REPORT_VALUTAFINDEAL_REPORTVALUTA_PREPAY) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPoint.ValueDecimal) * (x.Links[2].DataPoint.ValueDecimal)));
                cell.Calc.Formula = " (x.Links[1].DataPoint.ValueDecimal) * (x.Links[2].DataPoint.ValueDecimal)";
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value.DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value.DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value.DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value.DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value.DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value.DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value.DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value.DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value.DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value.DimPayType = cell.DataPoint.CategoryValue.DimPayType;
                category_value.DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value.DimValuta = category_value.DimFindeal.Valuta;
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value.DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value.DimValueType = Report.ReportCore.ConstValueType[ReportOrderPlanValueTypeType.STANDART];
                category_value.DimStandart = Report.ReportCore.ConstStandart[ReportOrderPlanStandartType.STD_EXCHANGE_RATE];
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[2] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_MONTH && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_CF_PENTITY_REPORT_VALUTAFINDEAL_REPORTVALUTA_POSTPAY) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPoint.ValueDecimal) * (x.Links[2].DataPoint.ValueDecimal)));
                cell.Calc.Formula = " (x.Links[1].DataPoint.ValueDecimal) * (x.Links[2].DataPoint.ValueDecimal)";
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value.DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value.DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value.DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value.DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value.DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value.DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value.DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value.DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value.DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value.DimPayType = cell.DataPoint.CategoryValue.DimPayType;
                category_value.DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value.DimValuta = category_value.DimFindeal.Valuta;
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value.DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value.DimValueType = Report.ReportCore.ConstValueType[ReportOrderPlanValueTypeType.STANDART];
                category_value.DimStandart = Report.ReportCore.ConstStandart[ReportOrderPlanStandartType.STD_EXCHANGE_RATE];
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[2] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_MONTH && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_CF_PENTITY_REPORT_FINDEALOTHER_VALUTA_PREPAY) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPoint.ValueDecimal)));
                cell.Calc.Formula = " (x.Links[1].DataPoint.ValueDecimal)";
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value.DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value.DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value.DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value.DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value.DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value.DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value.DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value.DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value.DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value.DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value.DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_MONTH && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_CF_PENTITY_REPORT_FINDEALPARTY_VALUTA_ALLPAY) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPoint.ValueDecimal) + (x.Links[2].DataPoint.ValueDecimal)));
                cell.Calc.Formula = " (x.Links[1].DataPoint.ValueDecimal) + (x.Links[2].DataPoint.ValueDecimal)";
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value.DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value.DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value.DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value.DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value.DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value.DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value.DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value.DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value.DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value.DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value.DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value.DimPayType = Report.ReportCore.ConstPayType[ReportOrderPlanPayTypeType.PREPAYMENT];
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value.DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value.DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value.DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value.DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value.DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value.DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value.DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value.DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value.DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value.DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value.DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value.DimPayType = Report.ReportCore.ConstPayType[ReportOrderPlanPayTypeType.POSTPAYMENT];
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[2] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_MONTH && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_CF_PENTITY_REPORT_VALUTAFINDEAL_REPORTVALUTA_ALLPAY) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPoint.ValueDecimal) + (x.Links[2].DataPoint.ValueDecimal)));
                cell.Calc.Formula = " (x.Links[1].DataPoint.ValueDecimal) + (x.Links[2].DataPoint.ValueDecimal)";
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value.DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value.DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value.DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value.DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value.DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value.DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value.DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value.DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value.DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value.DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value.DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value.DimPayType = Report.ReportCore.ConstPayType[ReportOrderPlanPayTypeType.PREPAYMENT];
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value.DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value.DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value.DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value.DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value.DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value.DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value.DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value.DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value.DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value.DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value.DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value.DimPayType = Report.ReportCore.ConstPayType[ReportOrderPlanPayTypeType.POSTPAYMENT];
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[2] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_MONTH && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDPARTY_VALFIN_BALANCE) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPoint.ValueDecimal) * ( 1 + (x.Links[2].DataPoint.ValueDecimal))));
                cell.Calc.Formula = " (x.Links[1].DataPoint.ValueDecimal) * ( 1 + (x.Links[2].DataPoint.ValueDecimal))";
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value.DimValueType = Report.ReportCore.ConstValueType[ReportOrderPlanValueTypeType.COST];
                category_value.DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value.DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value.DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value.DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value.DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value.DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value.DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value.DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value.DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value.DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimValueType = Report.ReportCore.ConstValueType[ReportOrderPlanValueTypeType.STANDART];
                category_value.DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value.DimStandart = Report.ReportCore.ConstStandart[ReportOrderPlanStandartType.STD_TAX_VAT];
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[2] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_MONTH && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL_VALUTA_COST) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPoint.ValueDecimal) * (x.Links[2].DataPoint.ValueDecimal)));
                cell.Calc.Formula = " (x.Links[1].DataPoint.ValueDecimal) * (x.Links[2].DataPoint.ValueDecimal)";
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value.DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value.DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value.DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value.DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value.DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value.DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value.DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value.DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value.DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value.DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value.DimValuta = category_value.DimFindeal.Valuta;
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value.DimValueType = Report.ReportCore.ConstValueType[ReportOrderPlanValueTypeType.STANDART];
                category_value.DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value.DimStandart = Report.ReportCore.ConstStandart[ReportOrderPlanStandartType.STD_EXCHANGE_RATE];
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[2] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_MONTH && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL_VALUTA_BALANCE) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPoint.ValueDecimal) * (x.Links[2].DataPoint.ValueDecimal)));
                cell.Calc.Formula = " (x.Links[1].DataPoint.ValueDecimal) * (x.Links[2].DataPoint.ValueDecimal)";
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value.DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value.DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value.DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value.DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value.DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value.DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value.DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value.DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value.DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value.DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value.DimValuta = category_value.DimFindeal.Valuta;
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value.DimValueType = Report.ReportCore.ConstValueType[ReportOrderPlanValueTypeType.STANDART];
                category_value.DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value.DimStandart = Report.ReportCore.ConstStandart[ReportOrderPlanStandartType.STD_EXCHANGE_RATE];
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[2] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_MONTH && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDOTHER_VALFIN_COST) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPoint.ValueDecimal)));
                cell.Calc.Formula = " (x.Links[1].DataPoint.ValueDecimal)";
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value.DimValueType = Report.ReportCore.ConstValueType[ReportOrderPlanValueTypeType.BALANCE];
                category_value.DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value.DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value.DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value.DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value.DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value.DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value.DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value.DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value.DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value.DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_MONTH && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDALL_VALFIN_VATINCOST) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPoint.ValueDecimal)));
                cell.Calc.Formula = " (x.Links[1].DataPoint.ValueDecimal)";
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value.DimValueType = Report.ReportCore.ConstValueType[ReportOrderPlanValueTypeType.VAT];
                category_value.DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value.DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value.DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value.DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value.DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value.DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value.DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value.DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value.DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value.DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_MONTH && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDALL_VALFIN_VAT) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPoint.ValueDecimal) * (x.Links[2].DataPoint.ValueDecimal)));
                cell.Calc.Formula = " (x.Links[1].DataPoint.ValueDecimal) * (x.Links[2].DataPoint.ValueDecimal)";
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value.DimValueType = Report.ReportCore.ConstValueType[ReportOrderPlanValueTypeType.COST];
                category_value.DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value.DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value.DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value.DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value.DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value.DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value.DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value.DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value.DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value.DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimValueType = Report.ReportCore.ConstValueType[ReportOrderPlanValueTypeType.STANDART];
                category_value.DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value.DimStandart = Report.ReportCore.ConstStandart[ReportOrderPlanStandartType.STD_TAX_VAT];
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[2] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_MONTH && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL_VALUTA_VAT) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPoint.ValueDecimal) - (x.Links[2].DataPoint.ValueDecimal)));
                cell.Calc.Formula = " (x.Links[1].DataPoint.ValueDecimal) - (x.Links[2].DataPoint.ValueDecimal)";
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value.DimValueType = Report.ReportCore.ConstValueType[ReportOrderPlanValueTypeType.SUMMALL];
                category_value.DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value.DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value.DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value.DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value.DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value.DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value.DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value.DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value.DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value.DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value.DimValueType = Report.ReportCore.ConstValueType[ReportOrderPlanValueTypeType.COST];
                category_value.DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value.DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value.DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value.DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value.DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value.DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value.DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value.DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value.DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value.DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[2] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_MONTH && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL_VALUTA_VATINCOST) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPoint.ValueDecimal) - (x.Links[2].DataPoint.ValueDecimal)));
                cell.Calc.Formula = " (x.Links[1].DataPoint.ValueDecimal) - (x.Links[2].DataPoint.ValueDecimal)";
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value.DimValueType = Report.ReportCore.ConstValueType[ReportOrderPlanValueTypeType.BALANCE];
                category_value.DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value.DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value.DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value.DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value.DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value.DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value.DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value.DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value.DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value.DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value.DimValueType = Report.ReportCore.ConstValueType[ReportOrderPlanValueTypeType.COST];
                category_value.DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value.DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value.DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value.DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value.DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value.DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value.DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value.DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value.DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value.DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[2] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_MONTH && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL_VALUTA_SUMMALL) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPoint.ValueDecimal) * (x.Links[2].DataPoint.ValueDecimal)));
                cell.Calc.Formula = " (x.Links[1].DataPoint.ValueDecimal) * (x.Links[2].DataPoint.ValueDecimal)";
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value.DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value.DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value.DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value.DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value.DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value.DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value.DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value.DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value.DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value.DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value.DimValuta = category_value.DimFindeal.Valuta;
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value.DimValueType = Report.ReportCore.ConstValueType[ReportOrderPlanValueTypeType.STANDART];
                category_value.DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value.DimStandart = Report.ReportCore.ConstStandart[ReportOrderPlanStandartType.STD_EXCHANGE_RATE];
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[2] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_YEAR_YEAR && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_IE_REPORT_ALLFINDEAL_REPORTVALUTA_SUMMALL) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPointList.Sum(y => y.ValueDecimal))));
                cell.Calc.Formula = " (x.Links[1].DataPointList.Sum(y => y.ValueDecimal))";
                
                category_value_list.Clear();
                data_point_list.Clear();
                category_value_list.Add(new ReportOrderPlanCategoryValue());
                category_value_list[category_value_list.Count - 1].DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value_list[category_value_list.Count - 1].DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value_list[category_value_list.Count - 1].DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value_list[category_value_list.Count - 1].DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value_list[category_value_list.Count - 1].DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value_list[category_value_list.Count - 1].DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value_list[category_value_list.Count - 1].DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value_list[category_value_list.Count - 1].DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value_list[category_value_list.Count - 1].DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value_list[category_value_list.Count - 1].DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value_list[category_value_list.Count - 1].DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value_list[category_value_list.Count - 1].DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value_list[category_value_list.Count - 1].DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value_list[category_value_list.Count - 1].DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value_list[category_value_list.Count - 1].DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value_list[category_value_list.Count - 1].DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value_list[category_value_list.Count - 1].DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value_list[category_value_list.Count - 1].DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value_list.Add(null);
                foreach (var period_plan_month in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_PLAN_MONTH)) {
                    category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                    category_value_list[category_value_list.Count - 1].DimPeriod = period_plan_month;
                    category_value = Report.ReportCore.CategoryValues.Locate(category_value_list[category_value_list.Count - 1]);
                    data_point_list.Add(Report.ReportCore.DataPointGet(category_value));
                }
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point_list);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_YEAR_YEAR && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_IE_REPORT_ALLFINDEAL_REPORTVALUTA_BALANCE) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPointList.Sum(y => y.ValueDecimal))));
                cell.Calc.Formula = " (x.Links[1].DataPointList.Sum(y => y.ValueDecimal))";
                
                category_value_list.Clear();
                data_point_list.Clear();
                category_value_list.Add(new ReportOrderPlanCategoryValue());
                category_value_list[category_value_list.Count - 1].DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value_list[category_value_list.Count - 1].DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value_list[category_value_list.Count - 1].DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value_list[category_value_list.Count - 1].DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value_list[category_value_list.Count - 1].DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value_list[category_value_list.Count - 1].DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value_list[category_value_list.Count - 1].DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value_list[category_value_list.Count - 1].DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value_list[category_value_list.Count - 1].DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value_list[category_value_list.Count - 1].DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value_list[category_value_list.Count - 1].DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value_list[category_value_list.Count - 1].DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value_list[category_value_list.Count - 1].DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value_list[category_value_list.Count - 1].DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value_list[category_value_list.Count - 1].DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value_list[category_value_list.Count - 1].DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value_list[category_value_list.Count - 1].DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value_list[category_value_list.Count - 1].DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value_list.Add(null);
                foreach (var period_plan_month in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_PLAN_MONTH)) {
                    category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                    category_value_list[category_value_list.Count - 1].DimPeriod = period_plan_month;
                    category_value = Report.ReportCore.CategoryValues.Locate(category_value_list[category_value_list.Count - 1]);
                    data_point_list.Add(Report.ReportCore.DataPointGet(category_value));
                }
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point_list);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_YEAR_YEAR && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_IE_REPORT_VALUTAFINDEAL_VALUTA_COST) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPointList.Sum(y => y.ValueDecimal))));
                cell.Calc.Formula = " (x.Links[1].DataPointList.Sum(y => y.ValueDecimal))";
                
                category_value_list.Clear();
                data_point_list.Clear();
                category_value_list.Add(new ReportOrderPlanCategoryValue());
                category_value_list[category_value_list.Count - 1].DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value_list[category_value_list.Count - 1].DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value_list[category_value_list.Count - 1].DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value_list[category_value_list.Count - 1].DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value_list[category_value_list.Count - 1].DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value_list[category_value_list.Count - 1].DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value_list[category_value_list.Count - 1].DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value_list[category_value_list.Count - 1].DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value_list[category_value_list.Count - 1].DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value_list[category_value_list.Count - 1].DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value_list[category_value_list.Count - 1].DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value_list[category_value_list.Count - 1].DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value_list[category_value_list.Count - 1].DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value_list[category_value_list.Count - 1].DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value_list[category_value_list.Count - 1].DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value_list[category_value_list.Count - 1].DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value_list[category_value_list.Count - 1].DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value_list[category_value_list.Count - 1].DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value_list.Add(null);
                foreach (var period_plan_month in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_PLAN_MONTH)) {
                    category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                    category_value_list[category_value_list.Count - 1].DimPeriod = period_plan_month;
                    category_value = Report.ReportCore.CategoryValues.Locate(category_value_list[category_value_list.Count - 1]);
                    data_point_list.Add(Report.ReportCore.DataPointGet(category_value));
                }
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point_list);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_YEAR_YEAR && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_IE_REPORT_VALUTAFINDEAL_VALUTA_BALANCE) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPointList.Sum(y => y.ValueDecimal))));
                cell.Calc.Formula = " (x.Links[1].DataPointList.Sum(y => y.ValueDecimal))";
                
                category_value_list.Clear();
                data_point_list.Clear();
                category_value_list.Add(new ReportOrderPlanCategoryValue());
                category_value_list[category_value_list.Count - 1].DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value_list[category_value_list.Count - 1].DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value_list[category_value_list.Count - 1].DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value_list[category_value_list.Count - 1].DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value_list[category_value_list.Count - 1].DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value_list[category_value_list.Count - 1].DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value_list[category_value_list.Count - 1].DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value_list[category_value_list.Count - 1].DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value_list[category_value_list.Count - 1].DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value_list[category_value_list.Count - 1].DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value_list[category_value_list.Count - 1].DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value_list[category_value_list.Count - 1].DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value_list[category_value_list.Count - 1].DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value_list[category_value_list.Count - 1].DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value_list[category_value_list.Count - 1].DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value_list[category_value_list.Count - 1].DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value_list[category_value_list.Count - 1].DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value_list[category_value_list.Count - 1].DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value_list.Add(null);
                foreach (var period_plan_month in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_PLAN_MONTH)) {
                    category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                    category_value_list[category_value_list.Count - 1].DimPeriod = period_plan_month;
                    category_value = Report.ReportCore.CategoryValues.Locate(category_value_list[category_value_list.Count - 1]);
                    data_point_list.Add(Report.ReportCore.DataPointGet(category_value));
                }
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point_list);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_YEAR_YEAR && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_FINDEALVALUTA_PREPAY) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPointList.Sum(y => y.ValueDecimal))));
                cell.Calc.Formula = " (x.Links[1].DataPointList.Sum(y => y.ValueDecimal))";
                
                category_value_list.Clear();
                data_point_list.Clear();
                category_value_list.Add(new ReportOrderPlanCategoryValue());
                category_value_list[category_value_list.Count - 1].DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value_list[category_value_list.Count - 1].DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value_list[category_value_list.Count - 1].DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value_list[category_value_list.Count - 1].DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value_list[category_value_list.Count - 1].DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value_list[category_value_list.Count - 1].DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value_list[category_value_list.Count - 1].DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value_list[category_value_list.Count - 1].DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value_list[category_value_list.Count - 1].DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value_list[category_value_list.Count - 1].DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value_list[category_value_list.Count - 1].DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value_list[category_value_list.Count - 1].DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value_list[category_value_list.Count - 1].DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value_list[category_value_list.Count - 1].DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value_list[category_value_list.Count - 1].DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value_list[category_value_list.Count - 1].DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value_list[category_value_list.Count - 1].DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value_list[category_value_list.Count - 1].DimPayType = cell.DataPoint.CategoryValue.DimPayType;
                category_value_list[category_value_list.Count - 1].DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value_list.Add(null);
                foreach (var period_plan_month in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_PLAN_MONTH)) {
                    category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                    category_value_list[category_value_list.Count - 1].DimPeriod = period_plan_month;
                    category_value = Report.ReportCore.CategoryValues.Locate(category_value_list[category_value_list.Count - 1]);
                    data_point_list.Add(Report.ReportCore.DataPointGet(category_value));
                }
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point_list);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_YEAR_YEAR && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_REPORTVALUTA_PREPAY) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPointList.Sum(y => y.ValueDecimal))));
                cell.Calc.Formula = " (x.Links[1].DataPointList.Sum(y => y.ValueDecimal))";
                
                category_value_list.Clear();
                data_point_list.Clear();
                category_value_list.Add(new ReportOrderPlanCategoryValue());
                category_value_list[category_value_list.Count - 1].DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value_list[category_value_list.Count - 1].DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value_list[category_value_list.Count - 1].DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value_list[category_value_list.Count - 1].DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value_list[category_value_list.Count - 1].DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value_list[category_value_list.Count - 1].DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value_list[category_value_list.Count - 1].DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value_list[category_value_list.Count - 1].DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value_list[category_value_list.Count - 1].DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value_list[category_value_list.Count - 1].DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value_list[category_value_list.Count - 1].DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value_list[category_value_list.Count - 1].DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value_list[category_value_list.Count - 1].DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value_list[category_value_list.Count - 1].DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value_list[category_value_list.Count - 1].DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value_list[category_value_list.Count - 1].DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value_list[category_value_list.Count - 1].DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value_list[category_value_list.Count - 1].DimPayType = cell.DataPoint.CategoryValue.DimPayType;
                category_value_list[category_value_list.Count - 1].DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value_list.Add(null);
                foreach (var period_plan_month in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_PLAN_MONTH)) {
                    category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                    category_value_list[category_value_list.Count - 1].DimPeriod = period_plan_month;
                    category_value = Report.ReportCore.CategoryValues.Locate(category_value_list[category_value_list.Count - 1]);
                    data_point_list.Add(Report.ReportCore.DataPointGet(category_value));
                }
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point_list);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_YEAR_YEAR && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_REPORTVALUTA_POSTPAY) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPointList.Sum(y => y.ValueDecimal))));
                cell.Calc.Formula = " (x.Links[1].DataPointList.Sum(y => y.ValueDecimal))";
                
                category_value_list.Clear();
                data_point_list.Clear();
                category_value_list.Add(new ReportOrderPlanCategoryValue());
                category_value_list[category_value_list.Count - 1].DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value_list[category_value_list.Count - 1].DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value_list[category_value_list.Count - 1].DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value_list[category_value_list.Count - 1].DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value_list[category_value_list.Count - 1].DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value_list[category_value_list.Count - 1].DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value_list[category_value_list.Count - 1].DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value_list[category_value_list.Count - 1].DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value_list[category_value_list.Count - 1].DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value_list[category_value_list.Count - 1].DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value_list[category_value_list.Count - 1].DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value_list[category_value_list.Count - 1].DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value_list[category_value_list.Count - 1].DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value_list[category_value_list.Count - 1].DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value_list[category_value_list.Count - 1].DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value_list[category_value_list.Count - 1].DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value_list[category_value_list.Count - 1].DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value_list[category_value_list.Count - 1].DimPayType = cell.DataPoint.CategoryValue.DimPayType;
                category_value_list[category_value_list.Count - 1].DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value_list.Add(null);
                foreach (var period_plan_month in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_PLAN_MONTH)) {
                    category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                    category_value_list[category_value_list.Count - 1].DimPeriod = period_plan_month;
                    category_value = Report.ReportCore.CategoryValues.Locate(category_value_list[category_value_list.Count - 1]);
                    data_point_list.Add(Report.ReportCore.DataPointGet(category_value));
                }
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point_list);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_YEAR_YEAR && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_IE_REPORT_ALLFINDEAL_REPORTVALUTA_COST) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPointList.Sum(y => y.ValueDecimal))));
                cell.Calc.Formula = " (x.Links[1].DataPointList.Sum(y => y.ValueDecimal))";
                
                category_value_list.Clear();
                data_point_list.Clear();
                category_value_list.Add(new ReportOrderPlanCategoryValue());
                category_value_list[category_value_list.Count - 1].DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value_list[category_value_list.Count - 1].DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value_list[category_value_list.Count - 1].DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value_list[category_value_list.Count - 1].DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value_list[category_value_list.Count - 1].DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value_list[category_value_list.Count - 1].DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value_list[category_value_list.Count - 1].DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value_list[category_value_list.Count - 1].DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value_list[category_value_list.Count - 1].DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value_list[category_value_list.Count - 1].DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value_list[category_value_list.Count - 1].DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value_list[category_value_list.Count - 1].DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value_list[category_value_list.Count - 1].DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value_list[category_value_list.Count - 1].DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value_list[category_value_list.Count - 1].DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value_list[category_value_list.Count - 1].DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value_list[category_value_list.Count - 1].DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value_list[category_value_list.Count - 1].DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value_list.Add(null);
                foreach (var period_plan_month in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_PLAN_MONTH)) {
                    category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                    category_value_list[category_value_list.Count - 1].DimPeriod = period_plan_month;
                    category_value = Report.ReportCore.CategoryValues.Locate(category_value_list[category_value_list.Count - 1]);
                    data_point_list.Add(Report.ReportCore.DataPointGet(category_value));
                }
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point_list);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_YEAR_YEAR && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_REPORTVALUTA_ALLPAY) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPointList.Sum(y => y.ValueDecimal))));
                cell.Calc.Formula = " (x.Links[1].DataPointList.Sum(y => y.ValueDecimal))";
                
                category_value_list.Clear();
                data_point_list.Clear();
                category_value_list.Add(new ReportOrderPlanCategoryValue());
                category_value_list[category_value_list.Count - 1].DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value_list[category_value_list.Count - 1].DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value_list[category_value_list.Count - 1].DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value_list[category_value_list.Count - 1].DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value_list[category_value_list.Count - 1].DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value_list[category_value_list.Count - 1].DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value_list[category_value_list.Count - 1].DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value_list[category_value_list.Count - 1].DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value_list[category_value_list.Count - 1].DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value_list[category_value_list.Count - 1].DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value_list[category_value_list.Count - 1].DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value_list[category_value_list.Count - 1].DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value_list[category_value_list.Count - 1].DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value_list[category_value_list.Count - 1].DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value_list[category_value_list.Count - 1].DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value_list[category_value_list.Count - 1].DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value_list[category_value_list.Count - 1].DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value_list[category_value_list.Count - 1].DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value_list.Add(null);
                foreach (var period_plan_month in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_PLAN_MONTH)) {
                    category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                    category_value_list[category_value_list.Count - 1].DimPeriod = period_plan_month;
                    category_value = Report.ReportCore.CategoryValues.Locate(category_value_list[category_value_list.Count - 1]);
                    data_point_list.Add(Report.ReportCore.DataPointGet(category_value));
                }
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point_list);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_YEAR_YEAR && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_IE_REPORT_VALUTAFINDEAL_VALUTA_SUMMALL) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPointList.Sum(y => y.ValueDecimal))));
                cell.Calc.Formula = " (x.Links[1].DataPointList.Sum(y => y.ValueDecimal))";
                
                category_value_list.Clear();
                data_point_list.Clear();
                category_value_list.Add(new ReportOrderPlanCategoryValue());
                category_value_list[category_value_list.Count - 1].DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value_list[category_value_list.Count - 1].DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value_list[category_value_list.Count - 1].DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value_list[category_value_list.Count - 1].DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value_list[category_value_list.Count - 1].DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value_list[category_value_list.Count - 1].DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value_list[category_value_list.Count - 1].DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value_list[category_value_list.Count - 1].DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value_list[category_value_list.Count - 1].DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value_list[category_value_list.Count - 1].DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value_list[category_value_list.Count - 1].DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value_list[category_value_list.Count - 1].DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value_list[category_value_list.Count - 1].DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value_list[category_value_list.Count - 1].DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value_list[category_value_list.Count - 1].DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value_list[category_value_list.Count - 1].DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value_list[category_value_list.Count - 1].DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value_list[category_value_list.Count - 1].DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value_list.Add(null);
                foreach (var period_plan_month in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_PLAN_MONTH)) {
                    category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                    category_value_list[category_value_list.Count - 1].DimPeriod = period_plan_month;
                    category_value = Report.ReportCore.CategoryValues.Locate(category_value_list[category_value_list.Count - 1]);
                    data_point_list.Add(Report.ReportCore.DataPointGet(category_value));
                }
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point_list);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_YEAR_YEAR && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_FINDEALVALUTA_POSTPAY) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPointList.Sum(y => y.ValueDecimal))));
                cell.Calc.Formula = " (x.Links[1].DataPointList.Sum(y => y.ValueDecimal))";
                
                category_value_list.Clear();
                data_point_list.Clear();
                category_value_list.Add(new ReportOrderPlanCategoryValue());
                category_value_list[category_value_list.Count - 1].DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value_list[category_value_list.Count - 1].DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value_list[category_value_list.Count - 1].DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value_list[category_value_list.Count - 1].DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value_list[category_value_list.Count - 1].DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value_list[category_value_list.Count - 1].DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value_list[category_value_list.Count - 1].DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value_list[category_value_list.Count - 1].DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value_list[category_value_list.Count - 1].DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value_list[category_value_list.Count - 1].DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value_list[category_value_list.Count - 1].DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value_list[category_value_list.Count - 1].DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value_list[category_value_list.Count - 1].DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value_list[category_value_list.Count - 1].DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value_list[category_value_list.Count - 1].DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value_list[category_value_list.Count - 1].DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value_list[category_value_list.Count - 1].DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value_list[category_value_list.Count - 1].DimPayType = cell.DataPoint.CategoryValue.DimPayType;
                category_value_list[category_value_list.Count - 1].DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value_list.Add(null);
                foreach (var period_plan_month in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_PLAN_MONTH)) {
                    category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                    category_value_list[category_value_list.Count - 1].DimPeriod = period_plan_month;
                    category_value = Report.ReportCore.CategoryValues.Locate(category_value_list[category_value_list.Count - 1]);
                    data_point_list.Add(Report.ReportCore.DataPointGet(category_value));
                }
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point_list);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_MONTH && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDPARTY_VALFIN_BALANCE) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPoint.ValueDecimal)));
                cell.Calc.Formula = " (x.Links[1].DataPoint.ValueDecimal)";
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value.DimValueType = Report.ReportCore.ConstValueType[ReportOrderPlanValueTypeType.COST];
                category_value.DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value.DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value.DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value.DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value.DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value.DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value.DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value.DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value.DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value.DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_MONTH && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDOTHER_VALFIN_COST) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPoint.ValueDecimal) / ( 1 + (x.Links[2].DataPoint.ValueDecimal))));
                cell.Calc.Formula = " (x.Links[1].DataPoint.ValueDecimal) / ( 1 + (x.Links[2].DataPoint.ValueDecimal))";
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value.DimValueType = Report.ReportCore.ConstValueType[ReportOrderPlanValueTypeType.BALANCE];
                category_value.DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value.DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value.DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value.DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value.DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value.DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value.DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value.DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value.DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value.DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimValueType = Report.ReportCore.ConstValueType[ReportOrderPlanValueTypeType.STANDART];
                category_value.DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value.DimStandart = Report.ReportCore.ConstStandart[ReportOrderPlanStandartType.STD_TAX_VAT];
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[2] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_MONTH && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDALL_VALFIN_VAT) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPoint.ValueDecimal) - (x.Links[2].DataPoint.ValueDecimal)));
                cell.Calc.Formula = " (x.Links[1].DataPoint.ValueDecimal) - (x.Links[2].DataPoint.ValueDecimal)";
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value.DimValueType = Report.ReportCore.ConstValueType[ReportOrderPlanValueTypeType.BALANCE];
                category_value.DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value.DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value.DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value.DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value.DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value.DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value.DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value.DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value.DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value.DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                
                category_value = new ReportOrderPlanCategoryValue();
                category_value.DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value.DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value.DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value.DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value.DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value.DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value.DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value.DimValueType = Report.ReportCore.ConstValueType[ReportOrderPlanValueTypeType.COST];
                category_value.DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value.DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value.DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value.DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value.DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value.DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value.DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value.DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value.DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value.DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value = Report.ReportCore.CategoryValues.Locate(category_value);
                data_point = Report.ReportCore.DataPointGet(category_value);
                cell.Calc.Links[2] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_YEAR_YEAR && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_FINDEALVALUTA_ALLPAY) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPointList.Sum(y => y.ValueDecimal))));
                cell.Calc.Formula = " (x.Links[1].DataPointList.Sum(y => y.ValueDecimal))";
                
                category_value_list.Clear();
                data_point_list.Clear();
                category_value_list.Add(new ReportOrderPlanCategoryValue());
                category_value_list[category_value_list.Count - 1].DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value_list[category_value_list.Count - 1].DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value_list[category_value_list.Count - 1].DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value_list[category_value_list.Count - 1].DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value_list[category_value_list.Count - 1].DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value_list[category_value_list.Count - 1].DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value_list[category_value_list.Count - 1].DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value_list[category_value_list.Count - 1].DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value_list[category_value_list.Count - 1].DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value_list[category_value_list.Count - 1].DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value_list[category_value_list.Count - 1].DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value_list[category_value_list.Count - 1].DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value_list[category_value_list.Count - 1].DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value_list[category_value_list.Count - 1].DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value_list[category_value_list.Count - 1].DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value_list[category_value_list.Count - 1].DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value_list[category_value_list.Count - 1].DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value_list[category_value_list.Count - 1].DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value_list.Add(null);
                foreach (var period_plan_month in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_PLAN_MONTH)) {
                    category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                    category_value_list[category_value_list.Count - 1].DimPeriod = period_plan_month;
                    category_value = Report.ReportCore.CategoryValues.Locate(category_value_list[category_value_list.Count - 1]);
                    data_point_list.Add(Report.ReportCore.DataPointGet(category_value));
                }
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point_list);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_YEAR_END && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_IE_REPORT_ALLFINDEAL_REPORTVALUTA_BALANCE) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPointList.Sum(y => y.ValueDecimal)) + (x.Links[2].DataPointList.Sum(y => y.ValueDecimal))));
                cell.Calc.Formula = " (x.Links[1].DataPointList.Sum(y => y.ValueDecimal)) + (x.Links[2].DataPointList.Sum(y => y.ValueDecimal))";
                
                category_value_list.Clear();
                data_point_list.Clear();
                category_value_list.Add(new ReportOrderPlanCategoryValue());
                category_value_list[category_value_list.Count - 1].DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value_list[category_value_list.Count - 1].DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value_list[category_value_list.Count - 1].DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value_list[category_value_list.Count - 1].DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value_list[category_value_list.Count - 1].DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value_list[category_value_list.Count - 1].DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value_list[category_value_list.Count - 1].DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value_list[category_value_list.Count - 1].DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value_list[category_value_list.Count - 1].DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value_list[category_value_list.Count - 1].DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value_list[category_value_list.Count - 1].DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value_list[category_value_list.Count - 1].DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value_list[category_value_list.Count - 1].DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value_list[category_value_list.Count - 1].DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value_list[category_value_list.Count - 1].DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value_list[category_value_list.Count - 1].DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value_list[category_value_list.Count - 1].DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value_list[category_value_list.Count - 1].DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value_list.Add(null);
                foreach (var period_plan_year_toend in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_PLAN_YEAR_TOEND)) {
                    category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                    category_value_list[category_value_list.Count - 1].DimPeriod = period_plan_year_toend;
                    category_value = Report.ReportCore.CategoryValues.Locate(category_value_list[category_value_list.Count - 1]);
                    data_point_list.Add(Report.ReportCore.DataPointGet(category_value));
                }
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point_list);
                
                category_value_list.Clear();
                data_point_list.Clear();
                category_value_list.Add(new ReportOrderPlanCategoryValue());
                category_value_list[category_value_list.Count - 1].DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value_list[category_value_list.Count - 1].DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value_list[category_value_list.Count - 1].DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value_list[category_value_list.Count - 1].DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value_list[category_value_list.Count - 1].DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value_list[category_value_list.Count - 1].DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value_list[category_value_list.Count - 1].DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value_list[category_value_list.Count - 1].DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value_list[category_value_list.Count - 1].DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value_list[category_value_list.Count - 1].DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value_list[category_value_list.Count - 1].DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value_list[category_value_list.Count - 1].DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value_list[category_value_list.Count - 1].DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value_list[category_value_list.Count - 1].DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value_list[category_value_list.Count - 1].DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value_list[category_value_list.Count - 1].DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value_list[category_value_list.Count - 1].DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value_list[category_value_list.Count - 1].DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value_list.Add(null);
                foreach (var period_plan_year_toend in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_PLAN_YEAR_TOEND)) {
                    category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                    category_value_list[category_value_list.Count - 1].DimPeriod = period_plan_year_toend;
                    category_value_list.Add(null);
                    foreach (var period_begin in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_BEGIN)) {
                        category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                        category_value_list[category_value_list.Count - 1].DimPeriod = period_begin;
                        category_value = Report.ReportCore.CategoryValues.Locate(category_value_list[category_value_list.Count - 1]);
                        data_point_list.Add(Report.ReportCore.DataPointGet(category_value));
                    }
                }
                cell.Calc.Links[2] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point_list);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_YEAR_END && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_IE_REPORT_ALLFINDEAL_REPORTVALUTA_SUMMALL) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPointList.Sum(y => y.ValueDecimal)) + (x.Links[2].DataPointList.Sum(y => y.ValueDecimal))));
                cell.Calc.Formula = " (x.Links[1].DataPointList.Sum(y => y.ValueDecimal)) + (x.Links[2].DataPointList.Sum(y => y.ValueDecimal))";
                
                category_value_list.Clear();
                data_point_list.Clear();
                category_value_list.Add(new ReportOrderPlanCategoryValue());
                category_value_list[category_value_list.Count - 1].DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value_list[category_value_list.Count - 1].DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value_list[category_value_list.Count - 1].DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value_list[category_value_list.Count - 1].DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value_list[category_value_list.Count - 1].DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value_list[category_value_list.Count - 1].DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value_list[category_value_list.Count - 1].DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value_list[category_value_list.Count - 1].DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value_list[category_value_list.Count - 1].DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value_list[category_value_list.Count - 1].DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value_list[category_value_list.Count - 1].DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value_list[category_value_list.Count - 1].DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value_list[category_value_list.Count - 1].DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value_list[category_value_list.Count - 1].DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value_list[category_value_list.Count - 1].DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value_list[category_value_list.Count - 1].DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value_list[category_value_list.Count - 1].DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value_list[category_value_list.Count - 1].DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value_list.Add(null);
                foreach (var period_plan_year_toend in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_PLAN_YEAR_TOEND)) {
                    category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                    category_value_list[category_value_list.Count - 1].DimPeriod = period_plan_year_toend;
                    category_value = Report.ReportCore.CategoryValues.Locate(category_value_list[category_value_list.Count - 1]);
                    data_point_list.Add(Report.ReportCore.DataPointGet(category_value));
                }
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point_list);
                
                category_value_list.Clear();
                data_point_list.Clear();
                category_value_list.Add(new ReportOrderPlanCategoryValue());
                category_value_list[category_value_list.Count - 1].DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value_list[category_value_list.Count - 1].DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value_list[category_value_list.Count - 1].DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value_list[category_value_list.Count - 1].DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value_list[category_value_list.Count - 1].DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value_list[category_value_list.Count - 1].DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value_list[category_value_list.Count - 1].DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value_list[category_value_list.Count - 1].DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value_list[category_value_list.Count - 1].DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value_list[category_value_list.Count - 1].DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value_list[category_value_list.Count - 1].DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value_list[category_value_list.Count - 1].DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value_list[category_value_list.Count - 1].DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value_list[category_value_list.Count - 1].DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value_list[category_value_list.Count - 1].DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value_list[category_value_list.Count - 1].DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value_list[category_value_list.Count - 1].DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value_list[category_value_list.Count - 1].DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value_list.Add(null);
                foreach (var period_plan_year_toend in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_PLAN_YEAR_TOEND)) {
                    category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                    category_value_list[category_value_list.Count - 1].DimPeriod = period_plan_year_toend;
                    category_value_list.Add(null);
                    foreach (var period_begin in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_BEGIN)) {
                        category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                        category_value_list[category_value_list.Count - 1].DimPeriod = period_begin;
                        category_value = Report.ReportCore.CategoryValues.Locate(category_value_list[category_value_list.Count - 1]);
                        data_point_list.Add(Report.ReportCore.DataPointGet(category_value));
                    }
                }
                cell.Calc.Links[2] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point_list);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_YEAR_END && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_IE_REPORT_VALUTAFINDEAL_VALUTA_COST) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPointList.Sum(y => y.ValueDecimal)) + (x.Links[2].DataPointList.Sum(y => y.ValueDecimal))));
                cell.Calc.Formula = " (x.Links[1].DataPointList.Sum(y => y.ValueDecimal)) + (x.Links[2].DataPointList.Sum(y => y.ValueDecimal))";
                
                category_value_list.Clear();
                data_point_list.Clear();
                category_value_list.Add(new ReportOrderPlanCategoryValue());
                category_value_list[category_value_list.Count - 1].DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value_list[category_value_list.Count - 1].DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value_list[category_value_list.Count - 1].DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value_list[category_value_list.Count - 1].DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value_list[category_value_list.Count - 1].DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value_list[category_value_list.Count - 1].DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value_list[category_value_list.Count - 1].DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value_list[category_value_list.Count - 1].DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value_list[category_value_list.Count - 1].DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value_list[category_value_list.Count - 1].DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value_list[category_value_list.Count - 1].DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value_list[category_value_list.Count - 1].DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value_list[category_value_list.Count - 1].DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value_list[category_value_list.Count - 1].DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value_list[category_value_list.Count - 1].DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value_list[category_value_list.Count - 1].DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value_list[category_value_list.Count - 1].DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value_list[category_value_list.Count - 1].DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value_list.Add(null);
                foreach (var period_plan_year_toend in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_PLAN_YEAR_TOEND)) {
                    category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                    category_value_list[category_value_list.Count - 1].DimPeriod = period_plan_year_toend;
                    category_value = Report.ReportCore.CategoryValues.Locate(category_value_list[category_value_list.Count - 1]);
                    data_point_list.Add(Report.ReportCore.DataPointGet(category_value));
                }
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point_list);
                
                category_value_list.Clear();
                data_point_list.Clear();
                category_value_list.Add(new ReportOrderPlanCategoryValue());
                category_value_list[category_value_list.Count - 1].DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value_list[category_value_list.Count - 1].DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value_list[category_value_list.Count - 1].DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value_list[category_value_list.Count - 1].DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value_list[category_value_list.Count - 1].DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value_list[category_value_list.Count - 1].DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value_list[category_value_list.Count - 1].DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value_list[category_value_list.Count - 1].DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value_list[category_value_list.Count - 1].DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value_list[category_value_list.Count - 1].DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value_list[category_value_list.Count - 1].DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value_list[category_value_list.Count - 1].DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value_list[category_value_list.Count - 1].DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value_list[category_value_list.Count - 1].DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value_list[category_value_list.Count - 1].DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value_list[category_value_list.Count - 1].DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value_list[category_value_list.Count - 1].DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value_list[category_value_list.Count - 1].DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value_list.Add(null);
                foreach (var period_plan_year_toend in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_PLAN_YEAR_TOEND)) {
                    category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                    category_value_list[category_value_list.Count - 1].DimPeriod = period_plan_year_toend;
                    category_value_list.Add(null);
                    foreach (var period_begin in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_BEGIN)) {
                        category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                        category_value_list[category_value_list.Count - 1].DimPeriod = period_begin;
                        category_value = Report.ReportCore.CategoryValues.Locate(category_value_list[category_value_list.Count - 1]);
                        data_point_list.Add(Report.ReportCore.DataPointGet(category_value));
                    }
                }
                cell.Calc.Links[2] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point_list);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_YEAR_END && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_IE_REPORT_VALUTAFINDEAL_VALUTA_BALANCE) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPointList.Sum(y => y.ValueDecimal)) + (x.Links[2].DataPointList.Sum(y => y.ValueDecimal))));
                cell.Calc.Formula = " (x.Links[1].DataPointList.Sum(y => y.ValueDecimal)) + (x.Links[2].DataPointList.Sum(y => y.ValueDecimal))";
                
                category_value_list.Clear();
                data_point_list.Clear();
                category_value_list.Add(new ReportOrderPlanCategoryValue());
                category_value_list[category_value_list.Count - 1].DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value_list[category_value_list.Count - 1].DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value_list[category_value_list.Count - 1].DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value_list[category_value_list.Count - 1].DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value_list[category_value_list.Count - 1].DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value_list[category_value_list.Count - 1].DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value_list[category_value_list.Count - 1].DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value_list[category_value_list.Count - 1].DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value_list[category_value_list.Count - 1].DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value_list[category_value_list.Count - 1].DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value_list[category_value_list.Count - 1].DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value_list[category_value_list.Count - 1].DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value_list[category_value_list.Count - 1].DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value_list[category_value_list.Count - 1].DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value_list[category_value_list.Count - 1].DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value_list[category_value_list.Count - 1].DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value_list[category_value_list.Count - 1].DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value_list[category_value_list.Count - 1].DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value_list.Add(null);
                foreach (var period_plan_year_toend in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_PLAN_YEAR_TOEND)) {
                    category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                    category_value_list[category_value_list.Count - 1].DimPeriod = period_plan_year_toend;
                    category_value = Report.ReportCore.CategoryValues.Locate(category_value_list[category_value_list.Count - 1]);
                    data_point_list.Add(Report.ReportCore.DataPointGet(category_value));
                }
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point_list);
                
                category_value_list.Clear();
                data_point_list.Clear();
                category_value_list.Add(new ReportOrderPlanCategoryValue());
                category_value_list[category_value_list.Count - 1].DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value_list[category_value_list.Count - 1].DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value_list[category_value_list.Count - 1].DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value_list[category_value_list.Count - 1].DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value_list[category_value_list.Count - 1].DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value_list[category_value_list.Count - 1].DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value_list[category_value_list.Count - 1].DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value_list[category_value_list.Count - 1].DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value_list[category_value_list.Count - 1].DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value_list[category_value_list.Count - 1].DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value_list[category_value_list.Count - 1].DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value_list[category_value_list.Count - 1].DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value_list[category_value_list.Count - 1].DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value_list[category_value_list.Count - 1].DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value_list[category_value_list.Count - 1].DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value_list[category_value_list.Count - 1].DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value_list[category_value_list.Count - 1].DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value_list[category_value_list.Count - 1].DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value_list.Add(null);
                foreach (var period_plan_year_toend in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_PLAN_YEAR_TOEND)) {
                    category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                    category_value_list[category_value_list.Count - 1].DimPeriod = period_plan_year_toend;
                    category_value_list.Add(null);
                    foreach (var period_begin in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_BEGIN)) {
                        category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                        category_value_list[category_value_list.Count - 1].DimPeriod = period_begin;
                        category_value = Report.ReportCore.CategoryValues.Locate(category_value_list[category_value_list.Count - 1]);
                        data_point_list.Add(Report.ReportCore.DataPointGet(category_value));
                    }
                }
                cell.Calc.Links[2] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point_list);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_YEAR_END && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_IE_REPORT_VALUTAFINDEAL_VALUTA_SUMMALL) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPointList.Sum(y => y.ValueDecimal)) + (x.Links[2].DataPointList.Sum(y => y.ValueDecimal))));
                cell.Calc.Formula = " (x.Links[1].DataPointList.Sum(y => y.ValueDecimal)) + (x.Links[2].DataPointList.Sum(y => y.ValueDecimal))";
                
                category_value_list.Clear();
                data_point_list.Clear();
                category_value_list.Add(new ReportOrderPlanCategoryValue());
                category_value_list[category_value_list.Count - 1].DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value_list[category_value_list.Count - 1].DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value_list[category_value_list.Count - 1].DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value_list[category_value_list.Count - 1].DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value_list[category_value_list.Count - 1].DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value_list[category_value_list.Count - 1].DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value_list[category_value_list.Count - 1].DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value_list[category_value_list.Count - 1].DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value_list[category_value_list.Count - 1].DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value_list[category_value_list.Count - 1].DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value_list[category_value_list.Count - 1].DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value_list[category_value_list.Count - 1].DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value_list[category_value_list.Count - 1].DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value_list[category_value_list.Count - 1].DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value_list[category_value_list.Count - 1].DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value_list[category_value_list.Count - 1].DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value_list[category_value_list.Count - 1].DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value_list[category_value_list.Count - 1].DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value_list.Add(null);
                foreach (var period_plan_year_toend in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_PLAN_YEAR_TOEND)) {
                    category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                    category_value_list[category_value_list.Count - 1].DimPeriod = period_plan_year_toend;
                    category_value = Report.ReportCore.CategoryValues.Locate(category_value_list[category_value_list.Count - 1]);
                    data_point_list.Add(Report.ReportCore.DataPointGet(category_value));
                }
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point_list);
                
                category_value_list.Clear();
                data_point_list.Clear();
                category_value_list.Add(new ReportOrderPlanCategoryValue());
                category_value_list[category_value_list.Count - 1].DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value_list[category_value_list.Count - 1].DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value_list[category_value_list.Count - 1].DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value_list[category_value_list.Count - 1].DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value_list[category_value_list.Count - 1].DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value_list[category_value_list.Count - 1].DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value_list[category_value_list.Count - 1].DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value_list[category_value_list.Count - 1].DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value_list[category_value_list.Count - 1].DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value_list[category_value_list.Count - 1].DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value_list[category_value_list.Count - 1].DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value_list[category_value_list.Count - 1].DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value_list[category_value_list.Count - 1].DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value_list[category_value_list.Count - 1].DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value_list[category_value_list.Count - 1].DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value_list[category_value_list.Count - 1].DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value_list[category_value_list.Count - 1].DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value_list[category_value_list.Count - 1].DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value_list.Add(null);
                foreach (var period_plan_year_toend in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_PLAN_YEAR_TOEND)) {
                    category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                    category_value_list[category_value_list.Count - 1].DimPeriod = period_plan_year_toend;
                    category_value_list.Add(null);
                    foreach (var period_begin in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_BEGIN)) {
                        category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                        category_value_list[category_value_list.Count - 1].DimPeriod = period_begin;
                        category_value = Report.ReportCore.CategoryValues.Locate(category_value_list[category_value_list.Count - 1]);
                        data_point_list.Add(Report.ReportCore.DataPointGet(category_value));
                    }
                }
                cell.Calc.Links[2] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point_list);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_YEAR_END && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_FINDEALVALUTA_PREPAY) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPointList.Sum(y => y.ValueDecimal)) + (x.Links[2].DataPointList.Sum(y => y.ValueDecimal))));
                cell.Calc.Formula = " (x.Links[1].DataPointList.Sum(y => y.ValueDecimal)) + (x.Links[2].DataPointList.Sum(y => y.ValueDecimal))";
                
                category_value_list.Clear();
                data_point_list.Clear();
                category_value_list.Add(new ReportOrderPlanCategoryValue());
                category_value_list[category_value_list.Count - 1].DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value_list[category_value_list.Count - 1].DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value_list[category_value_list.Count - 1].DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value_list[category_value_list.Count - 1].DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value_list[category_value_list.Count - 1].DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value_list[category_value_list.Count - 1].DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value_list[category_value_list.Count - 1].DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value_list[category_value_list.Count - 1].DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value_list[category_value_list.Count - 1].DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value_list[category_value_list.Count - 1].DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value_list[category_value_list.Count - 1].DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value_list[category_value_list.Count - 1].DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value_list[category_value_list.Count - 1].DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value_list[category_value_list.Count - 1].DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value_list[category_value_list.Count - 1].DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value_list[category_value_list.Count - 1].DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value_list[category_value_list.Count - 1].DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value_list[category_value_list.Count - 1].DimPayType = cell.DataPoint.CategoryValue.DimPayType;
                category_value_list[category_value_list.Count - 1].DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value_list.Add(null);
                foreach (var period_plan_year_toend in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_PLAN_YEAR_TOEND)) {
                    category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                    category_value_list[category_value_list.Count - 1].DimPeriod = period_plan_year_toend;
                    category_value = Report.ReportCore.CategoryValues.Locate(category_value_list[category_value_list.Count - 1]);
                    data_point_list.Add(Report.ReportCore.DataPointGet(category_value));
                }
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point_list);
                
                category_value_list.Clear();
                data_point_list.Clear();
                category_value_list.Add(new ReportOrderPlanCategoryValue());
                category_value_list[category_value_list.Count - 1].DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value_list[category_value_list.Count - 1].DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value_list[category_value_list.Count - 1].DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value_list[category_value_list.Count - 1].DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value_list[category_value_list.Count - 1].DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value_list[category_value_list.Count - 1].DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value_list[category_value_list.Count - 1].DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value_list[category_value_list.Count - 1].DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value_list[category_value_list.Count - 1].DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value_list[category_value_list.Count - 1].DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value_list[category_value_list.Count - 1].DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value_list[category_value_list.Count - 1].DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value_list[category_value_list.Count - 1].DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value_list[category_value_list.Count - 1].DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value_list[category_value_list.Count - 1].DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value_list[category_value_list.Count - 1].DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value_list[category_value_list.Count - 1].DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value_list[category_value_list.Count - 1].DimPayType = cell.DataPoint.CategoryValue.DimPayType;
                category_value_list[category_value_list.Count - 1].DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value_list.Add(null);
                foreach (var period_plan_year_toend in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_PLAN_YEAR_TOEND)) {
                    category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                    category_value_list[category_value_list.Count - 1].DimPeriod = period_plan_year_toend;
                    category_value_list.Add(null);
                    foreach (var period_begin in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_BEGIN)) {
                        category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                        category_value_list[category_value_list.Count - 1].DimPeriod = period_begin;
                        category_value = Report.ReportCore.CategoryValues.Locate(category_value_list[category_value_list.Count - 1]);
                        data_point_list.Add(Report.ReportCore.DataPointGet(category_value));
                    }
                }
                cell.Calc.Links[2] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point_list);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_YEAR_END && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_FINDEALVALUTA_POSTPAY) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPointList.Sum(y => y.ValueDecimal)) + (x.Links[2].DataPointList.Sum(y => y.ValueDecimal))));
                cell.Calc.Formula = " (x.Links[1].DataPointList.Sum(y => y.ValueDecimal)) + (x.Links[2].DataPointList.Sum(y => y.ValueDecimal))";
                
                category_value_list.Clear();
                data_point_list.Clear();
                category_value_list.Add(new ReportOrderPlanCategoryValue());
                category_value_list[category_value_list.Count - 1].DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value_list[category_value_list.Count - 1].DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value_list[category_value_list.Count - 1].DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value_list[category_value_list.Count - 1].DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value_list[category_value_list.Count - 1].DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value_list[category_value_list.Count - 1].DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value_list[category_value_list.Count - 1].DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value_list[category_value_list.Count - 1].DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value_list[category_value_list.Count - 1].DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value_list[category_value_list.Count - 1].DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value_list[category_value_list.Count - 1].DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value_list[category_value_list.Count - 1].DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value_list[category_value_list.Count - 1].DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value_list[category_value_list.Count - 1].DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value_list[category_value_list.Count - 1].DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value_list[category_value_list.Count - 1].DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value_list[category_value_list.Count - 1].DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value_list[category_value_list.Count - 1].DimPayType = cell.DataPoint.CategoryValue.DimPayType;
                category_value_list[category_value_list.Count - 1].DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value_list.Add(null);
                foreach (var period_plan_year_toend in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_PLAN_YEAR_TOEND)) {
                    category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                    category_value_list[category_value_list.Count - 1].DimPeriod = period_plan_year_toend;
                    category_value = Report.ReportCore.CategoryValues.Locate(category_value_list[category_value_list.Count - 1]);
                    data_point_list.Add(Report.ReportCore.DataPointGet(category_value));
                }
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point_list);
                
                category_value_list.Clear();
                data_point_list.Clear();
                category_value_list.Add(new ReportOrderPlanCategoryValue());
                category_value_list[category_value_list.Count - 1].DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value_list[category_value_list.Count - 1].DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value_list[category_value_list.Count - 1].DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value_list[category_value_list.Count - 1].DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value_list[category_value_list.Count - 1].DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value_list[category_value_list.Count - 1].DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value_list[category_value_list.Count - 1].DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value_list[category_value_list.Count - 1].DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value_list[category_value_list.Count - 1].DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value_list[category_value_list.Count - 1].DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value_list[category_value_list.Count - 1].DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value_list[category_value_list.Count - 1].DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value_list[category_value_list.Count - 1].DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value_list[category_value_list.Count - 1].DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value_list[category_value_list.Count - 1].DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value_list[category_value_list.Count - 1].DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value_list[category_value_list.Count - 1].DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value_list[category_value_list.Count - 1].DimPayType = cell.DataPoint.CategoryValue.DimPayType;
                category_value_list[category_value_list.Count - 1].DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value_list.Add(null);
                foreach (var period_plan_year_toend in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_PLAN_YEAR_TOEND)) {
                    category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                    category_value_list[category_value_list.Count - 1].DimPeriod = period_plan_year_toend;
                    category_value_list.Add(null);
                    foreach (var period_begin in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_BEGIN)) {
                        category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                        category_value_list[category_value_list.Count - 1].DimPeriod = period_begin;
                        category_value = Report.ReportCore.CategoryValues.Locate(category_value_list[category_value_list.Count - 1]);
                        data_point_list.Add(Report.ReportCore.DataPointGet(category_value));
                    }
                }
                cell.Calc.Links[2] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point_list);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_YEAR_END && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_IE_REPORT_ALLFINDEAL_REPORTVALUTA_COST) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPointList.Sum(y => y.ValueDecimal)) + (x.Links[2].DataPointList.Sum(y => y.ValueDecimal))));
                cell.Calc.Formula = " (x.Links[1].DataPointList.Sum(y => y.ValueDecimal)) + (x.Links[2].DataPointList.Sum(y => y.ValueDecimal))";
                
                category_value_list.Clear();
                data_point_list.Clear();
                category_value_list.Add(new ReportOrderPlanCategoryValue());
                category_value_list[category_value_list.Count - 1].DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value_list[category_value_list.Count - 1].DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value_list[category_value_list.Count - 1].DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value_list[category_value_list.Count - 1].DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value_list[category_value_list.Count - 1].DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value_list[category_value_list.Count - 1].DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value_list[category_value_list.Count - 1].DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value_list[category_value_list.Count - 1].DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value_list[category_value_list.Count - 1].DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value_list[category_value_list.Count - 1].DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value_list[category_value_list.Count - 1].DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value_list[category_value_list.Count - 1].DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value_list[category_value_list.Count - 1].DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value_list[category_value_list.Count - 1].DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value_list[category_value_list.Count - 1].DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value_list[category_value_list.Count - 1].DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value_list[category_value_list.Count - 1].DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value_list[category_value_list.Count - 1].DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value_list.Add(null);
                foreach (var period_plan_year_toend in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_PLAN_YEAR_TOEND)) {
                    category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                    category_value_list[category_value_list.Count - 1].DimPeriod = period_plan_year_toend;
                    category_value = Report.ReportCore.CategoryValues.Locate(category_value_list[category_value_list.Count - 1]);
                    data_point_list.Add(Report.ReportCore.DataPointGet(category_value));
                }
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point_list);
                
                category_value_list.Clear();
                data_point_list.Clear();
                category_value_list.Add(new ReportOrderPlanCategoryValue());
                category_value_list[category_value_list.Count - 1].DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value_list[category_value_list.Count - 1].DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value_list[category_value_list.Count - 1].DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value_list[category_value_list.Count - 1].DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value_list[category_value_list.Count - 1].DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value_list[category_value_list.Count - 1].DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value_list[category_value_list.Count - 1].DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value_list[category_value_list.Count - 1].DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value_list[category_value_list.Count - 1].DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value_list[category_value_list.Count - 1].DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value_list[category_value_list.Count - 1].DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value_list[category_value_list.Count - 1].DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value_list[category_value_list.Count - 1].DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value_list[category_value_list.Count - 1].DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value_list[category_value_list.Count - 1].DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value_list[category_value_list.Count - 1].DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value_list[category_value_list.Count - 1].DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value_list[category_value_list.Count - 1].DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value_list.Add(null);
                foreach (var period_plan_year_toend in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_PLAN_YEAR_TOEND)) {
                    category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                    category_value_list[category_value_list.Count - 1].DimPeriod = period_plan_year_toend;
                    category_value_list.Add(null);
                    foreach (var period_begin in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_BEGIN)) {
                        category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                        category_value_list[category_value_list.Count - 1].DimPeriod = period_begin;
                        category_value = Report.ReportCore.CategoryValues.Locate(category_value_list[category_value_list.Count - 1]);
                        data_point_list.Add(Report.ReportCore.DataPointGet(category_value));
                    }
                }
                cell.Calc.Links[2] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point_list);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_YEAR_END && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_REPORTVALUTA_POSTPAY) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPointList.Sum(y => y.ValueDecimal)) + (x.Links[2].DataPointList.Sum(y => y.ValueDecimal))));
                cell.Calc.Formula = " (x.Links[1].DataPointList.Sum(y => y.ValueDecimal)) + (x.Links[2].DataPointList.Sum(y => y.ValueDecimal))";
                
                category_value_list.Clear();
                data_point_list.Clear();
                category_value_list.Add(new ReportOrderPlanCategoryValue());
                category_value_list[category_value_list.Count - 1].DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value_list[category_value_list.Count - 1].DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value_list[category_value_list.Count - 1].DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value_list[category_value_list.Count - 1].DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value_list[category_value_list.Count - 1].DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value_list[category_value_list.Count - 1].DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value_list[category_value_list.Count - 1].DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value_list[category_value_list.Count - 1].DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value_list[category_value_list.Count - 1].DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value_list[category_value_list.Count - 1].DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value_list[category_value_list.Count - 1].DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value_list[category_value_list.Count - 1].DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value_list[category_value_list.Count - 1].DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value_list[category_value_list.Count - 1].DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value_list[category_value_list.Count - 1].DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value_list[category_value_list.Count - 1].DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value_list[category_value_list.Count - 1].DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value_list[category_value_list.Count - 1].DimPayType = cell.DataPoint.CategoryValue.DimPayType;
                category_value_list[category_value_list.Count - 1].DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value_list.Add(null);
                foreach (var period_plan_year_toend in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_PLAN_YEAR_TOEND)) {
                    category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                    category_value_list[category_value_list.Count - 1].DimPeriod = period_plan_year_toend;
                    category_value = Report.ReportCore.CategoryValues.Locate(category_value_list[category_value_list.Count - 1]);
                    data_point_list.Add(Report.ReportCore.DataPointGet(category_value));
                }
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point_list);
                
                category_value_list.Clear();
                data_point_list.Clear();
                category_value_list.Add(new ReportOrderPlanCategoryValue());
                category_value_list[category_value_list.Count - 1].DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value_list[category_value_list.Count - 1].DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value_list[category_value_list.Count - 1].DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value_list[category_value_list.Count - 1].DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value_list[category_value_list.Count - 1].DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value_list[category_value_list.Count - 1].DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value_list[category_value_list.Count - 1].DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value_list[category_value_list.Count - 1].DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value_list[category_value_list.Count - 1].DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value_list[category_value_list.Count - 1].DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value_list[category_value_list.Count - 1].DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value_list[category_value_list.Count - 1].DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value_list[category_value_list.Count - 1].DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value_list[category_value_list.Count - 1].DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value_list[category_value_list.Count - 1].DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value_list[category_value_list.Count - 1].DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value_list[category_value_list.Count - 1].DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value_list[category_value_list.Count - 1].DimPayType = cell.DataPoint.CategoryValue.DimPayType;
                category_value_list[category_value_list.Count - 1].DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value_list.Add(null);
                foreach (var period_plan_year_toend in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_PLAN_YEAR_TOEND)) {
                    category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                    category_value_list[category_value_list.Count - 1].DimPeriod = period_plan_year_toend;
                    category_value_list.Add(null);
                    foreach (var period_begin in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_BEGIN)) {
                        category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                        category_value_list[category_value_list.Count - 1].DimPeriod = period_begin;
                        category_value = Report.ReportCore.CategoryValues.Locate(category_value_list[category_value_list.Count - 1]);
                        data_point_list.Add(Report.ReportCore.DataPointGet(category_value));
                    }
                }
                cell.Calc.Links[2] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point_list);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_YEAR_END && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_FINDEALVALUTA_ALLPAY) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPointList.Sum(y => y.ValueDecimal)) + (x.Links[2].DataPointList.Sum(y => y.ValueDecimal))));
                cell.Calc.Formula = " (x.Links[1].DataPointList.Sum(y => y.ValueDecimal)) + (x.Links[2].DataPointList.Sum(y => y.ValueDecimal))";
                
                category_value_list.Clear();
                data_point_list.Clear();
                category_value_list.Add(new ReportOrderPlanCategoryValue());
                category_value_list[category_value_list.Count - 1].DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value_list[category_value_list.Count - 1].DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value_list[category_value_list.Count - 1].DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value_list[category_value_list.Count - 1].DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value_list[category_value_list.Count - 1].DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value_list[category_value_list.Count - 1].DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value_list[category_value_list.Count - 1].DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value_list[category_value_list.Count - 1].DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value_list[category_value_list.Count - 1].DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value_list[category_value_list.Count - 1].DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value_list[category_value_list.Count - 1].DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value_list[category_value_list.Count - 1].DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value_list[category_value_list.Count - 1].DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value_list[category_value_list.Count - 1].DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value_list[category_value_list.Count - 1].DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value_list[category_value_list.Count - 1].DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value_list[category_value_list.Count - 1].DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value_list[category_value_list.Count - 1].DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value_list.Add(null);
                foreach (var period_plan_year_toend in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_PLAN_YEAR_TOEND)) {
                    category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                    category_value_list[category_value_list.Count - 1].DimPeriod = period_plan_year_toend;
                    category_value = Report.ReportCore.CategoryValues.Locate(category_value_list[category_value_list.Count - 1]);
                    data_point_list.Add(Report.ReportCore.DataPointGet(category_value));
                }
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point_list);
                
                category_value_list.Clear();
                data_point_list.Clear();
                category_value_list.Add(new ReportOrderPlanCategoryValue());
                category_value_list[category_value_list.Count - 1].DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value_list[category_value_list.Count - 1].DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value_list[category_value_list.Count - 1].DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value_list[category_value_list.Count - 1].DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value_list[category_value_list.Count - 1].DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value_list[category_value_list.Count - 1].DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value_list[category_value_list.Count - 1].DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value_list[category_value_list.Count - 1].DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value_list[category_value_list.Count - 1].DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value_list[category_value_list.Count - 1].DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value_list[category_value_list.Count - 1].DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value_list[category_value_list.Count - 1].DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value_list[category_value_list.Count - 1].DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value_list[category_value_list.Count - 1].DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value_list[category_value_list.Count - 1].DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value_list[category_value_list.Count - 1].DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value_list[category_value_list.Count - 1].DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value_list[category_value_list.Count - 1].DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value_list.Add(null);
                foreach (var period_plan_year_toend in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_PLAN_YEAR_TOEND)) {
                    category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                    category_value_list[category_value_list.Count - 1].DimPeriod = period_plan_year_toend;
                    category_value_list.Add(null);
                    foreach (var period_begin in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_BEGIN)) {
                        category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                        category_value_list[category_value_list.Count - 1].DimPeriod = period_begin;
                        category_value = Report.ReportCore.CategoryValues.Locate(category_value_list[category_value_list.Count - 1]);
                        data_point_list.Add(Report.ReportCore.DataPointGet(category_value));
                    }
                }
                cell.Calc.Links[2] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point_list);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_YEAR_END && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_REPORTVALUTA_ALLPAY) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPointList.Sum(y => y.ValueDecimal)) + (x.Links[2].DataPointList.Sum(y => y.ValueDecimal))));
                cell.Calc.Formula = " (x.Links[1].DataPointList.Sum(y => y.ValueDecimal)) + (x.Links[2].DataPointList.Sum(y => y.ValueDecimal))";
                
                category_value_list.Clear();
                data_point_list.Clear();
                category_value_list.Add(new ReportOrderPlanCategoryValue());
                category_value_list[category_value_list.Count - 1].DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value_list[category_value_list.Count - 1].DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value_list[category_value_list.Count - 1].DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value_list[category_value_list.Count - 1].DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value_list[category_value_list.Count - 1].DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value_list[category_value_list.Count - 1].DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value_list[category_value_list.Count - 1].DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value_list[category_value_list.Count - 1].DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value_list[category_value_list.Count - 1].DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value_list[category_value_list.Count - 1].DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value_list[category_value_list.Count - 1].DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value_list[category_value_list.Count - 1].DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value_list[category_value_list.Count - 1].DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value_list[category_value_list.Count - 1].DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value_list[category_value_list.Count - 1].DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value_list[category_value_list.Count - 1].DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value_list[category_value_list.Count - 1].DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value_list[category_value_list.Count - 1].DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value_list.Add(null);
                foreach (var period_plan_year_toend in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_PLAN_YEAR_TOEND)) {
                    category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                    category_value_list[category_value_list.Count - 1].DimPeriod = period_plan_year_toend;
                    category_value = Report.ReportCore.CategoryValues.Locate(category_value_list[category_value_list.Count - 1]);
                    data_point_list.Add(Report.ReportCore.DataPointGet(category_value));
                }
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point_list);
                
                category_value_list.Clear();
                data_point_list.Clear();
                category_value_list.Add(new ReportOrderPlanCategoryValue());
                category_value_list[category_value_list.Count - 1].DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value_list[category_value_list.Count - 1].DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value_list[category_value_list.Count - 1].DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value_list[category_value_list.Count - 1].DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value_list[category_value_list.Count - 1].DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value_list[category_value_list.Count - 1].DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value_list[category_value_list.Count - 1].DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value_list[category_value_list.Count - 1].DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value_list[category_value_list.Count - 1].DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value_list[category_value_list.Count - 1].DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value_list[category_value_list.Count - 1].DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value_list[category_value_list.Count - 1].DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value_list[category_value_list.Count - 1].DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value_list[category_value_list.Count - 1].DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value_list[category_value_list.Count - 1].DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value_list[category_value_list.Count - 1].DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value_list[category_value_list.Count - 1].DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value_list[category_value_list.Count - 1].DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value_list.Add(null);
                foreach (var period_plan_year_toend in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_PLAN_YEAR_TOEND)) {
                    category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                    category_value_list[category_value_list.Count - 1].DimPeriod = period_plan_year_toend;
                    category_value_list.Add(null);
                    foreach (var period_begin in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_BEGIN)) {
                        category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                        category_value_list[category_value_list.Count - 1].DimPeriod = period_begin;
                        category_value = Report.ReportCore.CategoryValues.Locate(category_value_list[category_value_list.Count - 1]);
                        data_point_list.Add(Report.ReportCore.DataPointGet(category_value));
                    }
                }
                cell.Calc.Links[2] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point_list);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
            if ( variant == ReportOrderPlanCalcVariant.IMPORT 
             && ord0 == ReportOrderPlanAxisCalcImportCol.OrdinateType.CCIC_PERIOD_YEAR_END && ord1 == ReportOrderPlanAxisCalcImportRow.OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_REPORTVALUTA_PREPAY) {
                cell.Calc = new MdfReportDataPointCalc<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.DataPoint,
                    x => ( (x.Links[1].DataPointList.Sum(y => y.ValueDecimal)) + (x.Links[2].DataPointList.Sum(y => y.ValueDecimal))));
                cell.Calc.Formula = " (x.Links[1].DataPointList.Sum(y => y.ValueDecimal)) + (x.Links[2].DataPointList.Sum(y => y.ValueDecimal))";
                
                category_value_list.Clear();
                data_point_list.Clear();
                category_value_list.Add(new ReportOrderPlanCategoryValue());
                category_value_list[category_value_list.Count - 1].DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value_list[category_value_list.Count - 1].DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value_list[category_value_list.Count - 1].DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value_list[category_value_list.Count - 1].DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value_list[category_value_list.Count - 1].DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value_list[category_value_list.Count - 1].DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value_list[category_value_list.Count - 1].DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value_list[category_value_list.Count - 1].DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value_list[category_value_list.Count - 1].DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value_list[category_value_list.Count - 1].DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value_list[category_value_list.Count - 1].DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value_list[category_value_list.Count - 1].DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value_list[category_value_list.Count - 1].DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value_list[category_value_list.Count - 1].DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value_list[category_value_list.Count - 1].DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value_list[category_value_list.Count - 1].DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value_list[category_value_list.Count - 1].DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value_list[category_value_list.Count - 1].DimPayType = cell.DataPoint.CategoryValue.DimPayType;
                category_value_list[category_value_list.Count - 1].DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value_list.Add(null);
                foreach (var period_plan_year_toend in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_PLAN_YEAR_TOEND)) {
                    category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                    category_value_list[category_value_list.Count - 1].DimPeriod = period_plan_year_toend;
                    category_value = Report.ReportCore.CategoryValues.Locate(category_value_list[category_value_list.Count - 1]);
                    data_point_list.Add(Report.ReportCore.DataPointGet(category_value));
                }
                cell.Calc.Links[1] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point_list);
                
                category_value_list.Clear();
                data_point_list.Clear();
                category_value_list.Add(new ReportOrderPlanCategoryValue());
                category_value_list[category_value_list.Count - 1].DimPeriod = cell.DataPoint.CategoryValue.DimPeriod;
                category_value_list[category_value_list.Count - 1].DimScenario = cell.DataPoint.CategoryValue.DimScenario;
                category_value_list[category_value_list.Count - 1].DimReport = cell.DataPoint.CategoryValue.DimReport;
                category_value_list[category_value_list.Count - 1].DimOrder = cell.DataPoint.CategoryValue.DimOrder;
                category_value_list[category_value_list.Count - 1].DimVatMode = cell.DataPoint.CategoryValue.DimVatMode;
                category_value_list[category_value_list.Count - 1].DimEntity = cell.DataPoint.CategoryValue.DimEntity;
                category_value_list[category_value_list.Count - 1].DimValuta = cell.DataPoint.CategoryValue.DimValuta;
                category_value_list[category_value_list.Count - 1].DimFinrep = cell.DataPoint.CategoryValue.DimFinrep;
                category_value_list[category_value_list.Count - 1].DimDealKind = cell.DataPoint.CategoryValue.DimDealKind;
                category_value_list[category_value_list.Count - 1].DimArticle = cell.DataPoint.CategoryValue.DimArticle;
                category_value_list[category_value_list.Count - 1].DimFindeal = cell.DataPoint.CategoryValue.DimFindeal;
                category_value_list[category_value_list.Count - 1].DimDeal = cell.DataPoint.CategoryValue.DimDeal;
                category_value_list[category_value_list.Count - 1].DimPartyKind = cell.DataPoint.CategoryValue.DimPartyKind;
                category_value_list[category_value_list.Count - 1].DimValutaObligation = cell.DataPoint.CategoryValue.DimValutaObligation;
                category_value_list[category_value_list.Count - 1].DimVatModeObligation = cell.DataPoint.CategoryValue.DimVatModeObligation;
                category_value_list[category_value_list.Count - 1].DimParty = cell.DataPoint.CategoryValue.DimParty;
                category_value_list[category_value_list.Count - 1].DimFindealKind = cell.DataPoint.CategoryValue.DimFindealKind;
                category_value_list[category_value_list.Count - 1].DimPayType = cell.DataPoint.CategoryValue.DimPayType;
                category_value_list[category_value_list.Count - 1].DimValueType = cell.DataPoint.CategoryValue.DimValueType;
                category_value_list.Add(null);
                foreach (var period_plan_year_toend in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_PLAN_YEAR_TOEND)) {
                    category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                    category_value_list[category_value_list.Count - 1].DimPeriod = period_plan_year_toend;
                    category_value_list.Add(null);
                    foreach (var period_begin in Report.ReportCore.QueryPeriod(category_value_list[category_value_list.Count - 2], ReportOrderPlanPeriodType.PERIOD_BEGIN)) {
                        category_value_list[category_value_list.Count - 1] = new ReportOrderPlanCategoryValue(category_value_list[category_value_list.Count - 2]);
                        category_value_list[category_value_list.Count - 1].DimPeriod = period_begin;
                        category_value = Report.ReportCore.CategoryValues.Locate(category_value_list[category_value_list.Count - 1]);
                        data_point_list.Add(Report.ReportCore.DataPointGet(category_value));
                    }
                }
                cell.Calc.Links[2] = new MdfReportDataPointCalcLink<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>(cell.Calc, data_point_list);
                if (cell.Calc.CheckNotIsCycle())
                    cell.Calc.Link();
            }
        }
        
    }
    
    public partial class ReportOrderPlanTableTableCalcImportCell: ReportOrderPlanTableCell {
        
        public ReportOrderPlanTableTableCalcImportCell(ReportOrderPlanTableTableCalcImport table) : base(table) { }
        
    }
    
    public partial class ReportOrderPlanTablePersCfBalance: ReportOrderPlanTable {
        
        public  ReportOrderPlanTablePersCfBalance(ReportOrderPlanReport report) : base(report) { }
        
        protected override ReportOrderPlanTableCell CellCreate() {
            return new  ReportOrderPlanTablePersCfBalanceCell(this);
        }
        
        void TestCalcExpression() {
        }
        
        protected override void CellCustom(ReportOrderPlanTableCell cell, ReportOrderPlanCalcVariant variant) {
            var ord0 = ((ReportOrderPlanAxisPersFindealCfCols.Ordinate)cell.Ordinates[0]).OrdinateType;
            var ord1 = ((ReportOrderPlanAxisPersFindealCfRows.Ordinate)cell.Ordinates[1]).OrdinateType;
            ReportOrderPlanCategoryValue category_value;
            ReportOrderPlanDataPoint data_point;
            IList<ReportOrderPlanCategoryValue> category_value_list = new List<ReportOrderPlanCategoryValue>(32);
            IList<ReportOrderPlanDataPoint> data_point_list = new List<ReportOrderPlanDataPoint>(32);
        }
        
    }
    
    public partial class ReportOrderPlanTablePersCfBalanceCell: ReportOrderPlanTableCell {
        
        public void CellDataPointStore(ReportOrderPlanDataPersCfBalance row) {
            ReportOrderPlanAxisPersFindealCfCols.OrdinateType ord_type = ((ReportOrderPlanAxisPersFindealCfCols.Ordinate)Ordinates[0]).OrdinateType;
            switch (ord_type) {
                case ReportOrderPlanAxisPersFindealCfCols.OrdinateType.CF_FORECAST_PAYMENT:
                    row.CfForecastPayment = DataPoint.ValueDecimal;
                    break;
                case ReportOrderPlanAxisPersFindealCfCols.OrdinateType.CF_FORECAST_PREPAYMENT:
                    row.CfForecastPrepayment = DataPoint.ValueDecimal;
                    break;
                case ReportOrderPlanAxisPersFindealCfCols.OrdinateType.CF_FORECAST_POSTPAYMENT:
                    row.CfForecastPostpayment = DataPoint.ValueDecimal;
                    break;
            }
        }
        
        public void CellDataPointRestore(ReportOrderPlanDataPersCfBalance row) {
            ReportOrderPlanAxisPersFindealCfCols.OrdinateType ord_type = ((ReportOrderPlanAxisPersFindealCfCols.Ordinate)Ordinates[0]).OrdinateType;
            switch (ord_type) {
                case ReportOrderPlanAxisPersFindealCfCols.OrdinateType.CF_FORECAST_PAYMENT:
                    DataPoint.Value = row.CfForecastPayment;
                    break;
                case ReportOrderPlanAxisPersFindealCfCols.OrdinateType.CF_FORECAST_PREPAYMENT:
                    DataPoint.Value = row.CfForecastPrepayment;
                    break;
                case ReportOrderPlanAxisPersFindealCfCols.OrdinateType.CF_FORECAST_POSTPAYMENT:
                    DataPoint.Value = row.CfForecastPostpayment;
                    break;
            }
        }
        
        public override void Store() {
            base.Store();
            var row = Table.Report.DataPersCfBalances.FirstOrDefault(
                x =>
                    x.DimReport == Ordinates[1].CategoryValue.DimReport &&
                    x.DimPeriod == Ordinates[1].CategoryValue.DimPeriod &&
                    x.DimFindeal == Ordinates[1].CategoryValue.DimFindeal &&
                    x.DimValuta == Ordinates[1].CategoryValue.DimValuta &&
                    true
                );
            if (row == null) {
                if ((DataPoint.DataType == MdfDataType.DT_DECIMAL ||
                    DataPoint.DataType == MdfDataType.DT_MONETARY) && 
                    DataPoint.ValueDecimal == 0m )
                        return;
                row = new ReportOrderPlanDataPersCfBalance(Table.Report.Session);
                Table.Report.DataPersCfBalances.Add(row);
                row.DimReport = Ordinates[1].CategoryValue.DimReport;
                row.DimPeriod = Ordinates[1].CategoryValue.DimPeriod;
                row.DimFindeal = Ordinates[1].CategoryValue.DimFindeal;
                row.DimValuta = Ordinates[1].CategoryValue.DimValuta;
            }
            CellDataPointStore(row);
        }
        
        public override void Restore() {
            base.Restore();
            var row = Table.Report.DataPersCfBalances.FirstOrDefault(
                x =>
                    x.DimReport == Ordinates[1].CategoryValue.DimReport &&
                    x.DimPeriod == Ordinates[1].CategoryValue.DimPeriod &&
                    x.DimFindeal == Ordinates[1].CategoryValue.DimFindeal &&
                    x.DimValuta == Ordinates[1].CategoryValue.DimValuta &&
                    true
                );
            if (row == null) {
                if (DataPoint.DataType == MdfDataType.DT_DECIMAL ||
                    DataPoint.DataType == MdfDataType.DT_MONETARY)
                        DataPoint.Value = 0m;
                return;
            }
            CellDataPointRestore(row);
        }
        
        public ReportOrderPlanTablePersCfBalanceCell(ReportOrderPlanTablePersCfBalance table) : base(table) { }
        
    }
    
    public partial class ReportOrderPlanTablePersCheck: ReportOrderPlanTable {
        
        public  ReportOrderPlanTablePersCheck(ReportOrderPlanReport report) : base(report) { }
        
        protected override ReportOrderPlanTableCell CellCreate() {
            return new  ReportOrderPlanTablePersCheckCell(this);
        }
        
        void TestCalcExpression() {
        }
        
        protected override void CellCustom(ReportOrderPlanTableCell cell, ReportOrderPlanCalcVariant variant) {
            var ord0 = ((ReportOrderPlanAxisPersFindealCheckCols.Ordinate)cell.Ordinates[0]).OrdinateType;
            var ord1 = ((ReportOrderPlanAxisPersFindealCheckRows.Ordinate)cell.Ordinates[1]).OrdinateType;
            ReportOrderPlanCategoryValue category_value;
            ReportOrderPlanDataPoint data_point;
            IList<ReportOrderPlanCategoryValue> category_value_list = new List<ReportOrderPlanCategoryValue>(32);
            IList<ReportOrderPlanDataPoint> data_point_list = new List<ReportOrderPlanDataPoint>(32);
        }
        
    }
    
    public partial class ReportOrderPlanTablePersCheckCell: ReportOrderPlanTableCell {
        
        public void CellDataPointStore(ReportOrderPlanDataPersCheck row) {
            ReportOrderPlanAxisPersFindealCheckCols.OrdinateType ord_type = ((ReportOrderPlanAxisPersFindealCheckCols.Ordinate)Ordinates[0]).OrdinateType;
            switch (ord_type) {
                case ReportOrderPlanAxisPersFindealCheckCols.OrdinateType.IE_FORECAST_SUMMALL:
                    row.IeForecastSummall = DataPoint.ValueDecimal;
                    break;
                case ReportOrderPlanAxisPersFindealCheckCols.OrdinateType.IE_IMPORT_SUMMALL:
                    row.IeImportSummall = DataPoint.ValueDecimal;
                    break;
                case ReportOrderPlanAxisPersFindealCheckCols.OrdinateType.CF_FORECAST_BALANCE_ALL:
                    row.CfForecastBalanceAll = DataPoint.ValueDecimal;
                    break;
                case ReportOrderPlanAxisPersFindealCheckCols.OrdinateType.IE_IMPORT_COST:
                    row.IeImportCost = DataPoint.ValueDecimal;
                    break;
                case ReportOrderPlanAxisPersFindealCheckCols.OrdinateType.CF_IMPORT_BALANCE_ALL:
                    row.CfImportBalanceAll = DataPoint.ValueDecimal;
                    break;
                case ReportOrderPlanAxisPersFindealCheckCols.OrdinateType.IE_FORECAST_BALANCE:
                    row.IeForecastBalance = DataPoint.ValueDecimal;
                    break;
                case ReportOrderPlanAxisPersFindealCheckCols.OrdinateType.IE_FORECAST_COST:
                    row.IeForecastCost = DataPoint.ValueDecimal;
                    break;
                case ReportOrderPlanAxisPersFindealCheckCols.OrdinateType.CF_FORECAST_BALANCE_PREPAY:
                    row.CfForecastBalancePrepay = DataPoint.ValueDecimal;
                    break;
                case ReportOrderPlanAxisPersFindealCheckCols.OrdinateType.CF_FORECAST_BALANCE_POSTPAY:
                    row.CfForecastBalancePostpay = DataPoint.ValueDecimal;
                    break;
                case ReportOrderPlanAxisPersFindealCheckCols.OrdinateType.IE_IMPORT_BALANCE:
                    row.IeImportBalance = DataPoint.ValueDecimal;
                    break;
                case ReportOrderPlanAxisPersFindealCheckCols.OrdinateType.CF_IMPORT_BALANCE_PREPAY:
                    row.CfImportBalancePrepay = DataPoint.ValueDecimal;
                    break;
                case ReportOrderPlanAxisPersFindealCheckCols.OrdinateType.CF_IMPORT_BALANCE_POSTPAY:
                    row.CfImportBalancePostpay = DataPoint.ValueDecimal;
                    break;
            }
        }
        
        public void CellDataPointRestore(ReportOrderPlanDataPersCheck row) {
            ReportOrderPlanAxisPersFindealCheckCols.OrdinateType ord_type = ((ReportOrderPlanAxisPersFindealCheckCols.Ordinate)Ordinates[0]).OrdinateType;
            switch (ord_type) {
                case ReportOrderPlanAxisPersFindealCheckCols.OrdinateType.IE_FORECAST_SUMMALL:
                    DataPoint.Value = row.IeForecastSummall;
                    break;
                case ReportOrderPlanAxisPersFindealCheckCols.OrdinateType.IE_IMPORT_SUMMALL:
                    DataPoint.Value = row.IeImportSummall;
                    break;
                case ReportOrderPlanAxisPersFindealCheckCols.OrdinateType.CF_FORECAST_BALANCE_ALL:
                    DataPoint.Value = row.CfForecastBalanceAll;
                    break;
                case ReportOrderPlanAxisPersFindealCheckCols.OrdinateType.IE_IMPORT_COST:
                    DataPoint.Value = row.IeImportCost;
                    break;
                case ReportOrderPlanAxisPersFindealCheckCols.OrdinateType.CF_IMPORT_BALANCE_ALL:
                    DataPoint.Value = row.CfImportBalanceAll;
                    break;
                case ReportOrderPlanAxisPersFindealCheckCols.OrdinateType.IE_FORECAST_BALANCE:
                    DataPoint.Value = row.IeForecastBalance;
                    break;
                case ReportOrderPlanAxisPersFindealCheckCols.OrdinateType.IE_FORECAST_COST:
                    DataPoint.Value = row.IeForecastCost;
                    break;
                case ReportOrderPlanAxisPersFindealCheckCols.OrdinateType.CF_FORECAST_BALANCE_PREPAY:
                    DataPoint.Value = row.CfForecastBalancePrepay;
                    break;
                case ReportOrderPlanAxisPersFindealCheckCols.OrdinateType.CF_FORECAST_BALANCE_POSTPAY:
                    DataPoint.Value = row.CfForecastBalancePostpay;
                    break;
                case ReportOrderPlanAxisPersFindealCheckCols.OrdinateType.IE_IMPORT_BALANCE:
                    DataPoint.Value = row.IeImportBalance;
                    break;
                case ReportOrderPlanAxisPersFindealCheckCols.OrdinateType.CF_IMPORT_BALANCE_PREPAY:
                    DataPoint.Value = row.CfImportBalancePrepay;
                    break;
                case ReportOrderPlanAxisPersFindealCheckCols.OrdinateType.CF_IMPORT_BALANCE_POSTPAY:
                    DataPoint.Value = row.CfImportBalancePostpay;
                    break;
            }
        }
        
        public override void Store() {
            base.Store();
            var row = Table.Report.DataPersChecks.FirstOrDefault(
                x =>
                    x.DimReport == Ordinates[1].CategoryValue.DimReport &&
                    x.DimPeriod == Ordinates[1].CategoryValue.DimPeriod &&
                    x.DimFindeal == Ordinates[1].CategoryValue.DimFindeal &&
                    x.DimValuta == Ordinates[1].CategoryValue.DimValuta &&
                    true
                );
            if (row == null) {
                if ((DataPoint.DataType == MdfDataType.DT_DECIMAL ||
                    DataPoint.DataType == MdfDataType.DT_MONETARY) && 
                    DataPoint.ValueDecimal == 0m )
                        return;
                row = new ReportOrderPlanDataPersCheck(Table.Report.Session);
                Table.Report.DataPersChecks.Add(row);
                row.DimReport = Ordinates[1].CategoryValue.DimReport;
                row.DimPeriod = Ordinates[1].CategoryValue.DimPeriod;
                row.DimFindeal = Ordinates[1].CategoryValue.DimFindeal;
                row.DimValuta = Ordinates[1].CategoryValue.DimValuta;
            }
            CellDataPointStore(row);
        }
        
        public override void Restore() {
            base.Restore();
            var row = Table.Report.DataPersChecks.FirstOrDefault(
                x =>
                    x.DimReport == Ordinates[1].CategoryValue.DimReport &&
                    x.DimPeriod == Ordinates[1].CategoryValue.DimPeriod &&
                    x.DimFindeal == Ordinates[1].CategoryValue.DimFindeal &&
                    x.DimValuta == Ordinates[1].CategoryValue.DimValuta &&
                    true
                );
            if (row == null) {
                if (DataPoint.DataType == MdfDataType.DT_DECIMAL ||
                    DataPoint.DataType == MdfDataType.DT_MONETARY)
                        DataPoint.Value = 0m;
                return;
            }
            CellDataPointRestore(row);
        }
        
        public ReportOrderPlanTablePersCheckCell(ReportOrderPlanTablePersCheck table) : base(table) { }
        
    }
    
    [DC.DomainComponent]
    public partial class ReportOrderPlanCategoryValue: MdfCategoryValue<ReportOrderPlanReport,ReportOrderPlanCategoryValue,ReportOrderPlanTable,ReportOrderPlanTableCell,ReportOrderPlanDataPoint> {
        
        public static ReportOrderPlanCategoryValue DefaultCategoryValue = new ReportOrderPlanCategoryValue();
        
        
        private ReportOrderPlanReport _DimReport;
        public ReportOrderPlanReport DimReport {
            get { return _DimReport; }
            set { _DimReport = value; }
        }
        
        private ReportOrderPlanTemplate _DimTemplate;
        public ReportOrderPlanTemplate DimTemplate {
            get { return _DimTemplate; }
            set { _DimTemplate = value; }
        }
        
        private ReportOrderPlanValueType _DimValueType;
        public ReportOrderPlanValueType DimValueType {
            get { return _DimValueType; }
            set { _DimValueType = value; }
        }
        
        private ReportOrderPlanPayType _DimPayType;
        public ReportOrderPlanPayType DimPayType {
            get { return _DimPayType; }
            set { _DimPayType = value; }
        }
        
        private ReportOrderPlanVatMode _DimVatMode;
        public ReportOrderPlanVatMode DimVatMode {
            get { return _DimVatMode; }
            set { _DimVatMode = value; }
        }
        
        private ReportOrderPlanValuta _DimValuta;
        public ReportOrderPlanValuta DimValuta {
            get { return _DimValuta; }
            set { _DimValuta = value; }
        }
        
        private ReportOrderPlanValuta _DimValutaObligation;
        public ReportOrderPlanValuta DimValutaObligation {
            get { return _DimValutaObligation; }
            set { _DimValutaObligation = value; }
        }
        
        private ReportOrderPlanEntity _DimParty;
        public ReportOrderPlanEntity DimParty {
            get { return _DimParty; }
            set { _DimParty = value; }
        }
        
        private ReportOrderPlanFindeal _DimFindeal;
        public ReportOrderPlanFindeal DimFindeal {
            get { return _DimFindeal; }
            set { _DimFindeal = value; }
        }
        
        private ReportOrderPlanPeriod _DimPeriod;
        public ReportOrderPlanPeriod DimPeriod {
            get { return _DimPeriod; }
            set { _DimPeriod = value; }
        }
        
        private ReportOrderPlanScenario _DimScenario;
        public ReportOrderPlanScenario DimScenario {
            get { return _DimScenario; }
            set { _DimScenario = value; }
        }
        
        private ReportOrderPlanArticle _DimArticle;
        public ReportOrderPlanArticle DimArticle {
            get { return _DimArticle; }
            set { _DimArticle = value; }
        }
        
        private ReportOrderPlanFinrep _DimFinrep;
        public ReportOrderPlanFinrep DimFinrep {
            get { return _DimFinrep; }
            set { _DimFinrep = value; }
        }
        
        private ReportOrderPlanOrder _DimOrder;
        public ReportOrderPlanOrder DimOrder {
            get { return _DimOrder; }
            set { _DimOrder = value; }
        }
        
        private ReportOrderPlanArticle _DimArticleObligation;
        public ReportOrderPlanArticle DimArticleObligation {
            get { return _DimArticleObligation; }
            set { _DimArticleObligation = value; }
        }
        
        private ReportOrderPlanVatMode _DimVatModeObligation;
        public ReportOrderPlanVatMode DimVatModeObligation {
            get { return _DimVatModeObligation; }
            set { _DimVatModeObligation = value; }
        }
        
        private ReportOrderPlanDeal _DimDeal;
        public ReportOrderPlanDeal DimDeal {
            get { return _DimDeal; }
            set { _DimDeal = value; }
        }
        
        private ReportOrderPlanEntity _DimEntity;
        public ReportOrderPlanEntity DimEntity {
            get { return _DimEntity; }
            set { _DimEntity = value; }
        }
        
        private ReportOrderPlanEntityKind _DimPartyKind;
        public ReportOrderPlanEntityKind DimPartyKind {
            get { return _DimPartyKind; }
            set { _DimPartyKind = value; }
        }
        
        private ReportOrderPlanDealKind _DimDealKind;
        public ReportOrderPlanDealKind DimDealKind {
            get { return _DimDealKind; }
            set { _DimDealKind = value; }
        }
        
        private ReportOrderPlanStandart _DimStandart;
        public ReportOrderPlanStandart DimStandart {
            get { return _DimStandart; }
            set { _DimStandart = value; }
        }
        
        private ReportOrderPlanPrimaryValue _DimPrimaryValue;
        public ReportOrderPlanPrimaryValue DimPrimaryValue {
            get { return _DimPrimaryValue; }
            set { _DimPrimaryValue = value; }
        }
        
        private ReportOrderPlanAccKind _DimAccTurnKind;
        public ReportOrderPlanAccKind DimAccTurnKind {
            get { return _DimAccTurnKind; }
            set { _DimAccTurnKind = value; }
        }
        
        private ReportOrderPlanFindealKind _DimFindealKind;
        public ReportOrderPlanFindealKind DimFindealKind {
            get { return _DimFindealKind; }
            set { _DimFindealKind = value; }
        }
        
        private ReportOrderPlanComponent _DimComponent;
        public ReportOrderPlanComponent DimComponent {
            get { return _DimComponent; }
            set { _DimComponent = value; }
        }
        public ReportOrderPlanCategoryValue() { }
        
        public ReportOrderPlanCategoryValue(ReportOrderPlanCategoryValue category_value) {
            
            DimReport = category_value.DimReport;
            DimTemplate = category_value.DimTemplate;
            DimValueType = category_value.DimValueType;
            DimPayType = category_value.DimPayType;
            DimVatMode = category_value.DimVatMode;
            DimValuta = category_value.DimValuta;
            DimValutaObligation = category_value.DimValutaObligation;
            DimParty = category_value.DimParty;
            DimFindeal = category_value.DimFindeal;
            DimPeriod = category_value.DimPeriod;
            DimScenario = category_value.DimScenario;
            DimArticle = category_value.DimArticle;
            DimFinrep = category_value.DimFinrep;
            DimOrder = category_value.DimOrder;
            DimArticleObligation = category_value.DimArticleObligation;
            DimVatModeObligation = category_value.DimVatModeObligation;
            DimDeal = category_value.DimDeal;
            DimEntity = category_value.DimEntity;
            DimPartyKind = category_value.DimPartyKind;
            DimDealKind = category_value.DimDealKind;
            DimStandart = category_value.DimStandart;
            DimPrimaryValue = category_value.DimPrimaryValue;
            DimAccTurnKind = category_value.DimAccTurnKind;
            DimFindealKind = category_value.DimFindealKind;
            DimComponent = category_value.DimComponent;
            
        }
        
        public override String ToString() {
            return $"DimAccTurnKind={DimAccTurnKind}\n" +
            $"DimArticle={DimArticle}\n" +
            $"DimArticleObligation={DimArticleObligation}\n" +
            $"DimComponent={DimComponent}\n" +
            $"DimDeal={DimDeal}\n" +
            $"DimDealKind={DimDealKind}\n" +
            $"DimEntity={DimEntity}\n" +
            $"DimFindeal={DimFindeal}\n" +
            $"DimFindealKind={DimFindealKind}\n" +
            $"DimFinrep={DimFinrep}\n" +
            $"DimOrder={DimOrder}\n" +
            $"DimParty={DimParty}\n" +
            $"DimPartyKind={DimPartyKind}\n" +
            $"DimPayType={DimPayType}\n" +
            $"DimPeriod={DimPeriod}\n" +
            $"DimPrimaryValue={DimPrimaryValue}\n" +
            $"DimReport={DimReport}\n" +
            $"DimScenario={DimScenario}\n" +
            $"DimStandart={DimStandart}\n" +
            $"DimTemplate={DimTemplate}\n" +
            $"DimValueType={DimValueType}\n" +
            $"DimValuta={DimValuta}\n" +
            $"DimValutaObligation={DimValutaObligation}\n" +
            $"DimVatMode={DimVatMode}\n" +
            $"DimVatModeObligation={DimVatModeObligation}\n";
        }
        
        public override Boolean Equals(ReportOrderPlanCategoryValue value) {
            return ReferenceEquals(DimReport, value.DimReport) &&
            ReferenceEquals(DimTemplate, value.DimTemplate) &&
            ReferenceEquals(DimValueType, value.DimValueType) &&
            ReferenceEquals(DimPayType, value.DimPayType) &&
            ReferenceEquals(DimVatMode, value.DimVatMode) &&
            ReferenceEquals(DimValuta, value.DimValuta) &&
            ReferenceEquals(DimValutaObligation, value.DimValutaObligation) &&
            ReferenceEquals(DimParty, value.DimParty) &&
            ReferenceEquals(DimFindeal, value.DimFindeal) &&
            ReferenceEquals(DimPeriod, value.DimPeriod) &&
            ReferenceEquals(DimScenario, value.DimScenario) &&
            ReferenceEquals(DimArticle, value.DimArticle) &&
            ReferenceEquals(DimFinrep, value.DimFinrep) &&
            ReferenceEquals(DimOrder, value.DimOrder) &&
            ReferenceEquals(DimArticleObligation, value.DimArticleObligation) &&
            ReferenceEquals(DimVatModeObligation, value.DimVatModeObligation) &&
            ReferenceEquals(DimDeal, value.DimDeal) &&
            ReferenceEquals(DimEntity, value.DimEntity) &&
            ReferenceEquals(DimPartyKind, value.DimPartyKind) &&
            ReferenceEquals(DimDealKind, value.DimDealKind) &&
            ReferenceEquals(DimStandart, value.DimStandart) &&
            ReferenceEquals(DimPrimaryValue, value.DimPrimaryValue) &&
            ReferenceEquals(DimAccTurnKind, value.DimAccTurnKind) &&
            ReferenceEquals(DimFindealKind, value.DimFindealKind) &&
            ReferenceEquals(DimComponent, value.DimComponent);
        }
        
        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                hash = hash * 23 + (DimReport?.GetHashCode() ?? 0);hash = hash * 23 + (DimTemplate?.GetHashCode() ?? 0);hash = hash * 23 + (DimValueType?.GetHashCode() ?? 0);hash = hash * 23 + (DimPayType?.GetHashCode() ?? 0);hash = hash * 23 + (DimVatMode?.GetHashCode() ?? 0);hash = hash * 23 + (DimValuta?.GetHashCode() ?? 0);hash = hash * 23 + (DimValutaObligation?.GetHashCode() ?? 0);hash = hash * 23 + (DimParty?.GetHashCode() ?? 0);hash = hash * 23 + (DimFindeal?.GetHashCode() ?? 0);hash = hash * 23 + (DimPeriod?.GetHashCode() ?? 0);hash = hash * 23 + (DimScenario?.GetHashCode() ?? 0);hash = hash * 23 + (DimArticle?.GetHashCode() ?? 0);hash = hash * 23 + (DimFinrep?.GetHashCode() ?? 0);hash = hash * 23 + (DimOrder?.GetHashCode() ?? 0);hash = hash * 23 + (DimArticleObligation?.GetHashCode() ?? 0);hash = hash * 23 + (DimVatModeObligation?.GetHashCode() ?? 0);hash = hash * 23 + (DimDeal?.GetHashCode() ?? 0);hash = hash * 23 + (DimEntity?.GetHashCode() ?? 0);hash = hash * 23 + (DimPartyKind?.GetHashCode() ?? 0);hash = hash * 23 + (DimDealKind?.GetHashCode() ?? 0);hash = hash * 23 + (DimStandart?.GetHashCode() ?? 0);hash = hash * 23 + (DimPrimaryValue?.GetHashCode() ?? 0);hash = hash * 23 + (DimAccTurnKind?.GetHashCode() ?? 0);hash = hash * 23 + (DimFindealKind?.GetHashCode() ?? 0);hash = hash * 23 + (DimComponent?.GetHashCode() ?? 0);
                return hash;
            }
        }
        
    }
    
    public class ReportOrderPlanCategoryValues: MdfCategoryValues<ReportOrderPlanReport,ReportOrderPlanCategoryValue,ReportOrderPlanTable,ReportOrderPlanTableCell,ReportOrderPlanDataPoint> {
        
        public override ReportOrderPlanCategoryValue Union(IEnumerable<ReportOrderPlanCategoryValue> values) {
            
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue();
            foreach (var union_value in values) {
                value.DimReport = union_value.DimReport ?? value.DimReport;
                value.DimTemplate = union_value.DimTemplate ?? value.DimTemplate;
                value.DimValueType = union_value.DimValueType ?? value.DimValueType;
                value.DimPayType = union_value.DimPayType ?? value.DimPayType;
                value.DimVatMode = union_value.DimVatMode ?? value.DimVatMode;
                value.DimValuta = union_value.DimValuta ?? value.DimValuta;
                value.DimValutaObligation = union_value.DimValutaObligation ?? value.DimValutaObligation;
                value.DimParty = union_value.DimParty ?? value.DimParty;
                value.DimFindeal = union_value.DimFindeal ?? value.DimFindeal;
                value.DimPeriod = union_value.DimPeriod ?? value.DimPeriod;
                value.DimScenario = union_value.DimScenario ?? value.DimScenario;
                value.DimArticle = union_value.DimArticle ?? value.DimArticle;
                value.DimFinrep = union_value.DimFinrep ?? value.DimFinrep;
                value.DimOrder = union_value.DimOrder ?? value.DimOrder;
                value.DimArticleObligation = union_value.DimArticleObligation ?? value.DimArticleObligation;
                value.DimVatModeObligation = union_value.DimVatModeObligation ?? value.DimVatModeObligation;
                value.DimDeal = union_value.DimDeal ?? value.DimDeal;
                value.DimEntity = union_value.DimEntity ?? value.DimEntity;
                value.DimPartyKind = union_value.DimPartyKind ?? value.DimPartyKind;
                value.DimDealKind = union_value.DimDealKind ?? value.DimDealKind;
                value.DimStandart = union_value.DimStandart ?? value.DimStandart;
                value.DimPrimaryValue = union_value.DimPrimaryValue ?? value.DimPrimaryValue;
                value.DimAccTurnKind = union_value.DimAccTurnKind ?? value.DimAccTurnKind;
                value.DimFindealKind = union_value.DimFindealKind ?? value.DimFindealKind;
                value.DimComponent = union_value.DimComponent ?? value.DimComponent;
            }
            return Locate(value);
            
        }
        
        public ReportOrderPlanCategoryValues() {
            
        }
    }
    
    [DC.DomainComponent]
    public class ReportOrderPlanDataPoint: MdfReportDataPoint<ReportOrderPlanReport,ReportOrderPlanCategoryValue,ReportOrderPlanTable,ReportOrderPlanTableCell,ReportOrderPlanDataPoint>  {
        
        public ReportOrderPlanDataPoint(ReportOrderPlanReportCore report_core, ReportOrderPlanCategoryValue value): base(report_core, value) { }
        
        public MdfDataType DCDataType {
            get { return DataType; }
        }
        
        public Object DCValue {
            get { return Value; }
        }
        
        public String Formula {
            get { return Calc?.Formula; }
        }
        
        [ExpandObjectMembers(ExpandObjectMembers.Always)]
        public ReportOrderPlanCategoryValue DCCategoryValue {
            get { return CategoryValue; }
        }
        
        public IReadOnlyList<ReportOrderPlanDataPoint> CalcData {
            get {
                var result = new List<ReportOrderPlanDataPoint>(32);
                if (Calc?.Links != null) {
                    foreach (var calc_link in Calc?.Links.Values) {
                        foreach (var data_point in calc_link.DataPointList) {
                            result.Add(data_point);
                        }
                    }
                }
                return result;
            }
        }
    
    }
    
    [DC.DomainComponent]
    public class ReportOrderPlanDataPointCalc: MdfReportDataPointCalc<ReportOrderPlanReport,ReportOrderPlanCategoryValue,ReportOrderPlanTable,ReportOrderPlanTableCell,ReportOrderPlanDataPoint>  {
        
        public ReportOrderPlanDataPointCalc(ReportOrderPlanDataPoint data_point, CalcExpression exp ): base(data_point, exp) { }
        
    }
    
    public partial class ReportOrderPlanAxisReport: MdfAxis<ReportOrderPlanReport,ReportOrderPlanCategoryValue,ReportOrderPlanTable,ReportOrderPlanTableCell,ReportOrderPlanDataPoint> {
        
        public enum OrdinateType {
            AXIS_REPORT_ROOT =  1,
            REPORT_ORDER =  346,
        }
        
        public class Ordinate : MdfAxisOrdinate {
            private OrdinateType _OrdinateType;
            public OrdinateType OrdinateType{
                get { return _OrdinateType; }
            }
            
            public Ordinate(ReportOrderPlanAxisReport axis, MdfAxisOrdinateValueType value_type, OrdinateType ord_type): base(axis, value_type)  {
                _OrdinateType = ord_type;
            }
        }
        
        public ReportOrderPlanAxisReport(ReportOrderPlanReport report): base(report) { }
        
        public override void OrdinatesFill() {
            Root = OrdinateCreate(null, OrdinateType.AXIS_REPORT_ROOT);
        }
        
        protected Ordinate OrdinateCreate(Ordinate ord_up, OrdinateType ord_type) {
            Ordinate ord;
            Ordinate sub_ord;
            Int32 sort_order = 0;
            ReportOrderPlanCategoryValue ord_up_category_value = ord_up?.CategoryValue ?? ReportOrderPlanCategoryValue.DefaultCategoryValue;
            switch (ord_type) {
                case OrdinateType.AXIS_REPORT_ROOT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.AXIS_REPORT_ROOT);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanReport> axis_report_root_objs = DimReportQueryValueGet(ord.CategoryValue, ReportOrderPlanReportType.REPORT, OrdinateType.AXIS_REPORT_ROOT);
                    sort_order = 0;
                    foreach (var axis_report_root_obj in axis_report_root_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.AXIS_REPORT_ROOT);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimReportCategoryValueLocate(ord.CategoryValue, axis_report_root_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.REPORT_ORDER);
                    }
                    return ord;
                case OrdinateType.REPORT_ORDER:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.REPORT_ORDER);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimOrderCategoryValueLocate(ord_up_category_value, DimOrderSingleValueGet(ord_up_category_value, ReportOrderPlanOrderType.DIM_REPORT_ORDER, OrdinateType.REPORT_ORDER));
                    return ord;
                default:
                    return null;
            }
        }
        
        protected ReportOrderPlanCategoryValue DimReportCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanReport obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimReport = obj;
            value.DimEntity = value.DimReport?.Entity;
            value.DimOrder = value.DimReport?.Order;
            value.DimVatMode = value.DimOrder?.VatMode;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimOrderCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanOrder obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimOrder = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanOrder DimOrderSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanOrderType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.REPORT_ORDER:
                    return context.DimReport?.Order;
                default:
                    return null;
            }
        }
        protected IList<ReportOrderPlanReport> DimReportQueryValueGet(ReportOrderPlanCategoryValue context, ReportOrderPlanReportType model, OrdinateType ord_type) {
            return Report.ReportCore.QueryReport(context, model);
        }
        
    }
    
    public partial class ReportOrderPlanAxisPeriodImport: MdfAxis<ReportOrderPlanReport,ReportOrderPlanCategoryValue,ReportOrderPlanTable,ReportOrderPlanTableCell,ReportOrderPlanDataPoint> {
        
        public enum OrdinateType {
            AXIS_PERIOD_ROOT =  2,
            SCENARIO_FORECAST =  3,
            SCENARIO_FORECAST_BALANCE_BEGIN =  4,
            SCENARIO_FORECAST_PERIOD =  5,
            SCENARIO_IMPORT_BALANCE_END =  6,
            SCENARIO_FORECAST_PERIOD_FIRST_YEAR =  7,
            SCENARIO_FORECAST_PERIOD_SECOND_YEAR =  8,
            SCENARIO_FORECAST_PERIOD_FIRST_YEAR_MONTH =  9,
            SCENARIO_FORECAST_PERIOD_FIRST_YEAR_PERIOD =  10,
            SCENARIO_FORECAST_PERIOD_SECOND_YEAR_QUARTER =  11,
            SCENARIO_FORECAST_PERIOD_SECOND_YEAR_PERIOD =  12,
            SCENARIO_IMPORT =  784,
        }
        
        public class Ordinate : MdfAxisOrdinate {
            private OrdinateType _OrdinateType;
            public OrdinateType OrdinateType{
                get { return _OrdinateType; }
            }
            
            public Ordinate(ReportOrderPlanAxisPeriodImport axis, MdfAxisOrdinateValueType value_type, OrdinateType ord_type): base(axis, value_type)  {
                _OrdinateType = ord_type;
            }
        }
        
        public ReportOrderPlanAxisPeriodImport(ReportOrderPlanReport report): base(report) { }
        
        public override void OrdinatesFill() {
            Root = OrdinateCreate(null, OrdinateType.AXIS_PERIOD_ROOT);
        }
        
        protected Ordinate OrdinateCreate(Ordinate ord_up, OrdinateType ord_type) {
            Ordinate ord;
            Ordinate sub_ord;
            Int32 sort_order = 0;
            ReportOrderPlanCategoryValue ord_up_category_value = ord_up?.CategoryValue ?? ReportOrderPlanCategoryValue.DefaultCategoryValue;
            switch (ord_type) {
                case OrdinateType.AXIS_PERIOD_ROOT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.AXIS_PERIOD_ROOT);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    OrdinateCreate(ord, OrdinateType.SCENARIO_FORECAST);
                    OrdinateCreate(ord, OrdinateType.SCENARIO_IMPORT);
                    return ord;
                case OrdinateType.SCENARIO_FORECAST:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.SCENARIO_FORECAST);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimScenarioCategoryValueLocate(ord_up_category_value, DimScenarioSingleValueGet(ord_up_category_value, ReportOrderPlanScenarioType.FORECAST, OrdinateType.SCENARIO_FORECAST));
                    OrdinateCreate(ord, OrdinateType.SCENARIO_FORECAST_BALANCE_BEGIN);
                    OrdinateCreate(ord, OrdinateType.SCENARIO_FORECAST_PERIOD);
                    return ord;
                case OrdinateType.SCENARIO_FORECAST_BALANCE_BEGIN:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.SCENARIO_FORECAST_BALANCE_BEGIN);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanPeriod> scenario_forecast_balance_begin_objs = DimPeriodQueryValueGet(ord.CategoryValue, ReportOrderPlanPeriodType.PERIOD_PLAN_BALANCE_BEGIN, OrdinateType.SCENARIO_FORECAST_BALANCE_BEGIN);
                    sort_order = 0;
                    foreach (var scenario_forecast_balance_begin_obj in scenario_forecast_balance_begin_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.SCENARIO_FORECAST_BALANCE_BEGIN);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimPeriodCategoryValueLocate(ord.CategoryValue, scenario_forecast_balance_begin_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                    }
                    return ord;
                case OrdinateType.SCENARIO_FORECAST_PERIOD:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.SCENARIO_FORECAST_PERIOD);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanPeriod> scenario_forecast_period_objs = DimPeriodQueryValueGet(ord.CategoryValue, ReportOrderPlanPeriodType.PERIOD_PLAN, OrdinateType.SCENARIO_FORECAST_PERIOD);
                    sort_order = 0;
                    foreach (var scenario_forecast_period_obj in scenario_forecast_period_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.SCENARIO_FORECAST_PERIOD);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimPeriodCategoryValueLocate(ord.CategoryValue, scenario_forecast_period_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.SCENARIO_FORECAST_PERIOD_FIRST_YEAR);
                        OrdinateCreate(sub_ord, OrdinateType.SCENARIO_FORECAST_PERIOD_SECOND_YEAR);
                    }
                    return ord;
                case OrdinateType.SCENARIO_IMPORT_BALANCE_END:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.SCENARIO_IMPORT_BALANCE_END);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanPeriod> scenario_import_balance_end_objs = DimPeriodQueryValueGet(ord.CategoryValue, ReportOrderPlanPeriodType.PERIOD_PLAN_BALANCE_END, OrdinateType.SCENARIO_IMPORT_BALANCE_END);
                    sort_order = 0;
                    foreach (var scenario_import_balance_end_obj in scenario_import_balance_end_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.SCENARIO_IMPORT_BALANCE_END);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimPeriodCategoryValueLocate(ord.CategoryValue, scenario_import_balance_end_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                    }
                    return ord;
                case OrdinateType.SCENARIO_FORECAST_PERIOD_FIRST_YEAR:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.SCENARIO_FORECAST_PERIOD_FIRST_YEAR);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanPeriod> scenario_forecast_period_first_year_objs = DimPeriodQueryValueGet(ord.CategoryValue, ReportOrderPlanPeriodType.PERIOD_PLAN_FIRST_YEAR, OrdinateType.SCENARIO_FORECAST_PERIOD_FIRST_YEAR);
                    sort_order = 0;
                    foreach (var scenario_forecast_period_first_year_obj in scenario_forecast_period_first_year_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.SCENARIO_FORECAST_PERIOD_FIRST_YEAR);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimPeriodCategoryValueLocate(ord.CategoryValue, scenario_forecast_period_first_year_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.SCENARIO_FORECAST_PERIOD_FIRST_YEAR_MONTH);
                        OrdinateCreate(sub_ord, OrdinateType.SCENARIO_FORECAST_PERIOD_FIRST_YEAR_PERIOD);
                    }
                    return ord;
                case OrdinateType.SCENARIO_FORECAST_PERIOD_SECOND_YEAR:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.SCENARIO_FORECAST_PERIOD_SECOND_YEAR);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanPeriod> scenario_forecast_period_second_year_objs = DimPeriodQueryValueGet(ord.CategoryValue, ReportOrderPlanPeriodType.PERIOD_PLAN_SECOND_YEAR, OrdinateType.SCENARIO_FORECAST_PERIOD_SECOND_YEAR);
                    sort_order = 0;
                    foreach (var scenario_forecast_period_second_year_obj in scenario_forecast_period_second_year_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.SCENARIO_FORECAST_PERIOD_SECOND_YEAR);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimPeriodCategoryValueLocate(ord.CategoryValue, scenario_forecast_period_second_year_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.SCENARIO_FORECAST_PERIOD_SECOND_YEAR_QUARTER);
                        OrdinateCreate(sub_ord, OrdinateType.SCENARIO_FORECAST_PERIOD_SECOND_YEAR_PERIOD);
                    }
                    return ord;
                case OrdinateType.SCENARIO_FORECAST_PERIOD_FIRST_YEAR_MONTH:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.SCENARIO_FORECAST_PERIOD_FIRST_YEAR_MONTH);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanPeriod> scenario_forecast_period_first_year_month_objs = DimPeriodQueryValueGet(ord.CategoryValue, ReportOrderPlanPeriodType.PERIOD_PLAN_MONTH, OrdinateType.SCENARIO_FORECAST_PERIOD_FIRST_YEAR_MONTH);
                    sort_order = 0;
                    foreach (var scenario_forecast_period_first_year_month_obj in scenario_forecast_period_first_year_month_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.SCENARIO_FORECAST_PERIOD_FIRST_YEAR_MONTH);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimPeriodCategoryValueLocate(ord.CategoryValue, scenario_forecast_period_first_year_month_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                    }
                    return ord;
                case OrdinateType.SCENARIO_FORECAST_PERIOD_FIRST_YEAR_PERIOD:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.SCENARIO_FORECAST_PERIOD_FIRST_YEAR_PERIOD);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.SCENARIO_FORECAST_PERIOD_SECOND_YEAR_QUARTER:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.SCENARIO_FORECAST_PERIOD_SECOND_YEAR_QUARTER);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanPeriod> scenario_forecast_period_second_year_quarter_objs = DimPeriodQueryValueGet(ord.CategoryValue, ReportOrderPlanPeriodType.PERIOD_PLAN_QUARTER, OrdinateType.SCENARIO_FORECAST_PERIOD_SECOND_YEAR_QUARTER);
                    sort_order = 0;
                    foreach (var scenario_forecast_period_second_year_quarter_obj in scenario_forecast_period_second_year_quarter_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.SCENARIO_FORECAST_PERIOD_SECOND_YEAR_QUARTER);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimPeriodCategoryValueLocate(ord.CategoryValue, scenario_forecast_period_second_year_quarter_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                    }
                    return ord;
                case OrdinateType.SCENARIO_FORECAST_PERIOD_SECOND_YEAR_PERIOD:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.SCENARIO_FORECAST_PERIOD_SECOND_YEAR_PERIOD);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.SCENARIO_IMPORT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.SCENARIO_IMPORT);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimScenarioCategoryValueLocate(ord_up_category_value, DimScenarioSingleValueGet(ord_up_category_value, ReportOrderPlanScenarioType.IMPORT, OrdinateType.SCENARIO_IMPORT));
                    OrdinateCreate(ord, OrdinateType.SCENARIO_IMPORT_BALANCE_END);
                    return ord;
                default:
                    return null;
            }
        }
        
        protected ReportOrderPlanCategoryValue DimScenarioCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanScenario obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimScenario = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimPeriodCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanPeriod obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimPeriod = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanScenario DimScenarioSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanScenarioType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.SCENARIO_FORECAST:
                    return Report.ReportCore.ConstScenario[model];
                case OrdinateType.SCENARIO_IMPORT:
                    return Report.ReportCore.ConstScenario[model];
                default:
                    return null;
            }
        }
        protected IList<ReportOrderPlanPeriod> DimPeriodQueryValueGet(ReportOrderPlanCategoryValue context, ReportOrderPlanPeriodType model, OrdinateType ord_type) {
            return Report.ReportCore.QueryPeriod(context, model);
        }
        
    }
    
    public partial class ReportOrderPlanAxisPeriod: MdfAxis<ReportOrderPlanReport,ReportOrderPlanCategoryValue,ReportOrderPlanTable,ReportOrderPlanTableCell,ReportOrderPlanDataPoint> {
        
        public enum OrdinateType {
            AXIS_PERIOD_ROOT =  13,
            SCENARIO_FACT =  14,
            SCENARIO_PLAN =  15,
            SCENARIO_FORECAST =  16,
            SCENARIO_FACT_BALANCE =  17,
            SCENARIO_PLAN_BALANCE =  18,
            SCENARIO_PLAN_PERIOD =  19,
            SCENARIO_FORECAST_BALANCE_BEGIN =  20,
            SCENARIO_FORECAST_PERIOD =  21,
            SCENARIO_FORECAST_BALANCE_END =  22,
            SCENARIO_FORECAST_PERIOD_PERIOD =  23,
            SCENARIO_FORECAST_PERIOD_YEAR =  24,
            SCENARIO_FORECAST_PERIOD_YEAR_MONTH =  25,
            SCENARIO_FORECAST_PERIOD_YEAR_PERIOD =  26,
            SCENARIO_FORECAST_PERIOD_YEAR_BALANCE_END =  27,
        }
        
        public class Ordinate : MdfAxisOrdinate {
            private OrdinateType _OrdinateType;
            public OrdinateType OrdinateType{
                get { return _OrdinateType; }
            }
            
            public Ordinate(ReportOrderPlanAxisPeriod axis, MdfAxisOrdinateValueType value_type, OrdinateType ord_type): base(axis, value_type)  {
                _OrdinateType = ord_type;
            }
        }
        
        public ReportOrderPlanAxisPeriod(ReportOrderPlanReport report): base(report) { }
        
        public override void OrdinatesFill() {
            Root = OrdinateCreate(null, OrdinateType.AXIS_PERIOD_ROOT);
        }
        
        protected Ordinate OrdinateCreate(Ordinate ord_up, OrdinateType ord_type) {
            Ordinate ord;
            Ordinate sub_ord;
            Int32 sort_order = 0;
            ReportOrderPlanCategoryValue ord_up_category_value = ord_up?.CategoryValue ?? ReportOrderPlanCategoryValue.DefaultCategoryValue;
            switch (ord_type) {
                case OrdinateType.AXIS_PERIOD_ROOT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.AXIS_PERIOD_ROOT);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    OrdinateCreate(ord, OrdinateType.SCENARIO_FACT);
                    OrdinateCreate(ord, OrdinateType.SCENARIO_PLAN);
                    OrdinateCreate(ord, OrdinateType.SCENARIO_FORECAST);
                    return ord;
                case OrdinateType.SCENARIO_FACT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.SCENARIO_FACT);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimScenarioCategoryValueLocate(ord_up_category_value, DimScenarioSingleValueGet(ord_up_category_value, ReportOrderPlanScenarioType.FACT, OrdinateType.SCENARIO_FACT));
                    OrdinateCreate(ord, OrdinateType.SCENARIO_FACT_BALANCE);
                    return ord;
                case OrdinateType.SCENARIO_PLAN:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.SCENARIO_PLAN);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimScenarioCategoryValueLocate(ord_up_category_value, DimScenarioSingleValueGet(ord_up_category_value, ReportOrderPlanScenarioType.PLAN, OrdinateType.SCENARIO_PLAN));
                    OrdinateCreate(ord, OrdinateType.SCENARIO_PLAN_BALANCE);
                    OrdinateCreate(ord, OrdinateType.SCENARIO_PLAN_PERIOD);
                    return ord;
                case OrdinateType.SCENARIO_FORECAST:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.SCENARIO_FORECAST);
                    ord.Up = ord_up;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimScenarioCategoryValueLocate(ord_up_category_value, DimScenarioSingleValueGet(ord_up_category_value, ReportOrderPlanScenarioType.FORECAST, OrdinateType.SCENARIO_FORECAST));
                    OrdinateCreate(ord, OrdinateType.SCENARIO_FORECAST_BALANCE_BEGIN);
                    OrdinateCreate(ord, OrdinateType.SCENARIO_FORECAST_PERIOD);
                    OrdinateCreate(ord, OrdinateType.SCENARIO_FORECAST_BALANCE_END);
                    return ord;
                case OrdinateType.SCENARIO_FACT_BALANCE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.SCENARIO_FACT_BALANCE);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanPeriod> scenario_fact_balance_objs = DimPeriodQueryValueGet(ord.CategoryValue, ReportOrderPlanPeriodType.PERIOD_PLAN_BALANCE_BEGIN, OrdinateType.SCENARIO_FACT_BALANCE);
                    sort_order = 0;
                    foreach (var scenario_fact_balance_obj in scenario_fact_balance_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.SCENARIO_FACT_BALANCE);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimPeriodCategoryValueLocate(ord.CategoryValue, scenario_fact_balance_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                    }
                    return ord;
                case OrdinateType.SCENARIO_PLAN_BALANCE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.SCENARIO_PLAN_BALANCE);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanPeriod> scenario_plan_balance_objs = DimPeriodQueryValueGet(ord.CategoryValue, ReportOrderPlanPeriodType.PERIOD_PLAN_BALANCE_BEGIN, OrdinateType.SCENARIO_PLAN_BALANCE);
                    sort_order = 0;
                    foreach (var scenario_plan_balance_obj in scenario_plan_balance_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.SCENARIO_PLAN_BALANCE);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimPeriodCategoryValueLocate(ord.CategoryValue, scenario_plan_balance_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                    }
                    return ord;
                case OrdinateType.SCENARIO_PLAN_PERIOD:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.SCENARIO_PLAN_PERIOD);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanPeriod> scenario_plan_period_objs = DimPeriodQueryValueGet(ord.CategoryValue, ReportOrderPlanPeriodType.PERIOD_PLAN, OrdinateType.SCENARIO_PLAN_PERIOD);
                    sort_order = 0;
                    foreach (var scenario_plan_period_obj in scenario_plan_period_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.SCENARIO_PLAN_PERIOD);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimPeriodCategoryValueLocate(ord.CategoryValue, scenario_plan_period_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                    }
                    return ord;
                case OrdinateType.SCENARIO_FORECAST_BALANCE_BEGIN:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.SCENARIO_FORECAST_BALANCE_BEGIN);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanPeriod> scenario_forecast_balance_begin_objs = DimPeriodQueryValueGet(ord.CategoryValue, ReportOrderPlanPeriodType.PERIOD_PLAN_BALANCE_BEGIN, OrdinateType.SCENARIO_FORECAST_BALANCE_BEGIN);
                    sort_order = 0;
                    foreach (var scenario_forecast_balance_begin_obj in scenario_forecast_balance_begin_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.SCENARIO_FORECAST_BALANCE_BEGIN);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimPeriodCategoryValueLocate(ord.CategoryValue, scenario_forecast_balance_begin_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                    }
                    return ord;
                case OrdinateType.SCENARIO_FORECAST_PERIOD:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.SCENARIO_FORECAST_PERIOD);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanPeriod> scenario_forecast_period_objs = DimPeriodQueryValueGet(ord.CategoryValue, ReportOrderPlanPeriodType.PERIOD_PLAN, OrdinateType.SCENARIO_FORECAST_PERIOD);
                    sort_order = 0;
                    foreach (var scenario_forecast_period_obj in scenario_forecast_period_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.SCENARIO_FORECAST_PERIOD);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimPeriodCategoryValueLocate(ord.CategoryValue, scenario_forecast_period_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.SCENARIO_FORECAST_PERIOD_PERIOD);
                        OrdinateCreate(sub_ord, OrdinateType.SCENARIO_FORECAST_PERIOD_YEAR);
                    }
                    return ord;
                case OrdinateType.SCENARIO_FORECAST_BALANCE_END:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.SCENARIO_FORECAST_BALANCE_END);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanPeriod> scenario_forecast_balance_end_objs = DimPeriodQueryValueGet(ord.CategoryValue, ReportOrderPlanPeriodType.PERIOD_PLAN_BALANCE_END, OrdinateType.SCENARIO_FORECAST_BALANCE_END);
                    sort_order = 0;
                    foreach (var scenario_forecast_balance_end_obj in scenario_forecast_balance_end_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.SCENARIO_FORECAST_BALANCE_END);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimPeriodCategoryValueLocate(ord.CategoryValue, scenario_forecast_balance_end_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                    }
                    return ord;
                case OrdinateType.SCENARIO_FORECAST_PERIOD_PERIOD:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.SCENARIO_FORECAST_PERIOD_PERIOD);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanPeriod> scenario_forecast_period_period_objs = DimPeriodQueryValueGet(ord.CategoryValue, ReportOrderPlanPeriodType.PERIOD_PLAN, OrdinateType.SCENARIO_FORECAST_PERIOD_PERIOD);
                    sort_order = 0;
                    foreach (var scenario_forecast_period_period_obj in scenario_forecast_period_period_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.SCENARIO_FORECAST_PERIOD_PERIOD);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimPeriodCategoryValueLocate(ord.CategoryValue, scenario_forecast_period_period_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                    }
                    return ord;
                case OrdinateType.SCENARIO_FORECAST_PERIOD_YEAR:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.SCENARIO_FORECAST_PERIOD_YEAR);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanPeriod> scenario_forecast_period_year_objs = DimPeriodQueryValueGet(ord.CategoryValue, ReportOrderPlanPeriodType.PERIOD_PLAN_YEAR, OrdinateType.SCENARIO_FORECAST_PERIOD_YEAR);
                    sort_order = 0;
                    foreach (var scenario_forecast_period_year_obj in scenario_forecast_period_year_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.SCENARIO_FORECAST_PERIOD_YEAR);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimPeriodCategoryValueLocate(ord.CategoryValue, scenario_forecast_period_year_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.SCENARIO_FORECAST_PERIOD_YEAR_MONTH);
                        OrdinateCreate(sub_ord, OrdinateType.SCENARIO_FORECAST_PERIOD_YEAR_PERIOD);
                        OrdinateCreate(sub_ord, OrdinateType.SCENARIO_FORECAST_PERIOD_YEAR_BALANCE_END);
                    }
                    return ord;
                case OrdinateType.SCENARIO_FORECAST_PERIOD_YEAR_MONTH:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.SCENARIO_FORECAST_PERIOD_YEAR_MONTH);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanPeriod> scenario_forecast_period_year_month_objs = DimPeriodQueryValueGet(ord.CategoryValue, ReportOrderPlanPeriodType.PERIOD_PLAN_MONTH, OrdinateType.SCENARIO_FORECAST_PERIOD_YEAR_MONTH);
                    sort_order = 0;
                    foreach (var scenario_forecast_period_year_month_obj in scenario_forecast_period_year_month_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.SCENARIO_FORECAST_PERIOD_YEAR_MONTH);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimPeriodCategoryValueLocate(ord.CategoryValue, scenario_forecast_period_year_month_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                    }
                    return ord;
                case OrdinateType.SCENARIO_FORECAST_PERIOD_YEAR_PERIOD:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.SCENARIO_FORECAST_PERIOD_YEAR_PERIOD);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.SCENARIO_FORECAST_PERIOD_YEAR_BALANCE_END:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.SCENARIO_FORECAST_PERIOD_YEAR_BALANCE_END);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanPeriod> scenario_forecast_period_year_balance_end_objs = DimPeriodQueryValueGet(ord.CategoryValue, ReportOrderPlanPeriodType.PERIOD_PLAN_YEAR_BALANCE_END, OrdinateType.SCENARIO_FORECAST_PERIOD_YEAR_BALANCE_END);
                    sort_order = 0;
                    foreach (var scenario_forecast_period_year_balance_end_obj in scenario_forecast_period_year_balance_end_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.SCENARIO_FORECAST_PERIOD_YEAR_BALANCE_END);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimPeriodCategoryValueLocate(ord.CategoryValue, scenario_forecast_period_year_balance_end_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                    }
                    return ord;
                default:
                    return null;
            }
        }
        
        protected ReportOrderPlanCategoryValue DimScenarioCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanScenario obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimScenario = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimPeriodCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanPeriod obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimPeriod = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanScenario DimScenarioSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanScenarioType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.SCENARIO_FACT:
                    return Report.ReportCore.ConstScenario[model];
                case OrdinateType.SCENARIO_PLAN:
                    return Report.ReportCore.ConstScenario[model];
                case OrdinateType.SCENARIO_FORECAST:
                    return Report.ReportCore.ConstScenario[model];
                default:
                    return null;
            }
        }
        protected IList<ReportOrderPlanPeriod> DimPeriodQueryValueGet(ReportOrderPlanCategoryValue context, ReportOrderPlanPeriodType model, OrdinateType ord_type) {
            return Report.ReportCore.QueryPeriod(context, model);
        }
        
    }
    
    public partial class ReportOrderPlanAxisIeArticleImport: MdfAxis<ReportOrderPlanReport,ReportOrderPlanCategoryValue,ReportOrderPlanTable,ReportOrderPlanTableCell,ReportOrderPlanDataPoint> {
        
        public enum OrdinateType {
            IE_REPORT =  28,
            IE_FINREP_IE =  29,
            IE_ARTICLE_INCOME =  30,
            IE_ARTICLE_EXPENSE =  31,
            IE_ARTICLE_INCOME_ALL_CODE =  32,
            IE_ARTICLE_INCOME_SALE_COUNT_CODE =  33,
            IE_ARTICLE_INCOME_SALE_VAL_CODE =  34,
            IE_ARTICLE_INCOME_SALE_RUB_CODE =  35,
            IE_ARTICLE_EXPENSE_ALL_CODE =  36,
            IE_ARTICLE_EXPENSE_GOOD_CODE =  37,
            IE_ARTICLE_EXPENSE_STAFF =  38,
            IE_ARTICLE_EXPENSE_PARTY_CODE =  39,
            IE_ARTICLE_EXPENSE_OTHER =  40,
            IE_ARTICLE_EXPENSE_ITOG_CODE =  41,
            IE_ARTICLE_EXPENSE_ITOG_FULL_CODE =  42,
            IE_ARTICLE_INCOME_ALL_NAME =  43,
            IE_ARTICLE_INCOME_SALE_COUNT_NAME =  44,
            IE_ARTICLE_INCOME_SALE_VAL_NAME =  45,
            IE_ARTICLE_INCOME_SALE_RUB_NAME =  46,
            IE_ARTICLE_EXPENSE_ALL_NAME =  47,
            IE_ARTICLE_EXPENSE_GOOD_NAME =  48,
            IE_ARTICLE_EXPENSE_STAFF_CODE =  49,
            IE_ARTICLE_EXPENSE_STAFF_KB_PRIMARY =  50,
            IE_ARTICLE_EXPENSE_STAFF_ORION_PRIMARY =  51,
            IE_ARTICLE_EXPENSE_STAFF_OZM_PRIMARY =  52,
            IE_ARTICLE_EXPENSE_STAFF_LC_PRIMARY =  53,
            IE_ARTICLE_EXPENSE_PARTY_NAME =  54,
            IE_ARTICLE_EXPENSE_OTHER_ALL_CODE =  55,
            IE_ARTICLE_EXPENSE_OTHER_TRIP_CODE =  56,
            IE_ARTICLE_EXPENSE_OTHER_LIC_CODE =  57,
            IE_ARTICLE_EXPENSE_OTHER_PASP_CODE =  58,
            IE_ARTICLE_EXPENSE_OTHER_TRANSP_CODE =  59,
            IE_ARTICLE_EXPENSE_OTHER_CUSTOM_CODE =  60,
            IE_ARTICLE_EXPENSE_OTHER_INSURANCE_CODE =  61,
            IE_ARTICLE_EXPENSE_OTHER_MORF_CODE =  62,
            IE_ARTICLE_EXPENSE_OTHER_FAPRID_CODE =  63,
            IE_ARTICLE_EXPENSE_OTHER_GUARANTEE_CODE =  64,
            IE_ARTICLE_EXPENSE_OTHER_COMMERC_CODE =  65,
            IE_ARTICLE_EXPENSE_OTHER_BANK_CODE =  66,
            IE_ARTICLE_EXPENSE_OTHER_OTHER_CODE =  67,
            IE_ARTICLE_EXPENSE_ITOG_NAME =  68,
            IE_ARTICLE_EXPENSE_ITOG_FULL_NAME =  69,
            IE_ARTICLE_EXPENSE_STAFF_NAME =  70,
            IE_ARTICLE_EXPENSE_STAFF_KB_CODE =  71,
            IE_ARTICLE_EXPENSE_STAFF_KB_FOT_CODE =  72,
            IE_ARTICLE_EXPENSE_STAFF_KB_ZP_CODE =  73,
            IE_ARTICLE_EXPENSE_STAFF_KB_CF_CODE =  74,
            IE_ARTICLE_EXPENSE_STAFF_KB_COUNT_CODE =  75,
            IE_ARTICLE_EXPENSE_STAFF_KB_INSURE_CODE =  76,
            IE_ARTICLE_EXPENSE_STAFF_KB_OVER_CODE =  77,
            IE_ARTICLE_EXPENSE_STAFF_ORION_CODE =  78,
            IE_ARTICLE_EXPENSE_STAFF_ORION_FOT_CODE =  79,
            IE_ARTICLE_EXPENSE_STAFF_ORION_COUNT_CODE =  80,
            IE_ARTICLE_EXPENSE_STAFF_ORION_INSURE_CODE =  81,
            IE_ARTICLE_EXPENSE_STAFF_ORION_OVER_CODE =  82,
            IE_ARTICLE_EXPENSE_STAFF_OZM_CODE =  83,
            IE_ARTICLE_EXPENSE_STAFF_OZM_FOT_CODE =  84,
            IE_ARTICLE_EXPENSE_STAFF_OZM_ZP_CODE =  85,
            IE_ARTICLE_EXPENSE_STAFF_OZM_CF_CODE =  86,
            IE_ARTICLE_EXPENSE_STAFF_OZM_TH_CODE =  87,
            IE_ARTICLE_EXPENSE_STAFF_OZM_INSURE_CODE =  88,
            IE_ARTICLE_EXPENSE_STAFF_OZM_OVER_CODE =  89,
            IE_ARTICLE_EXPENSE_STAFF_LC_CODE =  90,
            IE_ARTICLE_EXPENSE_STAFF_LC_FOT_CODE =  91,
            IE_ARTICLE_EXPENSE_STAFF_LC_COUNT_CODE =  92,
            IE_ARTICLE_EXPENSE_STAFF_LC_INSURE_CODE =  93,
            IE_ARTICLE_EXPENSE_STAFF_LC_OVER_CODE =  94,
            IE_ARTICLE_EXPENSE_OTHER_ALL_NAME =  95,
            IE_ARTICLE_EXPENSE_OTHER_TRIP_NAME =  96,
            IE_ARTICLE_EXPENSE_OTHER_LIC_NAME =  97,
            IE_ARTICLE_EXPENSE_OTHER_PASP_NAME =  98,
            IE_ARTICLE_EXPENSE_OTHER_TRANSP_NAME =  99,
            IE_ARTICLE_EXPENSE_OTHER_CUSTOM_NAME =  100,
            IE_ARTICLE_EXPENSE_OTHER_INSURANCE_NAME =  101,
            IE_ARTICLE_EXPENSE_OTHER_MORF_NAME =  102,
            IE_ARTICLE_EXPENSE_OTHER_FAPRID_NAME =  103,
            IE_ARTICLE_EXPENSE_OTHER_GUARANTEE_NAME =  104,
            IE_ARTICLE_EXPENSE_OTHER_COMMERC_NAME =  105,
            IE_ARTICLE_EXPENSE_OTHER_BANK_NAME =  106,
            IE_ARTICLE_EXPENSE_OTHER_OTHER_NAME =  107,
            IE_ARTICLE_EXPENSE_STAFF_KB_NAME =  108,
            IE_ARTICLE_EXPENSE_STAFF_KB_FOT_NAME =  109,
            IE_ARTICLE_EXPENSE_STAFF_KB_ZP_NAME =  110,
            IE_ARTICLE_EXPENSE_STAFF_KB_CF_NAME =  111,
            IE_ARTICLE_EXPENSE_STAFF_KB_COUNT_NAME =  112,
            IE_ARTICLE_EXPENSE_STAFF_KB_INSURE_NAME =  113,
            IE_ARTICLE_EXPENSE_STAFF_KB_OVER_NAME =  114,
            IE_ARTICLE_EXPENSE_STAFF_ORION_NAME =  115,
            IE_ARTICLE_EXPENSE_STAFF_ORION_FOT_NAME =  116,
            IE_ARTICLE_EXPENSE_STAFF_ORION_COUNT_NAME =  117,
            IE_ARTICLE_EXPENSE_STAFF_ORION_INSURE_NAME =  118,
            IE_ARTICLE_EXPENSE_STAFF_ORION_OVER_NAME =  119,
            IE_ARTICLE_EXPENSE_STAFF_OZM_NAME =  120,
            IE_ARTICLE_EXPENSE_STAFF_OZM_FOT_NAME =  121,
            IE_ARTICLE_EXPENSE_STAFF_OZM_ZP_NAME =  122,
            IE_ARTICLE_EXPENSE_STAFF_OZM_CF_NAME =  123,
            IE_ARTICLE_EXPENSE_STAFF_OZM_TH_NAME =  124,
            IE_ARTICLE_EXPENSE_STAFF_OZM_INSURE_NAME =  125,
            IE_ARTICLE_EXPENSE_STAFF_OZM_OVER_NAME =  126,
            IE_ARTICLE_EXPENSE_STAFF_LC_NAME =  127,
            IE_ARTICLE_EXPENSE_STAFF_LC_FOT_NAME =  128,
            IE_ARTICLE_EXPENSE_STAFF_LC_COUNT_NAME =  129,
            IE_ARTICLE_EXPENSE_STAFF_LC_INSURE_NAME =  130,
            IE_ARTICLE_EXPENSE_STAFF_LC_OVER_NAME =  131,
            IE_ARTICLE_INCOME_FINDEAL =  344,
            IE_VALUTA =  364,
            IE_ARTICLE_EXPENSE_OTHER_OTHER =  365,
            IE_VALUE_TYPE_BALANCE =  366,
            IE_ARTICLE_EXPENSE_STAFF_KB =  488,
            IE_ARTICLE_EXPENSE_STAFF_ORION =  489,
            IE_ARTICLE_EXPENSE_STAFF_OZM =  490,
            IE_ARTICLE_EXPENSE_STAFF_LC =  491,
            IE_FINREP_IE_SALE =  632,
            IE_FINREP_IE_BAY =  633,
        }
        
        public class Ordinate : MdfAxisOrdinate {
            private OrdinateType _OrdinateType;
            public OrdinateType OrdinateType{
                get { return _OrdinateType; }
            }
            
            public Ordinate(ReportOrderPlanAxisIeArticleImport axis, MdfAxisOrdinateValueType value_type, OrdinateType ord_type): base(axis, value_type)  {
                _OrdinateType = ord_type;
            }
        }
        
        public ReportOrderPlanAxisIeArticleImport(ReportOrderPlanReport report): base(report) { }
        
        public override void OrdinatesFill() {
            Root = OrdinateCreate(null, OrdinateType.IE_REPORT);
        }
        
        protected Ordinate OrdinateCreate(Ordinate ord_up, OrdinateType ord_type) {
            Ordinate ord;
            Ordinate sub_ord;
            Int32 sort_order = 0;
            ReportOrderPlanCategoryValue ord_up_category_value = ord_up?.CategoryValue ?? ReportOrderPlanCategoryValue.DefaultCategoryValue;
            switch (ord_type) {
                case OrdinateType.IE_REPORT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_REPORT);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanReport> ie_report_objs = DimReportQueryValueGet(ord.CategoryValue, ReportOrderPlanReportType.REPORT, OrdinateType.IE_REPORT);
                    sort_order = 0;
                    foreach (var ie_report_obj in ie_report_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.IE_REPORT);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimReportCategoryValueLocate(ord.CategoryValue, ie_report_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.IE_VALUTA);
                    }
                    return ord;
                case OrdinateType.IE_FINREP_IE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_FINREP_IE);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimFinrepCategoryValueLocate(ord_up_category_value, DimFinrepSingleValueGet(ord_up_category_value, ReportOrderPlanFinrepType.FINREP_IE, OrdinateType.IE_FINREP_IE));
                    OrdinateCreate(ord, OrdinateType.IE_FINREP_IE_SALE);
                    OrdinateCreate(ord, OrdinateType.IE_FINREP_IE_BAY);
                    return ord;
                case OrdinateType.IE_ARTICLE_INCOME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_INCOME);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_INCOME_SALE_REVENUE, OrdinateType.IE_ARTICLE_INCOME));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_INCOME_ALL_CODE);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_INCOME_FINDEAL);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE, OrdinateType.IE_ARTICLE_EXPENSE));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_ALL_CODE);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_GOOD_CODE);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_PARTY_CODE);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_OTHER);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_ITOG_CODE);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_ITOG_FULL_CODE);
                    return ord;
                case OrdinateType.IE_ARTICLE_INCOME_ALL_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_INCOME_ALL_CODE);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_INCOME_ALL_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_INCOME_SALE_COUNT_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_INCOME_SALE_COUNT_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, null);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_INCOME_SALE_COUNT_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_INCOME_SALE_VAL_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_INCOME_SALE_VAL_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_FINDEAL_VALUTA, OrdinateType.IE_ARTICLE_INCOME_SALE_VAL_CODE));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_INCOME_SALE_VAL_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_INCOME_SALE_RUB_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_INCOME_SALE_RUB_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 40;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_REPORT_VALUTA, OrdinateType.IE_ARTICLE_INCOME_SALE_RUB_CODE));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_INCOME_SALE_RUB_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_ALL_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_ALL_CODE);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 5;
                    ord.IsIntegrated = false;
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_ALL_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_GOOD_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_GOOD_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD, OrdinateType.IE_ARTICLE_EXPENSE_GOOD_CODE));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_GOOD_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_STAFF, OrdinateType.IE_ARTICLE_EXPENSE_STAFF));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_CODE);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_PARTY_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_PARTY_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_PARTY, OrdinateType.IE_ARTICLE_EXPENSE_PARTY_CODE));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_PARTY_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_OTHER);
                    ord.Up = ord_up;
                    ord.SortOrder = 40;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER, OrdinateType.IE_ARTICLE_EXPENSE_OTHER));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_ALL_CODE);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_OTHER);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_ITOG_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_ITOG_CODE);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 50;
                    ord.IsIntegrated = false;
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_ITOG_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_ITOG_FULL_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_ITOG_FULL_CODE);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 60;
                    ord.IsIntegrated = false;
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_ITOG_FULL_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_INCOME_ALL_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_INCOME_ALL_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.IE_ARTICLE_INCOME_SALE_COUNT_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_INCOME_SALE_COUNT_NAME);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.COUNT, OrdinateType.IE_ARTICLE_INCOME_SALE_COUNT_NAME));
                    return ord;
                case OrdinateType.IE_ARTICLE_INCOME_SALE_VAL_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_INCOME_SALE_VAL_NAME);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.COST, OrdinateType.IE_ARTICLE_INCOME_SALE_VAL_NAME));
                    return ord;
                case OrdinateType.IE_ARTICLE_INCOME_SALE_RUB_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_INCOME_SALE_RUB_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_ALL_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_ALL_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 5;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_GOOD_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_GOOD_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_CODE);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 5;
                    ord.IsIntegrated = false;
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_PRIMARY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_PRIMARY);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_CODE);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_FOT_CODE);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_ZP_CODE);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_CF_CODE);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_COUNT_CODE);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_INSURE_CODE);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_OVER_CODE);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION_PRIMARY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION_PRIMARY);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION_CODE);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION_FOT_CODE);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION_COUNT_CODE);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION_INSURE_CODE);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION_OVER_CODE);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_PRIMARY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_PRIMARY);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = true;
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_CODE);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_FOT_CODE);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_ZP_CODE);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_CF_CODE);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_TH_CODE);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_INSURE_CODE);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_OVER_CODE);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC_PRIMARY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC_PRIMARY);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 40;
                    ord.IsIntegrated = true;
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC_CODE);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC_FOT_CODE);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC_COUNT_CODE);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC_INSURE_CODE);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC_OVER_CODE);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_PARTY_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_PARTY_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_ALL_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_ALL_CODE);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 5;
                    ord.IsIntegrated = false;
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_ALL_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_TRIP_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_TRIP_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_TRIP, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_TRIP_CODE));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_TRIP_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_LIC_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_LIC_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_LIC, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_LIC_CODE));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_LIC_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_PASP_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_PASP_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_PASP, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_PASP_CODE));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_PASP_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_TRANSP_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_TRANSP_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 40;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_TRANSP, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_TRANSP_CODE));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_TRANSP_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_CUSTOM_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_CUSTOM_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 50;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_CUSTOM, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_CUSTOM_CODE));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_CUSTOM_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_INSURANCE_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_INSURANCE_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 60;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_INSURANCE, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_INSURANCE_CODE));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_INSURANCE_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_MORF_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_MORF_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 70;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_MORF, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_MORF_CODE));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_MORF_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_FAPRID_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_FAPRID_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 80;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_FAPRID, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_FAPRID_CODE));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_FAPRID_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_GUARANTEE_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_GUARANTEE_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 90;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_GUARANTEE, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_GUARANTEE_CODE));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_GUARANTEE_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_COMMERC_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_COMMERC_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 100;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_COMMERC, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_COMMERC_CODE));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_COMMERC_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_BANK_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_BANK_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 110;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_BANK, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_BANK_CODE));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_BANK_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_OTHER_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_OTHER_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 120;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_OTHER, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_OTHER_CODE));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_OTHER_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_ITOG_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_ITOG_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 5;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_ITOG_FULL_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_ITOG_FULL_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 5;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_CODE);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_FOT_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_FOT_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.COST, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_FOT_CODE));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_FOT_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_ZP_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_ZP_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.STAFFZP, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_ZP_CODE));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_ZP_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_CF_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_CF_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 40;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.STAFFCF, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_CF_CODE));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_CF_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_COUNT_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_COUNT_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 50;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.COUNT, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_COUNT_CODE));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_COUNT_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_INSURE_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_INSURE_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 60;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.INSURANCE, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_INSURE_CODE));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_INSURE_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_OVER_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_OVER_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 70;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.OVERHEAD, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_OVER_CODE));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_OVER_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION_CODE);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION_FOT_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION_FOT_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.COST, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION_FOT_CODE));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION_FOT_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION_COUNT_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION_COUNT_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 50;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.COUNT, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION_COUNT_CODE));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION_COUNT_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION_INSURE_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION_INSURE_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 60;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.INSURANCE, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION_INSURE_CODE));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION_INSURE_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION_OVER_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION_OVER_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 70;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.OVERHEAD, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION_OVER_CODE));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION_OVER_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_CODE);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_FOT_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_FOT_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.COST, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_FOT_CODE));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_FOT_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_ZP_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_ZP_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.STAFFZP, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_ZP_CODE));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_ZP_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_CF_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_CF_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 40;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.STAFFCF, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_CF_CODE));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_CF_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_TH_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_TH_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 50;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.COUNT, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_TH_CODE));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_TH_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_INSURE_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_INSURE_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 60;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.INSURANCE, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_INSURE_CODE));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_INSURE_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_OVER_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_OVER_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 70;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.OVERHEAD, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_OVER_CODE));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_OVER_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC_CODE);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC_FOT_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC_FOT_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.COST, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC_FOT_CODE));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC_FOT_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC_COUNT_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC_COUNT_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 50;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.COUNT, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC_COUNT_CODE));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC_COUNT_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC_INSURE_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC_INSURE_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 60;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.INSURANCE, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC_INSURE_CODE));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC_INSURE_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC_OVER_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC_OVER_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 70;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.OVERHEAD, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC_OVER_CODE));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC_OVER_NAME);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_ALL_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_ALL_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 5;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_TRIP_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_TRIP_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 4;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> ie_article_expense_other_trip_name_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_OTHER, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_TRIP_NAME);
                    sort_order = 0;
                    foreach (var ie_article_expense_other_trip_name_obj in ie_article_expense_other_trip_name_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_TRIP_NAME);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, ie_article_expense_other_trip_name_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                    }
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_LIC_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_LIC_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 5;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> ie_article_expense_other_lic_name_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_OTHER, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_LIC_NAME);
                    sort_order = 0;
                    foreach (var ie_article_expense_other_lic_name_obj in ie_article_expense_other_lic_name_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_LIC_NAME);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, ie_article_expense_other_lic_name_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                    }
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_PASP_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_PASP_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 5;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> ie_article_expense_other_pasp_name_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_OTHER, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_PASP_NAME);
                    sort_order = 0;
                    foreach (var ie_article_expense_other_pasp_name_obj in ie_article_expense_other_pasp_name_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_PASP_NAME);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, ie_article_expense_other_pasp_name_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                    }
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_TRANSP_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_TRANSP_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 5;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> ie_article_expense_other_transp_name_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_OTHER, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_TRANSP_NAME);
                    sort_order = 0;
                    foreach (var ie_article_expense_other_transp_name_obj in ie_article_expense_other_transp_name_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_TRANSP_NAME);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, ie_article_expense_other_transp_name_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                    }
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_CUSTOM_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_CUSTOM_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 5;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> ie_article_expense_other_custom_name_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_OTHER, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_CUSTOM_NAME);
                    sort_order = 0;
                    foreach (var ie_article_expense_other_custom_name_obj in ie_article_expense_other_custom_name_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_CUSTOM_NAME);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, ie_article_expense_other_custom_name_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                    }
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_INSURANCE_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_INSURANCE_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 5;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> ie_article_expense_other_insurance_name_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_OTHER, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_INSURANCE_NAME);
                    sort_order = 0;
                    foreach (var ie_article_expense_other_insurance_name_obj in ie_article_expense_other_insurance_name_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_INSURANCE_NAME);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, ie_article_expense_other_insurance_name_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                    }
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_MORF_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_MORF_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 5;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> ie_article_expense_other_morf_name_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_OTHER, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_MORF_NAME);
                    sort_order = 0;
                    foreach (var ie_article_expense_other_morf_name_obj in ie_article_expense_other_morf_name_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_MORF_NAME);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, ie_article_expense_other_morf_name_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                    }
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_FAPRID_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_FAPRID_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 5;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> ie_article_expense_other_faprid_name_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_OTHER, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_FAPRID_NAME);
                    sort_order = 0;
                    foreach (var ie_article_expense_other_faprid_name_obj in ie_article_expense_other_faprid_name_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_FAPRID_NAME);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, ie_article_expense_other_faprid_name_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                    }
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_GUARANTEE_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_GUARANTEE_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 5;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> ie_article_expense_other_guarantee_name_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_OTHER, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_GUARANTEE_NAME);
                    sort_order = 0;
                    foreach (var ie_article_expense_other_guarantee_name_obj in ie_article_expense_other_guarantee_name_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_GUARANTEE_NAME);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, ie_article_expense_other_guarantee_name_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                    }
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_COMMERC_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_COMMERC_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 5;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> ie_article_expense_other_commerc_name_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_OTHER, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_COMMERC_NAME);
                    sort_order = 0;
                    foreach (var ie_article_expense_other_commerc_name_obj in ie_article_expense_other_commerc_name_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_COMMERC_NAME);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, ie_article_expense_other_commerc_name_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                    }
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_BANK_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_BANK_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 5;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> ie_article_expense_other_bank_name_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_OTHER, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_BANK_NAME);
                    sort_order = 0;
                    foreach (var ie_article_expense_other_bank_name_obj in ie_article_expense_other_bank_name_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_BANK_NAME);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, ie_article_expense_other_bank_name_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                    }
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_OTHER_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_OTHER_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 5;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> ie_article_expense_other_other_name_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_OTHER, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_OTHER_NAME);
                    sort_order = 0;
                    foreach (var ie_article_expense_other_other_name_obj in ie_article_expense_other_other_name_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_OTHER_NAME);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, ie_article_expense_other_other_name_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                    }
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_FOT_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_FOT_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_ZP_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_ZP_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_CF_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_CF_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_COUNT_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_COUNT_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_INSURE_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_INSURE_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_OVER_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_OVER_NAME);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.BALANCE, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_OVER_NAME));
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION_FOT_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION_FOT_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION_COUNT_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION_COUNT_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION_INSURE_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION_INSURE_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION_OVER_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION_OVER_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_FOT_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_FOT_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_ZP_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_ZP_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_CF_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_CF_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_TH_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_TH_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_INSURE_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_INSURE_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_OVER_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_OVER_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC_NAME);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, null);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC_FOT_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC_FOT_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC_COUNT_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC_COUNT_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC_INSURE_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC_INSURE_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC_OVER_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC_OVER_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.IE_ARTICLE_INCOME_FINDEAL:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_INCOME_FINDEAL);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> ie_article_income_findeal_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_SALE_PLAN, OrdinateType.IE_ARTICLE_INCOME_FINDEAL);
                    sort_order = 0;
                    foreach (var ie_article_income_findeal_obj in ie_article_income_findeal_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.IE_ARTICLE_INCOME_FINDEAL);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, ie_article_income_findeal_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.IE_ARTICLE_INCOME_SALE_COUNT_CODE);
                        OrdinateCreate(sub_ord, OrdinateType.IE_ARTICLE_INCOME_SALE_VAL_CODE);
                        OrdinateCreate(sub_ord, OrdinateType.IE_ARTICLE_INCOME_SALE_RUB_CODE);
                    }
                    return ord;
                case OrdinateType.IE_VALUTA:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_VALUTA);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_REPORT_VALUTA, OrdinateType.IE_VALUTA));
                    OrdinateCreate(ord, OrdinateType.IE_VALUE_TYPE_BALANCE);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_OTHER:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_OTHER);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_TRIP_CODE);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_LIC_CODE);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_PASP_CODE);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_TRANSP_CODE);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_CUSTOM_CODE);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_INSURANCE_CODE);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_MORF_CODE);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_FAPRID_CODE);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_GUARANTEE_CODE);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_COMMERC_CODE);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_BANK_CODE);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_OTHER_CODE);
                    return ord;
                case OrdinateType.IE_VALUE_TYPE_BALANCE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_VALUE_TYPE_BALANCE);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.BALANCE, OrdinateType.IE_VALUE_TYPE_BALANCE));
                    OrdinateCreate(ord, OrdinateType.IE_FINREP_IE);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimFindealCategoryValueLocate(ord_up_category_value, DimFindealSingleValueGet(ord_up_category_value, ReportOrderPlanFindealType.FINDEAL_STAFF_KB, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_PRIMARY);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimFindealCategoryValueLocate(ord_up_category_value, DimFindealSingleValueGet(ord_up_category_value, ReportOrderPlanFindealType.FINDEAL_STAFF_ORION, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION_PRIMARY);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM);
                    ord.Up = ord_up;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimFindealCategoryValueLocate(ord_up_category_value, DimFindealSingleValueGet(ord_up_category_value, ReportOrderPlanFindealType.FINDEAL_STAFF_OZM, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_PRIMARY);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC);
                    ord.Up = ord_up;
                    ord.SortOrder = 40;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimFindealCategoryValueLocate(ord_up_category_value, DimFindealSingleValueGet(ord_up_category_value, ReportOrderPlanFindealType.FINDEAL_STAFF_LC, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC_PRIMARY);
                    return ord;
                case OrdinateType.IE_FINREP_IE_SALE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_FINREP_IE_SALE);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimDealKindCategoryValueLocate(ord_up_category_value, DimDealKindSingleValueGet(ord_up_category_value, ReportOrderPlanDealKindType.SALE, OrdinateType.IE_FINREP_IE_SALE));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_INCOME);
                    return ord;
                case OrdinateType.IE_FINREP_IE_BAY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_FINREP_IE_BAY);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimDealKindCategoryValueLocate(ord_up_category_value, DimDealKindSingleValueGet(ord_up_category_value, ReportOrderPlanDealKindType.BUY, OrdinateType.IE_FINREP_IE_BAY));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE);
                    return ord;
                default:
                    return null;
            }
        }
        
        protected ReportOrderPlanCategoryValue DimReportCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanReport obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimReport = obj;
            value.DimEntity = value.DimReport?.Entity;
            value.DimOrder = value.DimReport?.Order;
            value.DimVatMode = value.DimOrder?.VatMode;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimFinrepCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanFinrep obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimFinrep = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimArticleCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanArticle obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimArticle = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimValutaCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanValuta obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimValuta = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimValueTypeCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanValueType obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimValueType = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimFindealCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanFindeal obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimFindeal = obj;
            value.DimDeal = value.DimFindeal?.Deal;
            value.DimParty = value.DimDeal?.Party;
            value.DimPartyKind = value.DimParty?.Kind;
            value.DimDealKind = value.DimDeal?.Kind;
            value.DimValutaObligation = value.DimFindeal?.Valuta;
            value.DimVatModeObligation = value.DimFindeal?.VatMode;
            value.DimArticle = value.DimFindeal?.Article;
            value.DimFindealKind = value.DimFindeal?.Kind;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimDealKindCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanDealKind obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimDealKind = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanFinrep DimFinrepSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanFinrepType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.IE_FINREP_IE:
                    return Report.ReportCore.ConstFinrep[model];
                default:
                    return null;
            }
        }
        protected ReportOrderPlanArticle DimArticleSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanArticleType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.IE_ARTICLE_INCOME:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.IE_ARTICLE_EXPENSE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_GOOD_CODE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_PARTY_CODE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_TRIP_CODE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_LIC_CODE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_PASP_CODE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_TRANSP_CODE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_CUSTOM_CODE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_INSURANCE_CODE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_MORF_CODE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_FAPRID_CODE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_GUARANTEE_CODE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_COMMERC_CODE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_BANK_CODE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_OTHER_CODE:
                    return Report.ReportCore.ConstArticle[model];
                default:
                    return null;
            }
        }
        protected ReportOrderPlanValuta DimValutaSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanValutaType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.IE_ARTICLE_INCOME_SALE_COUNT_CODE:
                    return Report.ReportCore.ConstValuta[model];
                case OrdinateType.IE_ARTICLE_INCOME_SALE_VAL_CODE:
                    return context.DimFindeal?.Valuta;
                case OrdinateType.IE_ARTICLE_INCOME_SALE_RUB_CODE:
                    return context.DimReport?.Valuta;
                case OrdinateType.IE_VALUTA:
                    return context.DimReport?.Valuta;
                default:
                    return null;
            }
        }
        protected ReportOrderPlanValueType DimValueTypeSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanValueTypeType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.IE_ARTICLE_INCOME_SALE_COUNT_NAME:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.IE_ARTICLE_INCOME_SALE_VAL_NAME:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_FOT_CODE:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_ZP_CODE:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_CF_CODE:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_COUNT_CODE:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_INSURE_CODE:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_OVER_CODE:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION_FOT_CODE:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION_COUNT_CODE:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION_INSURE_CODE:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION_OVER_CODE:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_FOT_CODE:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_ZP_CODE:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_CF_CODE:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_TH_CODE:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_INSURE_CODE:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM_OVER_CODE:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC_FOT_CODE:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC_COUNT_CODE:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC_INSURE_CODE:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC_OVER_CODE:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB_OVER_NAME:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC_NAME:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.IE_VALUE_TYPE_BALANCE:
                    return Report.ReportCore.ConstValueType[model];
                default:
                    return null;
            }
        }
        protected ReportOrderPlanFindeal DimFindealSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanFindealType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_TRIP_NAME:
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_LIC_NAME:
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_PASP_NAME:
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_TRANSP_NAME:
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_CUSTOM_NAME:
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_INSURANCE_NAME:
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_MORF_NAME:
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_FAPRID_NAME:
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_GUARANTEE_NAME:
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_COMMERC_NAME:
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_BANK_NAME:
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_OTHER_NAME:
                case OrdinateType.IE_ARTICLE_INCOME_FINDEAL:
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_KB:
                    return Report.ReportCore.ConstFindeal[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_ORION:
                    return Report.ReportCore.ConstFindeal[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_OZM:
                    return Report.ReportCore.ConstFindeal[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF_LC:
                    return Report.ReportCore.ConstFindeal[model];
                default:
                    return null;
            }
        }
        protected ReportOrderPlanDealKind DimDealKindSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanDealKindType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.IE_FINREP_IE_SALE:
                    return Report.ReportCore.ConstDealKind[model];
                case OrdinateType.IE_FINREP_IE_BAY:
                    return Report.ReportCore.ConstDealKind[model];
                default:
                    return null;
            }
        }
        protected IList<ReportOrderPlanReport> DimReportQueryValueGet(ReportOrderPlanCategoryValue context, ReportOrderPlanReportType model, OrdinateType ord_type) {
            return Report.ReportCore.QueryReport(context, model);
        }
        protected IList<ReportOrderPlanFindeal> DimFindealQueryValueGet(ReportOrderPlanCategoryValue context, ReportOrderPlanFindealType model, OrdinateType ord_type) {
            return Report.ReportCore.QueryFindeal(context, model);
        }
        
    }
    
    public partial class ReportOrderPlanAxisCfArticleImport: MdfAxis<ReportOrderPlanReport,ReportOrderPlanCategoryValue,ReportOrderPlanTable,ReportOrderPlanTableCell,ReportOrderPlanDataPoint> {
        
        public enum OrdinateType {
            CF_REPORT_CF =  132,
            CF_VALUE_TYPE_BALANCE =  133,
            CF_ARTICLE_INCOME =  134,
            CF_ARTICLE_EXPENSE =  135,
            CF_ARTICLE_INCOME_ALL_CODE =  136,
            CF_ARTICLE_INCOME_SALE_VAL_OBL_CODE =  138,
            CF_ARTICLE_EXPENSE_ALL_CODE =  140,
            CF_ARTICLE_EXPENSE_GOOD_CODE =  141,
            CF_ARTICLE_EXPENSE_STAFF =  142,
            CF_ARTICLE_EXPENSE_PARTY_CODE =  143,
            CF_ARTICLE_EXPENSE_OTHER =  144,
            CF_ARTICLE_EXPENSE_ITOG_CODE =  145,
            CF_ARTICLE_EXPENSE_ITOG_FULL_CODE =  146,
            CF_ARTICLE_INCOME_ALL_NAME =  147,
            CF_ARTICLE_INCOME_SALE_VAL_OBL_NAME =  149,
            CF_ARTICLE_EXPENSE_ALL_NAME =  151,
            CF_ARTICLE_EXPENSE_GOOD_NAME =  152,
            CF_ARTICLE_EXPENSE_STAFF_KB =  154,
            CF_ARTICLE_EXPENSE_STAFF_ORION =  155,
            CF_ARTICLE_EXPENSE_STAFF_OZM =  156,
            CF_ARTICLE_EXPENSE_STAFF_LC =  157,
            CF_ARTICLE_EXPENSE_PARTY_NAME =  158,
            CF_ARTICLE_EXPENSE_OTHER_ALL_CODE =  159,
            CF_ARTICLE_EXPENSE_OTHER_TRIP_CODE =  160,
            CF_ARTICLE_EXPENSE_OTHER_LIC_CODE =  161,
            CF_ARTICLE_EXPENSE_OTHER_PASP_CODE =  162,
            CF_ARTICLE_EXPENSE_OTHER_TRANSP_CODE =  163,
            CF_ARTICLE_EXPENSE_OTHER_CUSTOM_CODE =  164,
            CF_ARTICLE_EXPENSE_OTHER_INSURANCE_CODE =  165,
            CF_ARTICLE_EXPENSE_OTHER_MORF_CODE =  166,
            CF_ARTICLE_EXPENSE_OTHER_FAPRID_CODE =  167,
            CF_ARTICLE_EXPENSE_OTHER_GUARANTEE_CODE =  168,
            CF_ARTICLE_EXPENSE_OTHER_COMMERC_CODE =  169,
            CF_ARTICLE_EXPENSE_OTHER_BANK_CODE =  170,
            CF_ARTICLE_EXPENSE_OTHER_OTHER_CODE =  171,
            CF_ARTICLE_EXPENSE_ITOG_NAME =  172,
            CF_ARTICLE_EXPENSE_ITOG_FULL_NAME =  173,
            CF_ARTICLE_EXPENSE_STAFF_KB_CODE =  175,
            CF_ARTICLE_EXPENSE_STAFF_ORION_CODE =  182,
            CF_ARTICLE_EXPENSE_STAFF_OZM_CODE =  189,
            CF_ARTICLE_EXPENSE_STAFF_LC_CODE =  196,
            CF_ARTICLE_EXPENSE_OTHER_ALL_NAME =  203,
            CF_ARTICLE_EXPENSE_OTHER_TRIP_NAME =  204,
            CF_ARTICLE_EXPENSE_OTHER_LIC_NAME =  205,
            CF_ARTICLE_EXPENSE_OTHER_PASP_NAME =  206,
            CF_ARTICLE_EXPENSE_OTHER_TRANSP_NAME =  207,
            CF_ARTICLE_EXPENSE_OTHER_CUSTOM_NAME =  208,
            CF_ARTICLE_EXPENSE_OTHER_INSURANCE_NAME =  209,
            CF_ARTICLE_EXPENSE_OTHER_MORF_NAME =  210,
            CF_ARTICLE_EXPENSE_OTHER_FAPRID_NAME =  211,
            CF_ARTICLE_EXPENSE_OTHER_GUARANTEE_NAME =  212,
            CF_ARTICLE_EXPENSE_OTHER_COMMERC_NAME =  213,
            CF_ARTICLE_EXPENSE_OTHER_BANK_NAME =  214,
            CF_ARTICLE_EXPENSE_OTHER_OTHER_NAME =  215,
            CF_ARTICLE_EXPENSE_STAFF_KB_NAME =  216,
            CF_ARTICLE_EXPENSE_STAFF_ORION_NAME =  223,
            CF_ARTICLE_EXPENSE_STAFF_OZM_NAME =  230,
            CF_ARTICLE_EXPENSE_STAFF_LC_NAME =  237,
            CF_FINREP =  709,
            CF_FINREP_VALUTA =  710,
            CF_ARTICLE_INCOME_FINDEAL_SALEPLAN =  720,
            CF_ARTICLE_INCOME_SALE_VAL_OBL =  722,
            CF_ARTICLE_INCOME_SALE_VAL_REP =  723,
            CF_ARTICLE_INCOME_SALE_VAL_OBL_COST_CODE =  724,
            CF_ARTICLE_INCOME_SALE_VAL_OBL_PRE_CODE =  725,
            CF_ARTICLE_INCOME_SALE_VAL_OBL_POST_CODE =  726,
            CF_ARTICLE_INCOME_SALE_VAL_REP_CODE =  727,
            CF_ARTICLE_INCOME_SALE_VAL_REP_PRE_CODE =  728,
            CF_ARTICLE_INCOME_SALE_VAL_REP_POST_CODE =  729,
            CF_ARTICLE_INCOME_SALE_VAL_REP_COST_CODE =  730,
            CF_ARTICLE_INCOME_SALE_VAL_OBL_COST_NAME =  731,
            CF_ARTICLE_INCOME_SALE_VAL_OBL_PRE_NAME =  732,
            CF_ARTICLE_INCOME_SALE_VAL_OBL_POST_NAME =  733,
            CF_ARTICLE_INCOME_SALE_VAL_REP_NAME =  734,
            CF_ARTICLE_INCOME_SALE_VAL_REP_PRE_NAME =  735,
            CF_ARTICLE_INCOME_SALE_VAL_REP_POST_NAME =  736,
            CF_ARTICLE_INCOME_SALE_VAL_REP_COST_NAME =  737,
            CF_ARTICLE_INCOME_SALE_REVENUE =  738,
            CF_ARTICLE_EXPENSE_OWN =  739,
            CF_ARTICLE_EXPENSE_OWN_CODE =  740,
            CF_ARTICLE_EXPENSE_OWN_NAME =  741,
        }
        
        public class Ordinate : MdfAxisOrdinate {
            private OrdinateType _OrdinateType;
            public OrdinateType OrdinateType{
                get { return _OrdinateType; }
            }
            
            public Ordinate(ReportOrderPlanAxisCfArticleImport axis, MdfAxisOrdinateValueType value_type, OrdinateType ord_type): base(axis, value_type)  {
                _OrdinateType = ord_type;
            }
        }
        
        public ReportOrderPlanAxisCfArticleImport(ReportOrderPlanReport report): base(report) { }
        
        public override void OrdinatesFill() {
            Root = OrdinateCreate(null, OrdinateType.CF_REPORT_CF);
        }
        
        protected Ordinate OrdinateCreate(Ordinate ord_up, OrdinateType ord_type) {
            Ordinate ord;
            Ordinate sub_ord;
            Int32 sort_order = 0;
            ReportOrderPlanCategoryValue ord_up_category_value = ord_up?.CategoryValue ?? ReportOrderPlanCategoryValue.DefaultCategoryValue;
            switch (ord_type) {
                case OrdinateType.CF_REPORT_CF:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_REPORT_CF);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanReport> cf_report_cf_objs = DimReportQueryValueGet(ord.CategoryValue, ReportOrderPlanReportType.REPORT, OrdinateType.CF_REPORT_CF);
                    sort_order = 0;
                    foreach (var cf_report_cf_obj in cf_report_cf_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CF_REPORT_CF);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimReportCategoryValueLocate(ord.CategoryValue, cf_report_cf_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.CF_FINREP);
                    }
                    return ord;
                case OrdinateType.CF_VALUE_TYPE_BALANCE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_VALUE_TYPE_BALANCE);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.BALANCE, OrdinateType.CF_VALUE_TYPE_BALANCE));
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_INCOME);
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE);
                    return ord;
                case OrdinateType.CF_ARTICLE_INCOME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_INCOME);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_INCOME, OrdinateType.CF_ARTICLE_INCOME));
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_INCOME_ALL_CODE);
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_INCOME_SALE_REVENUE);
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE, OrdinateType.CF_ARTICLE_EXPENSE));
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_ALL_CODE);
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_PARTY_CODE);
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_ITOG_CODE);
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_ITOG_FULL_CODE);
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_OWN);
                    return ord;
                case OrdinateType.CF_ARTICLE_INCOME_ALL_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_INCOME_ALL_CODE);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_INCOME_ALL_NAME);
                    return ord;
                case OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_OBL_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_OBL_CODE);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_OBL_NAME);
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_ALL_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_ALL_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 5;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE, OrdinateType.CF_ARTICLE_EXPENSE_ALL_CODE));
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_ALL_NAME);
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_GOOD_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_GOOD_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD, OrdinateType.CF_ARTICLE_EXPENSE_GOOD_CODE));
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_GOOD_NAME);
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_STAFF:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_STAFF);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_STAFF, OrdinateType.CF_ARTICLE_EXPENSE_STAFF));
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_STAFF_KB);
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_STAFF_ORION);
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_STAFF_OZM);
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_STAFF_LC);
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_PARTY_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_PARTY_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_PARTY, OrdinateType.CF_ARTICLE_EXPENSE_PARTY_CODE));
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_PARTY_NAME);
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_OTHER);
                    ord.Up = ord_up;
                    ord.SortOrder = 40;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER, OrdinateType.CF_ARTICLE_EXPENSE_OTHER));
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_ALL_CODE);
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_TRIP_CODE);
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_LIC_CODE);
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_PASP_CODE);
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_TRANSP_CODE);
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_CUSTOM_CODE);
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_INSURANCE_CODE);
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_MORF_CODE);
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_FAPRID_CODE);
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_GUARANTEE_CODE);
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_COMMERC_CODE);
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_BANK_CODE);
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_OTHER_CODE);
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_ITOG_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_ITOG_CODE);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 50;
                    ord.IsIntegrated = false;
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_ITOG_NAME);
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_ITOG_FULL_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_ITOG_FULL_CODE);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 60;
                    ord.IsIntegrated = false;
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_ITOG_FULL_NAME);
                    return ord;
                case OrdinateType.CF_ARTICLE_INCOME_ALL_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_INCOME_ALL_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_OBL_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_OBL_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_ALL_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_ALL_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 5;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_GOOD_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_GOOD_NAME);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD, OrdinateType.CF_ARTICLE_EXPENSE_GOOD_NAME));
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_STAFF_KB:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_STAFF_KB);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimFindealCategoryValueLocate(ord_up_category_value, DimFindealSingleValueGet(ord_up_category_value, ReportOrderPlanFindealType.FINDEAL_STAFF_KB, OrdinateType.CF_ARTICLE_EXPENSE_STAFF_KB));
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_STAFF_KB_CODE);
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_STAFF_ORION:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_STAFF_ORION);
                    ord.Up = ord_up;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimFindealCategoryValueLocate(ord_up_category_value, DimFindealSingleValueGet(ord_up_category_value, ReportOrderPlanFindealType.FINDEAL_STAFF_ORION, OrdinateType.CF_ARTICLE_EXPENSE_STAFF_ORION));
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_STAFF_ORION_CODE);
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_STAFF_OZM:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_STAFF_OZM);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimFindealCategoryValueLocate(ord_up_category_value, DimFindealSingleValueGet(ord_up_category_value, ReportOrderPlanFindealType.FINDEAL_STAFF_OZM, OrdinateType.CF_ARTICLE_EXPENSE_STAFF_OZM));
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_STAFF_OZM_CODE);
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_STAFF_LC:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_STAFF_LC);
                    ord.Up = ord_up;
                    ord.SortOrder = 40;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimFindealCategoryValueLocate(ord_up_category_value, DimFindealSingleValueGet(ord_up_category_value, ReportOrderPlanFindealType.FINDEAL_STAFF_LC, OrdinateType.CF_ARTICLE_EXPENSE_STAFF_LC));
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_STAFF_LC_CODE);
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_PARTY_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_PARTY_NAME);
                    ord.Up = ord_up;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_PARTY, OrdinateType.CF_ARTICLE_EXPENSE_PARTY_NAME));
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_ALL_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_ALL_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 5;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_ALL_CODE));
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_ALL_NAME);
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_TRIP_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_TRIP_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_TRIP, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_TRIP_CODE));
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_TRIP_NAME);
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_LIC_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_LIC_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_LIC, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_LIC_CODE));
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_LIC_NAME);
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_PASP_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_PASP_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_PASP, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_PASP_CODE));
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_PASP_NAME);
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_TRANSP_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_TRANSP_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 40;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_TRANSP, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_TRANSP_CODE));
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_TRANSP_NAME);
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_CUSTOM_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_CUSTOM_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 50;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_CUSTOM, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_CUSTOM_CODE));
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_CUSTOM_NAME);
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_INSURANCE_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_INSURANCE_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 60;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_INSURANCE, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_INSURANCE_CODE));
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_INSURANCE_NAME);
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_MORF_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_MORF_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 70;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_MORF, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_MORF_CODE));
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_MORF_NAME);
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_FAPRID_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_FAPRID_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 80;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_FAPRID, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_FAPRID_CODE));
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_FAPRID_NAME);
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_GUARANTEE_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_GUARANTEE_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 90;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_GUARANTEE, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_GUARANTEE_CODE));
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_GUARANTEE_NAME);
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_COMMERC_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_COMMERC_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 100;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_COMMERC, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_COMMERC_CODE));
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_COMMERC_NAME);
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_BANK_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_BANK_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 110;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_BANK, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_BANK_CODE));
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_BANK_NAME);
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_OTHER_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_OTHER_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 120;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_OTHER, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_OTHER_CODE));
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_OTHER_NAME);
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_ITOG_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_ITOG_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 5;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_ITOG_FULL_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_ITOG_FULL_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 5;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_STAFF_KB_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_STAFF_KB_CODE);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_STAFF_KB_NAME);
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_STAFF_ORION_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_STAFF_ORION_CODE);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_STAFF_ORION_NAME);
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_STAFF_OZM_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_STAFF_OZM_CODE);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_STAFF_OZM_NAME);
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_STAFF_LC_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_STAFF_LC_CODE);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_STAFF_LC_NAME);
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_ALL_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_ALL_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 5;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_TRIP_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_TRIP_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 5;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> cf_article_expense_other_trip_name_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_OTHER, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_TRIP_NAME);
                    sort_order = 0;
                    foreach (var cf_article_expense_other_trip_name_obj in cf_article_expense_other_trip_name_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_TRIP_NAME);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, cf_article_expense_other_trip_name_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                    }
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_LIC_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_LIC_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 5;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> cf_article_expense_other_lic_name_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_OTHER, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_LIC_NAME);
                    sort_order = 0;
                    foreach (var cf_article_expense_other_lic_name_obj in cf_article_expense_other_lic_name_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_LIC_NAME);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, cf_article_expense_other_lic_name_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                    }
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_PASP_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_PASP_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 5;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> cf_article_expense_other_pasp_name_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_OTHER, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_PASP_NAME);
                    sort_order = 0;
                    foreach (var cf_article_expense_other_pasp_name_obj in cf_article_expense_other_pasp_name_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_PASP_NAME);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, cf_article_expense_other_pasp_name_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                    }
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_TRANSP_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_TRANSP_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 5;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> cf_article_expense_other_transp_name_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_OTHER, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_TRANSP_NAME);
                    sort_order = 0;
                    foreach (var cf_article_expense_other_transp_name_obj in cf_article_expense_other_transp_name_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_TRANSP_NAME);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, cf_article_expense_other_transp_name_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                    }
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_CUSTOM_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_CUSTOM_NAME);
                    ord.Up = ord_up;
                    ord.SortOrder = 5;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_CUSTOM_NAME));
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_INSURANCE_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_INSURANCE_NAME);
                    ord.Up = ord_up;
                    ord.SortOrder = 5;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_INSURANCE_NAME));
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_MORF_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_MORF_NAME);
                    ord.Up = ord_up;
                    ord.SortOrder = 5;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_MORF_NAME));
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_FAPRID_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_FAPRID_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 5;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> cf_article_expense_other_faprid_name_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_OTHER, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_FAPRID_NAME);
                    sort_order = 0;
                    foreach (var cf_article_expense_other_faprid_name_obj in cf_article_expense_other_faprid_name_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_FAPRID_NAME);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, cf_article_expense_other_faprid_name_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                    }
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_GUARANTEE_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_GUARANTEE_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 5;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> cf_article_expense_other_guarantee_name_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_OTHER, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_GUARANTEE_NAME);
                    sort_order = 0;
                    foreach (var cf_article_expense_other_guarantee_name_obj in cf_article_expense_other_guarantee_name_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_GUARANTEE_NAME);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, cf_article_expense_other_guarantee_name_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                    }
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_COMMERC_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_COMMERC_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 5;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> cf_article_expense_other_commerc_name_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_OTHER, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_COMMERC_NAME);
                    sort_order = 0;
                    foreach (var cf_article_expense_other_commerc_name_obj in cf_article_expense_other_commerc_name_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_COMMERC_NAME);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, cf_article_expense_other_commerc_name_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                    }
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_BANK_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_BANK_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 5;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> cf_article_expense_other_bank_name_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_OTHER, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_BANK_NAME);
                    sort_order = 0;
                    foreach (var cf_article_expense_other_bank_name_obj in cf_article_expense_other_bank_name_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_BANK_NAME);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, cf_article_expense_other_bank_name_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                    }
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_OTHER_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_OTHER_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 5;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> cf_article_expense_other_other_name_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_OTHER, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_OTHER_NAME);
                    sort_order = 0;
                    foreach (var cf_article_expense_other_other_name_obj in cf_article_expense_other_other_name_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_OTHER_NAME);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, cf_article_expense_other_other_name_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                    }
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_STAFF_KB_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_STAFF_KB_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_STAFF_ORION_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_STAFF_ORION_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_STAFF_OZM_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_STAFF_OZM_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_STAFF_LC_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_STAFF_LC_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.CF_FINREP:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_FINREP);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimFinrepCategoryValueLocate(ord_up_category_value, DimFinrepSingleValueGet(ord_up_category_value, ReportOrderPlanFinrepType.FINREP_CF, OrdinateType.CF_FINREP));
                    OrdinateCreate(ord, OrdinateType.CF_FINREP_VALUTA);
                    return ord;
                case OrdinateType.CF_FINREP_VALUTA:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_FINREP_VALUTA);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_REPORT_VALUTA, OrdinateType.CF_FINREP_VALUTA));
                    OrdinateCreate(ord, OrdinateType.CF_VALUE_TYPE_BALANCE);
                    return ord;
                case OrdinateType.CF_ARTICLE_INCOME_FINDEAL_SALEPLAN:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_INCOME_FINDEAL_SALEPLAN);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> cf_article_income_findeal_saleplan_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_SALE_PLAN, OrdinateType.CF_ARTICLE_INCOME_FINDEAL_SALEPLAN);
                    sort_order = 0;
                    foreach (var cf_article_income_findeal_saleplan_obj in cf_article_income_findeal_saleplan_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CF_ARTICLE_INCOME_FINDEAL_SALEPLAN);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, cf_article_income_findeal_saleplan_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_OBL);
                        OrdinateCreate(sub_ord, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_REP);
                    }
                    return ord;
                case OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_OBL:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_OBL);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_FINDEAL_VALUTA, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_OBL));
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_OBL_CODE);
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_OBL_COST_CODE);
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_OBL_PRE_CODE);
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_OBL_POST_CODE);
                    return ord;
                case OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_REP:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_REP);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_FINDEAL_VALUTA, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_REP));
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_REP_CODE);
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_REP_PRE_CODE);
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_REP_POST_CODE);
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_REP_COST_CODE);
                    return ord;
                case OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_OBL_COST_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_OBL_COST_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 40;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimFinrepCategoryValueLocate(ord_up_category_value, DimFinrepSingleValueGet(ord_up_category_value, ReportOrderPlanFinrepType.FINREP_IE, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_OBL_COST_CODE));
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_OBL_COST_NAME);
                    return ord;
                case OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_OBL_PRE_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_OBL_PRE_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimPayTypeCategoryValueLocate(ord_up_category_value, DimPayTypeSingleValueGet(ord_up_category_value, ReportOrderPlanPayTypeType.PREPAYMENT, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_OBL_PRE_CODE));
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_OBL_PRE_NAME);
                    return ord;
                case OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_OBL_POST_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_OBL_POST_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimPayTypeCategoryValueLocate(ord_up_category_value, DimPayTypeSingleValueGet(ord_up_category_value, ReportOrderPlanPayTypeType.POSTPAYMENT, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_OBL_POST_CODE));
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_OBL_POST_NAME);
                    return ord;
                case OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_REP_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_REP_CODE);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_REP_NAME);
                    return ord;
                case OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_REP_PRE_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_REP_PRE_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimPayTypeCategoryValueLocate(ord_up_category_value, DimPayTypeSingleValueGet(ord_up_category_value, ReportOrderPlanPayTypeType.PREPAYMENT, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_REP_PRE_CODE));
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_REP_PRE_NAME);
                    return ord;
                case OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_REP_POST_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_REP_POST_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimPayTypeCategoryValueLocate(ord_up_category_value, DimPayTypeSingleValueGet(ord_up_category_value, ReportOrderPlanPayTypeType.POSTPAYMENT, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_REP_POST_CODE));
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_REP_POST_NAME);
                    return ord;
                case OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_REP_COST_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_REP_COST_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 40;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimFinrepCategoryValueLocate(ord_up_category_value, DimFinrepSingleValueGet(ord_up_category_value, ReportOrderPlanFinrepType.FINREP_IE, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_REP_COST_CODE));
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_REP_COST_NAME);
                    return ord;
                case OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_OBL_COST_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_OBL_COST_NAME);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.SUMMALL, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_OBL_COST_NAME));
                    return ord;
                case OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_OBL_PRE_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_OBL_PRE_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_OBL_POST_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_OBL_POST_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_REP_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_REP_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_REP_PRE_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_REP_PRE_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_REP_POST_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_REP_POST_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_REP_COST_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_REP_COST_NAME);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.SUMMALL, OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_REP_COST_NAME));
                    return ord;
                case OrdinateType.CF_ARTICLE_INCOME_SALE_REVENUE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_INCOME_SALE_REVENUE);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_INCOME_SALE_REVENUE, OrdinateType.CF_ARTICLE_INCOME_SALE_REVENUE));
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_INCOME_FINDEAL_SALEPLAN);
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_OWN:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_OWN);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OWN, OrdinateType.CF_ARTICLE_EXPENSE_OWN));
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_GOOD_CODE);
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_STAFF);
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_OTHER);
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_OWN_CODE);
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_OWN_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_OWN_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 5;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE, OrdinateType.CF_ARTICLE_EXPENSE_OWN_CODE));
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_OWN_NAME);
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_OWN_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_OWN_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 5;
                    ord.IsIntegrated = false;
                    return ord;
                default:
                    return null;
            }
        }
        
        protected ReportOrderPlanCategoryValue DimReportCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanReport obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimReport = obj;
            value.DimEntity = value.DimReport?.Entity;
            value.DimOrder = value.DimReport?.Order;
            value.DimVatMode = value.DimOrder?.VatMode;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimValueTypeCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanValueType obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimValueType = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimArticleCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanArticle obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimArticle = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimFindealCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanFindeal obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimFindeal = obj;
            value.DimDeal = value.DimFindeal?.Deal;
            value.DimParty = value.DimDeal?.Party;
            value.DimPartyKind = value.DimParty?.Kind;
            value.DimDealKind = value.DimDeal?.Kind;
            value.DimValutaObligation = value.DimFindeal?.Valuta;
            value.DimVatModeObligation = value.DimFindeal?.VatMode;
            value.DimArticle = value.DimFindeal?.Article;
            value.DimFindealKind = value.DimFindeal?.Kind;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimFinrepCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanFinrep obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimFinrep = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimValutaCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanValuta obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimValuta = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimPayTypeCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanPayType obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimPayType = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanValueType DimValueTypeSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanValueTypeType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.CF_VALUE_TYPE_BALANCE:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_OBL_COST_NAME:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_REP_COST_NAME:
                    return Report.ReportCore.ConstValueType[model];
                default:
                    return null;
            }
        }
        protected ReportOrderPlanArticle DimArticleSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanArticleType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.CF_ARTICLE_INCOME:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.CF_ARTICLE_EXPENSE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.CF_ARTICLE_EXPENSE_ALL_CODE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.CF_ARTICLE_EXPENSE_GOOD_CODE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.CF_ARTICLE_EXPENSE_STAFF:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.CF_ARTICLE_EXPENSE_PARTY_CODE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.CF_ARTICLE_EXPENSE_GOOD_NAME:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.CF_ARTICLE_EXPENSE_PARTY_NAME:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_ALL_CODE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_TRIP_CODE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_LIC_CODE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_PASP_CODE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_TRANSP_CODE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_CUSTOM_CODE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_INSURANCE_CODE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_MORF_CODE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_FAPRID_CODE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_GUARANTEE_CODE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_COMMERC_CODE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_BANK_CODE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_OTHER_CODE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_CUSTOM_NAME:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_INSURANCE_NAME:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_MORF_NAME:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.CF_ARTICLE_INCOME_SALE_REVENUE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.CF_ARTICLE_EXPENSE_OWN:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.CF_ARTICLE_EXPENSE_OWN_CODE:
                    return Report.ReportCore.ConstArticle[model];
                default:
                    return null;
            }
        }
        protected ReportOrderPlanFindeal DimFindealSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanFindealType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.CF_ARTICLE_EXPENSE_STAFF_KB:
                    return Report.ReportCore.ConstFindeal[model];
                case OrdinateType.CF_ARTICLE_EXPENSE_STAFF_ORION:
                    return Report.ReportCore.ConstFindeal[model];
                case OrdinateType.CF_ARTICLE_EXPENSE_STAFF_OZM:
                    return Report.ReportCore.ConstFindeal[model];
                case OrdinateType.CF_ARTICLE_EXPENSE_STAFF_LC:
                    return Report.ReportCore.ConstFindeal[model];
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_TRIP_NAME:
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_LIC_NAME:
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_PASP_NAME:
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_TRANSP_NAME:
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_FAPRID_NAME:
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_GUARANTEE_NAME:
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_COMMERC_NAME:
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_BANK_NAME:
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_OTHER_NAME:
                case OrdinateType.CF_ARTICLE_INCOME_FINDEAL_SALEPLAN:
                default:
                    return null;
            }
        }
        protected ReportOrderPlanFinrep DimFinrepSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanFinrepType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.CF_FINREP:
                    return Report.ReportCore.ConstFinrep[model];
                case OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_OBL_COST_CODE:
                    return Report.ReportCore.ConstFinrep[model];
                case OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_REP_COST_CODE:
                    return Report.ReportCore.ConstFinrep[model];
                default:
                    return null;
            }
        }
        protected ReportOrderPlanValuta DimValutaSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanValutaType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.CF_FINREP_VALUTA:
                    return context.DimReport?.Valuta;
                case OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_OBL:
                    return context.DimFindeal?.Valuta;
                case OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_REP:
                    return context.DimFindeal?.Valuta;
                default:
                    return null;
            }
        }
        protected ReportOrderPlanPayType DimPayTypeSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanPayTypeType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_OBL_PRE_CODE:
                    return Report.ReportCore.ConstPayType[model];
                case OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_OBL_POST_CODE:
                    return Report.ReportCore.ConstPayType[model];
                case OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_REP_PRE_CODE:
                    return Report.ReportCore.ConstPayType[model];
                case OrdinateType.CF_ARTICLE_INCOME_SALE_VAL_REP_POST_CODE:
                    return Report.ReportCore.ConstPayType[model];
                default:
                    return null;
            }
        }
        protected IList<ReportOrderPlanReport> DimReportQueryValueGet(ReportOrderPlanCategoryValue context, ReportOrderPlanReportType model, OrdinateType ord_type) {
            return Report.ReportCore.QueryReport(context, model);
        }
        protected IList<ReportOrderPlanFindeal> DimFindealQueryValueGet(ReportOrderPlanCategoryValue context, ReportOrderPlanFindealType model, OrdinateType ord_type) {
            return Report.ReportCore.QueryFindeal(context, model);
        }
        
    }
    
    public partial class ReportOrderPlanAxisIeArticle: MdfAxis<ReportOrderPlanReport,ReportOrderPlanCategoryValue,ReportOrderPlanTable,ReportOrderPlanTableCell,ReportOrderPlanDataPoint> {
        
        public enum OrdinateType {
            REPORT =  244,
            IE_VALUE_TYPE_BALANCE =  245,
            IE_ARTICLE_INCOME =  246,
            IE_ARTICLE_EXPENSE =  247,
            IE_ARTICLE_EXPENSE_ALL =  248,
            IE_ARTICLE_EXPENSE_GOOD =  249,
            IE_ARTICLE_EXPENSE_STAFF =  250,
            IE_ARTICLE_EXPENSE_PARTY =  251,
            IE_ARTICLE_EXPENSE_OTHER =  252,
            IE_ARTICLE_EXPENSE_GOOD_ALL =  253,
            IE_ARTICLE_EXPENSE_GOOD_MATERIAL =  254,
            IE_ARTICLE_EXPENSE_GOOD_COMPONENT =  255,
            IE_ARTICLE_EXPENSE_OTHER_ALL =  256,
            IE_ARTICLE_EXPENSE_OTHER_INSURANCE =  257,
            IE_ARTICLE_EXPENSE_OTHER_OTHER =  258,
        }
        
        public class Ordinate : MdfAxisOrdinate {
            private OrdinateType _OrdinateType;
            public OrdinateType OrdinateType{
                get { return _OrdinateType; }
            }
            
            public Ordinate(ReportOrderPlanAxisIeArticle axis, MdfAxisOrdinateValueType value_type, OrdinateType ord_type): base(axis, value_type)  {
                _OrdinateType = ord_type;
            }
        }
        
        public ReportOrderPlanAxisIeArticle(ReportOrderPlanReport report): base(report) { }
        
        public override void OrdinatesFill() {
            Root = OrdinateCreate(null, OrdinateType.REPORT);
        }
        
        protected Ordinate OrdinateCreate(Ordinate ord_up, OrdinateType ord_type) {
            Ordinate ord;
            Ordinate sub_ord;
            Int32 sort_order = 0;
            ReportOrderPlanCategoryValue ord_up_category_value = ord_up?.CategoryValue ?? ReportOrderPlanCategoryValue.DefaultCategoryValue;
            switch (ord_type) {
                case OrdinateType.REPORT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.REPORT);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanReport> report_objs = DimReportQueryValueGet(ord.CategoryValue, ReportOrderPlanReportType.REPORT, OrdinateType.REPORT);
                    sort_order = 0;
                    foreach (var report_obj in report_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.REPORT);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimReportCategoryValueLocate(ord.CategoryValue, report_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.IE_VALUE_TYPE_BALANCE);
                    }
                    return ord;
                case OrdinateType.IE_VALUE_TYPE_BALANCE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_VALUE_TYPE_BALANCE);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimFinrepCategoryValueLocate(ord_up_category_value, DimFinrepSingleValueGet(ord_up_category_value, ReportOrderPlanFinrepType.FINREP_IE, OrdinateType.IE_VALUE_TYPE_BALANCE));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_INCOME);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE);
                    return ord;
                case OrdinateType.IE_ARTICLE_INCOME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_INCOME);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_INCOME, OrdinateType.IE_ARTICLE_INCOME));
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE, OrdinateType.IE_ARTICLE_EXPENSE));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_ALL);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_GOOD);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_STAFF);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_PARTY);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_OTHER);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_ALL:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_ALL);
                    ord.Up = ord_up;
                    ord.SortOrder = 5;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE, OrdinateType.IE_ARTICLE_EXPENSE_ALL));
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_GOOD:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_GOOD);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD, OrdinateType.IE_ARTICLE_EXPENSE_GOOD));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_GOOD_ALL);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_GOOD_MATERIAL);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_GOOD_COMPONENT);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_STAFF);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_STAFF, OrdinateType.IE_ARTICLE_EXPENSE_STAFF));
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_PARTY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_PARTY);
                    ord.Up = ord_up;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_PARTY, OrdinateType.IE_ARTICLE_EXPENSE_PARTY));
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_OTHER);
                    ord.Up = ord_up;
                    ord.SortOrder = 40;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER, OrdinateType.IE_ARTICLE_EXPENSE_OTHER));
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_ALL);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_INSURANCE);
                    OrdinateCreate(ord, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_OTHER);
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_GOOD_ALL:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_GOOD_ALL);
                    ord.Up = ord_up;
                    ord.SortOrder = 5;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD, OrdinateType.IE_ARTICLE_EXPENSE_GOOD_ALL));
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_GOOD_MATERIAL:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_GOOD_MATERIAL);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD_MATERIAL, OrdinateType.IE_ARTICLE_EXPENSE_GOOD_MATERIAL));
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_GOOD_COMPONENT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_GOOD_COMPONENT);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD_COMPONENT, OrdinateType.IE_ARTICLE_EXPENSE_GOOD_COMPONENT));
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_ALL:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_ALL);
                    ord.Up = ord_up;
                    ord.SortOrder = 5;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_INSURANCE, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_ALL));
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_INSURANCE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_INSURANCE);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_INSURANCE, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_INSURANCE));
                    return ord;
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_OTHER:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_ARTICLE_EXPENSE_OTHER_OTHER);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    return ord;
                default:
                    return null;
            }
        }
        
        protected ReportOrderPlanCategoryValue DimReportCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanReport obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimReport = obj;
            value.DimEntity = value.DimReport?.Entity;
            value.DimOrder = value.DimReport?.Order;
            value.DimVatMode = value.DimOrder?.VatMode;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimFinrepCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanFinrep obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimFinrep = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimArticleCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanArticle obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimArticle = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanFinrep DimFinrepSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanFinrepType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.IE_VALUE_TYPE_BALANCE:
                    return Report.ReportCore.ConstFinrep[model];
                default:
                    return null;
            }
        }
        protected ReportOrderPlanArticle DimArticleSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanArticleType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.IE_ARTICLE_INCOME:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.IE_ARTICLE_EXPENSE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_ALL:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_GOOD:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_STAFF:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_PARTY:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_GOOD_ALL:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_GOOD_MATERIAL:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_GOOD_COMPONENT:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_ALL:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.IE_ARTICLE_EXPENSE_OTHER_INSURANCE:
                    return Report.ReportCore.ConstArticle[model];
                default:
                    return null;
            }
        }
        protected IList<ReportOrderPlanReport> DimReportQueryValueGet(ReportOrderPlanCategoryValue context, ReportOrderPlanReportType model, OrdinateType ord_type) {
            return Report.ReportCore.QueryReport(context, model);
        }
        
    }
    
    public partial class ReportOrderPlanAxisCfArticle: MdfAxis<ReportOrderPlanReport,ReportOrderPlanCategoryValue,ReportOrderPlanTable,ReportOrderPlanTableCell,ReportOrderPlanDataPoint> {
        
        public enum OrdinateType {
            CF_REPORT_CF =  259,
            CF_VALUE_TYPE_BALANCE =  260,
            CF_ARTICLE_INCOME =  261,
            CF_ARTICLE_EXPENSE =  262,
            CF_ARTICLE_EXPENSE_ALL =  263,
            CF_ARTICLE_EXPENSE_GOOD =  264,
            CF_ARTICLE_EXPENSE_STAFF =  265,
            CF_ARTICLE_EXPENSE_PARTY =  266,
            CF_ARTICLE_EXPENSE_OTHER =  267,
            CF_ARTICLE_EXPENSE_GOOD_ALL =  268,
            CF_ARTICLE_EXPENSE_GOOD_MATERIAL =  269,
            CF_ARTICLE_EXPENSE_GOOD_COMPONENT =  270,
            CF_ARTICLE_EXPENSE_OTHER_ALL =  271,
            CF_ARTICLE_EXPENSE_OTHER_INSURANCE =  272,
            CF_ARTICLE_EXPENSE_OTHER_OTHER =  273,
        }
        
        public class Ordinate : MdfAxisOrdinate {
            private OrdinateType _OrdinateType;
            public OrdinateType OrdinateType{
                get { return _OrdinateType; }
            }
            
            public Ordinate(ReportOrderPlanAxisCfArticle axis, MdfAxisOrdinateValueType value_type, OrdinateType ord_type): base(axis, value_type)  {
                _OrdinateType = ord_type;
            }
        }
        
        public ReportOrderPlanAxisCfArticle(ReportOrderPlanReport report): base(report) { }
        
        public override void OrdinatesFill() {
            Root = OrdinateCreate(null, OrdinateType.CF_REPORT_CF);
        }
        
        protected Ordinate OrdinateCreate(Ordinate ord_up, OrdinateType ord_type) {
            Ordinate ord;
            Ordinate sub_ord;
            Int32 sort_order = 0;
            ReportOrderPlanCategoryValue ord_up_category_value = ord_up?.CategoryValue ?? ReportOrderPlanCategoryValue.DefaultCategoryValue;
            switch (ord_type) {
                case OrdinateType.CF_REPORT_CF:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_REPORT_CF);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.BALANCE, OrdinateType.CF_REPORT_CF));
                    OrdinateCreate(ord, OrdinateType.CF_VALUE_TYPE_BALANCE);
                    return ord;
                case OrdinateType.CF_VALUE_TYPE_BALANCE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_VALUE_TYPE_BALANCE);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.BALANCE, OrdinateType.CF_VALUE_TYPE_BALANCE));
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_INCOME);
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE);
                    return ord;
                case OrdinateType.CF_ARTICLE_INCOME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_INCOME);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_INCOME, OrdinateType.CF_ARTICLE_INCOME));
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE, OrdinateType.CF_ARTICLE_EXPENSE));
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_ALL);
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_GOOD);
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_STAFF);
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_PARTY);
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_OTHER);
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_ALL:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_ALL);
                    ord.Up = ord_up;
                    ord.SortOrder = 5;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE, OrdinateType.CF_ARTICLE_EXPENSE_ALL));
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_GOOD:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_GOOD);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD, OrdinateType.CF_ARTICLE_EXPENSE_GOOD));
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_GOOD_ALL);
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_GOOD_MATERIAL);
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_GOOD_COMPONENT);
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_STAFF:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_STAFF);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_STAFF, OrdinateType.CF_ARTICLE_EXPENSE_STAFF));
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_PARTY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_PARTY);
                    ord.Up = ord_up;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_PARTY, OrdinateType.CF_ARTICLE_EXPENSE_PARTY));
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_OTHER);
                    ord.Up = ord_up;
                    ord.SortOrder = 40;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER, OrdinateType.CF_ARTICLE_EXPENSE_OTHER));
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_ALL);
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_INSURANCE);
                    OrdinateCreate(ord, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_OTHER);
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_GOOD_ALL:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_GOOD_ALL);
                    ord.Up = ord_up;
                    ord.SortOrder = 5;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD, OrdinateType.CF_ARTICLE_EXPENSE_GOOD_ALL));
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_GOOD_MATERIAL:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_GOOD_MATERIAL);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD_MATERIAL, OrdinateType.CF_ARTICLE_EXPENSE_GOOD_MATERIAL));
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_GOOD_COMPONENT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_GOOD_COMPONENT);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD_COMPONENT, OrdinateType.CF_ARTICLE_EXPENSE_GOOD_COMPONENT));
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_ALL:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_ALL);
                    ord.Up = ord_up;
                    ord.SortOrder = 5;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_ALL));
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_INSURANCE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_INSURANCE);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_INSURANCE, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_INSURANCE));
                    return ord;
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_OTHER:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_OTHER);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_OTHER_OTHER, OrdinateType.CF_ARTICLE_EXPENSE_OTHER_OTHER));
                    return ord;
                default:
                    return null;
            }
        }
        
        protected ReportOrderPlanCategoryValue DimValueTypeCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanValueType obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimValueType = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimArticleCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanArticle obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimArticle = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanValueType DimValueTypeSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanValueTypeType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.CF_REPORT_CF:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.CF_VALUE_TYPE_BALANCE:
                    return Report.ReportCore.ConstValueType[model];
                default:
                    return null;
            }
        }
        protected ReportOrderPlanArticle DimArticleSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanArticleType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.CF_ARTICLE_INCOME:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.CF_ARTICLE_EXPENSE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.CF_ARTICLE_EXPENSE_ALL:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.CF_ARTICLE_EXPENSE_GOOD:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.CF_ARTICLE_EXPENSE_STAFF:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.CF_ARTICLE_EXPENSE_PARTY:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.CF_ARTICLE_EXPENSE_GOOD_ALL:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.CF_ARTICLE_EXPENSE_GOOD_MATERIAL:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.CF_ARTICLE_EXPENSE_GOOD_COMPONENT:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_ALL:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_INSURANCE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.CF_ARTICLE_EXPENSE_OTHER_OTHER:
                    return Report.ReportCore.ConstArticle[model];
                default:
                    return null;
            }
        }
        
    }
    
    public partial class ReportOrderPlanAxisFindeal: MdfAxis<ReportOrderPlanReport,ReportOrderPlanCategoryValue,ReportOrderPlanTable,ReportOrderPlanTableCell,ReportOrderPlanDataPoint> {
        
        public enum OrdinateType {
            FINDEAL_REPORT =  274,
            FINDEAL_ALL =  275,
            FINDEAL_FINDEAL =  276,
            FINDEAL_ALL_PARTY =  277,
            FINDEAL_ALL_NUMBER =  279,
            FINDEAL_ALL_DATE =  280,
            FINDEAL_ALL_VALUTA =  281,
            FINDEAL_ALL_VATMODE =  282,
            FINDEAL_ALL_EXPENSE =  284,
            FINDEAL_ALL_PAYMENT =  285,
            FINDEAL_ALL_PREPAYMENT =  286,
            FINDEAL_ALL_POSTPAYMENT =  287,
            FINDEAL_BAY_PARTY =  290,
            FINDEAL_BAY_PARTY_RUB =  291,
            FINDEAL_BAY_NUMBER =  292,
            FINDEAL_BAY_REPORT_CF =  293,
            FINDEAL_BAY_NUMBER_RUB =  294,
            FINDEAL_BAY_REPORT_CF_RUB =  295,
            FINDEAL_BAY_EXPENSE =  296,
            FINDEAL_BAY_DATE =  297,
            FINDEAL_BAY_VALUTA =  298,
            FINDEAL_BAY_VATMODE =  299,
            FINDEAL_BAY_EXPENSE_RUB =  300,
            FINDEAL_BAY_DATE_RUB =  301,
            FINDEAL_BAY_VALUTA_RUB =  302,
            FINDEAL_BAY_VATMODE_RUB =  303,
            FINDEAL_BAY_PAYMENT =  304,
            FINDEAL_BAY_PREPAYMENT =  305,
            FINDEAL_BAY_POSTPAYMENT =  306,
            FINDEAL_BAY_PAYMENT_RUB =  307,
            FINDEAL_BAY_PREPAYMENT_RUB =  308,
            FINDEAL_BAY_POSTPAYMENT_RUB =  309,
            FINDEAL_ARTICLE =  360,
        }
        
        public class Ordinate : MdfAxisOrdinate {
            private OrdinateType _OrdinateType;
            public OrdinateType OrdinateType{
                get { return _OrdinateType; }
            }
            
            public Ordinate(ReportOrderPlanAxisFindeal axis, MdfAxisOrdinateValueType value_type, OrdinateType ord_type): base(axis, value_type)  {
                _OrdinateType = ord_type;
            }
        }
        
        public ReportOrderPlanAxisFindeal(ReportOrderPlanReport report): base(report) { }
        
        public override void OrdinatesFill() {
            Root = OrdinateCreate(null, OrdinateType.FINDEAL_REPORT);
        }
        
        protected Ordinate OrdinateCreate(Ordinate ord_up, OrdinateType ord_type) {
            Ordinate ord;
            Ordinate sub_ord;
            Int32 sort_order = 0;
            ReportOrderPlanCategoryValue ord_up_category_value = ord_up?.CategoryValue ?? ReportOrderPlanCategoryValue.DefaultCategoryValue;
            switch (ord_type) {
                case OrdinateType.FINDEAL_REPORT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.FINDEAL_REPORT);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanReport> findeal_report_objs = DimReportQueryValueGet(ord.CategoryValue, ReportOrderPlanReportType.REPORT, OrdinateType.FINDEAL_REPORT);
                    sort_order = 0;
                    foreach (var findeal_report_obj in findeal_report_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.FINDEAL_REPORT);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimReportCategoryValueLocate(ord.CategoryValue, findeal_report_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.FINDEAL_ALL);
                        OrdinateCreate(sub_ord, OrdinateType.FINDEAL_FINDEAL);
                    }
                    return ord;
                case OrdinateType.FINDEAL_ALL:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.FINDEAL_ALL);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    OrdinateCreate(ord, OrdinateType.FINDEAL_ALL_PARTY);
                    return ord;
                case OrdinateType.FINDEAL_FINDEAL:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.FINDEAL_FINDEAL);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> findeal_findeal_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_IMPORT, OrdinateType.FINDEAL_FINDEAL);
                    sort_order = 0;
                    foreach (var findeal_findeal_obj in findeal_findeal_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.FINDEAL_FINDEAL);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, findeal_findeal_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.FINDEAL_ARTICLE);
                    }
                    return ord;
                case OrdinateType.FINDEAL_ALL_PARTY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.FINDEAL_ALL_PARTY);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    OrdinateCreate(ord, OrdinateType.FINDEAL_ALL_NUMBER);
                    OrdinateCreate(ord, OrdinateType.FINDEAL_ALL_DATE);
                    OrdinateCreate(ord, OrdinateType.FINDEAL_ALL_VALUTA);
                    OrdinateCreate(ord, OrdinateType.FINDEAL_ALL_VATMODE);
                    return ord;
                case OrdinateType.FINDEAL_ALL_NUMBER:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.FINDEAL_ALL_NUMBER);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    OrdinateCreate(ord, OrdinateType.FINDEAL_ALL_EXPENSE);
                    return ord;
                case OrdinateType.FINDEAL_ALL_DATE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.FINDEAL_ALL_DATE);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    OrdinateCreate(ord, OrdinateType.FINDEAL_ALL_PAYMENT);
                    return ord;
                case OrdinateType.FINDEAL_ALL_VALUTA:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.FINDEAL_ALL_VALUTA);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = false;
                    OrdinateCreate(ord, OrdinateType.FINDEAL_ALL_PREPAYMENT);
                    return ord;
                case OrdinateType.FINDEAL_ALL_VATMODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.FINDEAL_ALL_VATMODE);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 40;
                    ord.IsIntegrated = false;
                    OrdinateCreate(ord, OrdinateType.FINDEAL_ALL_POSTPAYMENT);
                    return ord;
                case OrdinateType.FINDEAL_ALL_EXPENSE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.FINDEAL_ALL_EXPENSE);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.FINDEAL_ALL_PAYMENT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.FINDEAL_ALL_PAYMENT);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.FINDEAL_ALL_PREPAYMENT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.FINDEAL_ALL_PREPAYMENT);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.FINDEAL_ALL_POSTPAYMENT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.FINDEAL_ALL_POSTPAYMENT);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.FINDEAL_BAY_PARTY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.FINDEAL_BAY_PARTY);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_FINDEAL_VALUTA, OrdinateType.FINDEAL_BAY_PARTY));
                    OrdinateCreate(ord, OrdinateType.FINDEAL_BAY_NUMBER);
                    OrdinateCreate(ord, OrdinateType.FINDEAL_BAY_REPORT_CF);
                    return ord;
                case OrdinateType.FINDEAL_BAY_PARTY_RUB:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.FINDEAL_BAY_PARTY_RUB);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_REPORT_VALUTA, OrdinateType.FINDEAL_BAY_PARTY_RUB));
                    OrdinateCreate(ord, OrdinateType.FINDEAL_BAY_NUMBER_RUB);
                    OrdinateCreate(ord, OrdinateType.FINDEAL_BAY_REPORT_CF_RUB);
                    return ord;
                case OrdinateType.FINDEAL_BAY_NUMBER:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.FINDEAL_BAY_NUMBER);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimFinrepCategoryValueLocate(ord_up_category_value, DimFinrepSingleValueGet(ord_up_category_value, ReportOrderPlanFinrepType.FINREP_IE, OrdinateType.FINDEAL_BAY_NUMBER));
                    OrdinateCreate(ord, OrdinateType.FINDEAL_BAY_EXPENSE);
                    return ord;
                case OrdinateType.FINDEAL_BAY_REPORT_CF:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.FINDEAL_BAY_REPORT_CF);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimFinrepCategoryValueLocate(ord_up_category_value, DimFinrepSingleValueGet(ord_up_category_value, ReportOrderPlanFinrepType.FINREP_CF, OrdinateType.FINDEAL_BAY_REPORT_CF));
                    OrdinateCreate(ord, OrdinateType.FINDEAL_BAY_DATE);
                    OrdinateCreate(ord, OrdinateType.FINDEAL_BAY_VALUTA);
                    OrdinateCreate(ord, OrdinateType.FINDEAL_BAY_VATMODE);
                    return ord;
                case OrdinateType.FINDEAL_BAY_NUMBER_RUB:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.FINDEAL_BAY_NUMBER_RUB);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimFinrepCategoryValueLocate(ord_up_category_value, DimFinrepSingleValueGet(ord_up_category_value, ReportOrderPlanFinrepType.FINREP_IE, OrdinateType.FINDEAL_BAY_NUMBER_RUB));
                    OrdinateCreate(ord, OrdinateType.FINDEAL_BAY_EXPENSE_RUB);
                    return ord;
                case OrdinateType.FINDEAL_BAY_REPORT_CF_RUB:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.FINDEAL_BAY_REPORT_CF_RUB);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimFinrepCategoryValueLocate(ord_up_category_value, DimFinrepSingleValueGet(ord_up_category_value, ReportOrderPlanFinrepType.FINREP_CF, OrdinateType.FINDEAL_BAY_REPORT_CF_RUB));
                    OrdinateCreate(ord, OrdinateType.FINDEAL_BAY_DATE_RUB);
                    OrdinateCreate(ord, OrdinateType.FINDEAL_BAY_VALUTA_RUB);
                    OrdinateCreate(ord, OrdinateType.FINDEAL_BAY_VATMODE_RUB);
                    return ord;
                case OrdinateType.FINDEAL_BAY_EXPENSE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.FINDEAL_BAY_EXPENSE);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.COST, OrdinateType.FINDEAL_BAY_EXPENSE));
                    return ord;
                case OrdinateType.FINDEAL_BAY_DATE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.FINDEAL_BAY_DATE);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    OrdinateCreate(ord, OrdinateType.FINDEAL_BAY_PAYMENT);
                    return ord;
                case OrdinateType.FINDEAL_BAY_VALUTA:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.FINDEAL_BAY_VALUTA);
                    ord.Up = ord_up;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimPayTypeCategoryValueLocate(ord_up_category_value, DimPayTypeSingleValueGet(ord_up_category_value, ReportOrderPlanPayTypeType.PREPAYMENT, OrdinateType.FINDEAL_BAY_VALUTA));
                    OrdinateCreate(ord, OrdinateType.FINDEAL_BAY_PREPAYMENT);
                    return ord;
                case OrdinateType.FINDEAL_BAY_VATMODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.FINDEAL_BAY_VATMODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 40;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimPayTypeCategoryValueLocate(ord_up_category_value, DimPayTypeSingleValueGet(ord_up_category_value, ReportOrderPlanPayTypeType.POSTPAYMENT, OrdinateType.FINDEAL_BAY_VATMODE));
                    OrdinateCreate(ord, OrdinateType.FINDEAL_BAY_POSTPAYMENT);
                    return ord;
                case OrdinateType.FINDEAL_BAY_EXPENSE_RUB:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.FINDEAL_BAY_EXPENSE_RUB);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.BALANCE, OrdinateType.FINDEAL_BAY_EXPENSE_RUB));
                    return ord;
                case OrdinateType.FINDEAL_BAY_DATE_RUB:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.FINDEAL_BAY_DATE_RUB);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    OrdinateCreate(ord, OrdinateType.FINDEAL_BAY_PAYMENT_RUB);
                    return ord;
                case OrdinateType.FINDEAL_BAY_VALUTA_RUB:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.FINDEAL_BAY_VALUTA_RUB);
                    ord.Up = ord_up;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimPayTypeCategoryValueLocate(ord_up_category_value, DimPayTypeSingleValueGet(ord_up_category_value, ReportOrderPlanPayTypeType.PREPAYMENT, OrdinateType.FINDEAL_BAY_VALUTA_RUB));
                    OrdinateCreate(ord, OrdinateType.FINDEAL_BAY_PREPAYMENT_RUB);
                    return ord;
                case OrdinateType.FINDEAL_BAY_VATMODE_RUB:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.FINDEAL_BAY_VATMODE_RUB);
                    ord.Up = ord_up;
                    ord.SortOrder = 40;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimPayTypeCategoryValueLocate(ord_up_category_value, DimPayTypeSingleValueGet(ord_up_category_value, ReportOrderPlanPayTypeType.POSTPAYMENT, OrdinateType.FINDEAL_BAY_VATMODE_RUB));
                    OrdinateCreate(ord, OrdinateType.FINDEAL_BAY_POSTPAYMENT_RUB);
                    return ord;
                case OrdinateType.FINDEAL_BAY_PAYMENT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.FINDEAL_BAY_PAYMENT);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.BALANCE, OrdinateType.FINDEAL_BAY_PAYMENT));
                    return ord;
                case OrdinateType.FINDEAL_BAY_PREPAYMENT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.FINDEAL_BAY_PREPAYMENT);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.BALANCE, OrdinateType.FINDEAL_BAY_PREPAYMENT));
                    return ord;
                case OrdinateType.FINDEAL_BAY_POSTPAYMENT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.FINDEAL_BAY_POSTPAYMENT);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.BALANCE, OrdinateType.FINDEAL_BAY_POSTPAYMENT));
                    return ord;
                case OrdinateType.FINDEAL_BAY_PAYMENT_RUB:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.FINDEAL_BAY_PAYMENT_RUB);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.BALANCE, OrdinateType.FINDEAL_BAY_PAYMENT_RUB));
                    return ord;
                case OrdinateType.FINDEAL_BAY_PREPAYMENT_RUB:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.FINDEAL_BAY_PREPAYMENT_RUB);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.BALANCE, OrdinateType.FINDEAL_BAY_PREPAYMENT_RUB));
                    return ord;
                case OrdinateType.FINDEAL_BAY_POSTPAYMENT_RUB:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.FINDEAL_BAY_POSTPAYMENT_RUB);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.BALANCE, OrdinateType.FINDEAL_BAY_POSTPAYMENT_RUB));
                    return ord;
                case OrdinateType.FINDEAL_ARTICLE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.FINDEAL_ARTICLE);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.DIM_FINDEAL_ACTICLE, OrdinateType.FINDEAL_ARTICLE));
                    OrdinateCreate(ord, OrdinateType.FINDEAL_BAY_PARTY);
                    OrdinateCreate(ord, OrdinateType.FINDEAL_BAY_PARTY_RUB);
                    return ord;
                default:
                    return null;
            }
        }
        
        protected ReportOrderPlanCategoryValue DimReportCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanReport obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimReport = obj;
            value.DimEntity = value.DimReport?.Entity;
            value.DimOrder = value.DimReport?.Order;
            value.DimVatMode = value.DimOrder?.VatMode;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimFindealCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanFindeal obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimFindeal = obj;
            value.DimDeal = value.DimFindeal?.Deal;
            value.DimParty = value.DimDeal?.Party;
            value.DimPartyKind = value.DimParty?.Kind;
            value.DimDealKind = value.DimDeal?.Kind;
            value.DimValutaObligation = value.DimFindeal?.Valuta;
            value.DimVatModeObligation = value.DimFindeal?.VatMode;
            value.DimArticle = value.DimFindeal?.Article;
            value.DimFindealKind = value.DimFindeal?.Kind;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimValutaCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanValuta obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimValuta = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimFinrepCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanFinrep obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimFinrep = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimValueTypeCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanValueType obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimValueType = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimPayTypeCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanPayType obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimPayType = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimArticleCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanArticle obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimArticle = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanValuta DimValutaSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanValutaType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.FINDEAL_BAY_PARTY:
                    return context.DimFindeal?.Valuta;
                case OrdinateType.FINDEAL_BAY_PARTY_RUB:
                    return context.DimReport?.Valuta;
                default:
                    return null;
            }
        }
        protected ReportOrderPlanFinrep DimFinrepSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanFinrepType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.FINDEAL_BAY_NUMBER:
                    return Report.ReportCore.ConstFinrep[model];
                case OrdinateType.FINDEAL_BAY_REPORT_CF:
                    return Report.ReportCore.ConstFinrep[model];
                case OrdinateType.FINDEAL_BAY_NUMBER_RUB:
                    return Report.ReportCore.ConstFinrep[model];
                case OrdinateType.FINDEAL_BAY_REPORT_CF_RUB:
                    return Report.ReportCore.ConstFinrep[model];
                default:
                    return null;
            }
        }
        protected ReportOrderPlanValueType DimValueTypeSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanValueTypeType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.FINDEAL_BAY_EXPENSE:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.FINDEAL_BAY_EXPENSE_RUB:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.FINDEAL_BAY_PAYMENT:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.FINDEAL_BAY_PREPAYMENT:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.FINDEAL_BAY_POSTPAYMENT:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.FINDEAL_BAY_PAYMENT_RUB:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.FINDEAL_BAY_PREPAYMENT_RUB:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.FINDEAL_BAY_POSTPAYMENT_RUB:
                    return Report.ReportCore.ConstValueType[model];
                default:
                    return null;
            }
        }
        protected ReportOrderPlanPayType DimPayTypeSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanPayTypeType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.FINDEAL_BAY_VALUTA:
                    return Report.ReportCore.ConstPayType[model];
                case OrdinateType.FINDEAL_BAY_VATMODE:
                    return Report.ReportCore.ConstPayType[model];
                case OrdinateType.FINDEAL_BAY_VALUTA_RUB:
                    return Report.ReportCore.ConstPayType[model];
                case OrdinateType.FINDEAL_BAY_VATMODE_RUB:
                    return Report.ReportCore.ConstPayType[model];
                default:
                    return null;
            }
        }
        protected ReportOrderPlanArticle DimArticleSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanArticleType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.FINDEAL_ARTICLE:
                    return context.DimFindeal?.Article;
                default:
                    return null;
            }
        }
        protected IList<ReportOrderPlanReport> DimReportQueryValueGet(ReportOrderPlanCategoryValue context, ReportOrderPlanReportType model, OrdinateType ord_type) {
            return Report.ReportCore.QueryReport(context, model);
        }
        protected IList<ReportOrderPlanFindeal> DimFindealQueryValueGet(ReportOrderPlanCategoryValue context, ReportOrderPlanFindealType model, OrdinateType ord_type) {
            return Report.ReportCore.QueryFindeal(context, model);
        }
        
    }
    
    public partial class ReportOrderPlanAxisPersFindealIeCols: MdfAxis<ReportOrderPlanReport,ReportOrderPlanCategoryValue,ReportOrderPlanTable,ReportOrderPlanTableCell,ReportOrderPlanDataPoint> {
        
        public enum OrdinateType {
            ROOT =  310,
            REPORT_IE =  311,
            FORECAST =  314,
            IE_FORECAST_VAT =  320,
            IE_FORECAST_COUNT =  323,
            IE_FORECAST_SUMMALL =  324,
            IE_FORECAST_COST =  325,
            IE_FORECAST_BALANCE =  662,
            IE_FORECAST_VATINCOST =  663,
            IE_FORECAST_INSURANCE =  664,
            IE_FORECAST_OVERHEAD =  665,
            IE_FORECAST_ADVANCE =  666,
            IE_FORECAST_VALUTA_NULL =  668,
        }
        
        public class Ordinate : MdfAxisOrdinate {
            private OrdinateType _OrdinateType;
            public OrdinateType OrdinateType{
                get { return _OrdinateType; }
            }
            
            public Ordinate(ReportOrderPlanAxisPersFindealIeCols axis, MdfAxisOrdinateValueType value_type, OrdinateType ord_type): base(axis, value_type)  {
                _OrdinateType = ord_type;
            }
        }
        
        public ReportOrderPlanAxisPersFindealIeCols(ReportOrderPlanReport report): base(report) { }
        
        public override void OrdinatesFill() {
            Root = OrdinateCreate(null, OrdinateType.ROOT);
        }
        
        protected Ordinate OrdinateCreate(Ordinate ord_up, OrdinateType ord_type) {
            Ordinate ord;
            Ordinate sub_ord;
            Int32 sort_order = 0;
            ReportOrderPlanCategoryValue ord_up_category_value = ord_up?.CategoryValue ?? ReportOrderPlanCategoryValue.DefaultCategoryValue;
            switch (ord_type) {
                case OrdinateType.ROOT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.ROOT);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    OrdinateCreate(ord, OrdinateType.FORECAST);
                    return ord;
                case OrdinateType.REPORT_IE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.REPORT_IE);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimFinrepCategoryValueLocate(ord_up_category_value, DimFinrepSingleValueGet(ord_up_category_value, ReportOrderPlanFinrepType.FINREP_IE, OrdinateType.REPORT_IE));
                    OrdinateCreate(ord, OrdinateType.IE_FORECAST_VAT);
                    OrdinateCreate(ord, OrdinateType.IE_FORECAST_SUMMALL);
                    OrdinateCreate(ord, OrdinateType.IE_FORECAST_COST);
                    OrdinateCreate(ord, OrdinateType.IE_FORECAST_BALANCE);
                    OrdinateCreate(ord, OrdinateType.IE_FORECAST_VATINCOST);
                    OrdinateCreate(ord, OrdinateType.IE_FORECAST_INSURANCE);
                    OrdinateCreate(ord, OrdinateType.IE_FORECAST_OVERHEAD);
                    OrdinateCreate(ord, OrdinateType.IE_FORECAST_ADVANCE);
                    OrdinateCreate(ord, OrdinateType.IE_FORECAST_VALUTA_NULL);
                    return ord;
                case OrdinateType.FORECAST:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.FORECAST);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimScenarioCategoryValueLocate(ord_up_category_value, DimScenarioSingleValueGet(ord_up_category_value, ReportOrderPlanScenarioType.FORECAST, OrdinateType.FORECAST));
                    OrdinateCreate(ord, OrdinateType.REPORT_IE);
                    return ord;
                case OrdinateType.IE_FORECAST_VAT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_FORECAST_VAT);
                    ord.Up = ord_up;
                    ord.SortOrder = 70;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.VAT, OrdinateType.IE_FORECAST_VAT));
                    return ord;
                case OrdinateType.IE_FORECAST_COUNT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_FORECAST_COUNT);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.COUNT, OrdinateType.IE_FORECAST_COUNT));
                    return ord;
                case OrdinateType.IE_FORECAST_SUMMALL:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_FORECAST_SUMMALL);
                    ord.Up = ord_up;
                    ord.SortOrder = 80;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.SUMMALL, OrdinateType.IE_FORECAST_SUMMALL));
                    return ord;
                case OrdinateType.IE_FORECAST_COST:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_FORECAST_COST);
                    ord.Up = ord_up;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.COST, OrdinateType.IE_FORECAST_COST));
                    return ord;
                case OrdinateType.IE_FORECAST_BALANCE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_FORECAST_BALANCE);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.BALANCE, OrdinateType.IE_FORECAST_BALANCE));
                    return ord;
                case OrdinateType.IE_FORECAST_VATINCOST:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_FORECAST_VATINCOST);
                    ord.Up = ord_up;
                    ord.SortOrder = 40;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.VATINCOST, OrdinateType.IE_FORECAST_VATINCOST));
                    return ord;
                case OrdinateType.IE_FORECAST_INSURANCE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_FORECAST_INSURANCE);
                    ord.Up = ord_up;
                    ord.SortOrder = 50;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.INSURANCE, OrdinateType.IE_FORECAST_INSURANCE));
                    return ord;
                case OrdinateType.IE_FORECAST_OVERHEAD:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_FORECAST_OVERHEAD);
                    ord.Up = ord_up;
                    ord.SortOrder = 60;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.OVERHEAD, OrdinateType.IE_FORECAST_OVERHEAD));
                    return ord;
                case OrdinateType.IE_FORECAST_ADVANCE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_FORECAST_ADVANCE);
                    ord.Up = ord_up;
                    ord.SortOrder = 90;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.ADVANCE, OrdinateType.IE_FORECAST_ADVANCE));
                    return ord;
                case OrdinateType.IE_FORECAST_VALUTA_NULL:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_FORECAST_VALUTA_NULL);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_FINDEAL_VALUTA, OrdinateType.IE_FORECAST_VALUTA_NULL));
                    OrdinateCreate(ord, OrdinateType.IE_FORECAST_COUNT);
                    return ord;
                default:
                    return null;
            }
        }
        
        protected ReportOrderPlanCategoryValue DimFinrepCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanFinrep obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimFinrep = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimScenarioCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanScenario obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimScenario = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimValueTypeCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanValueType obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimValueType = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimValutaCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanValuta obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimValuta = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanFinrep DimFinrepSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanFinrepType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.REPORT_IE:
                    return Report.ReportCore.ConstFinrep[model];
                default:
                    return null;
            }
        }
        protected ReportOrderPlanScenario DimScenarioSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanScenarioType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.FORECAST:
                    return Report.ReportCore.ConstScenario[model];
                default:
                    return null;
            }
        }
        protected ReportOrderPlanValueType DimValueTypeSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanValueTypeType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.IE_FORECAST_VAT:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.IE_FORECAST_COUNT:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.IE_FORECAST_SUMMALL:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.IE_FORECAST_COST:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.IE_FORECAST_BALANCE:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.IE_FORECAST_VATINCOST:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.IE_FORECAST_INSURANCE:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.IE_FORECAST_OVERHEAD:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.IE_FORECAST_ADVANCE:
                    return Report.ReportCore.ConstValueType[model];
                default:
                    return null;
            }
        }
        protected ReportOrderPlanValuta DimValutaSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanValutaType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.IE_FORECAST_VALUTA_NULL:
                    return context.DimFindeal?.Valuta;
                default:
                    return null;
            }
        }
        
    }
    
    public partial class ReportOrderPlanAxisPersFindealIeRows: MdfAxis<ReportOrderPlanReport,ReportOrderPlanCategoryValue,ReportOrderPlanTable,ReportOrderPlanTableCell,ReportOrderPlanDataPoint> {
        
        public enum OrdinateType {
            REPORT =  337,
            PERIOD_PLAN_MONTH =  338,
            ROWS_FINDEAL_SALE =  339,
            PERIOD_PLAN =  359,
            ROWS_FINDEAL_BUY =  361,
            ROWS_FINDEAL_SALE_ARTICLE =  362,
            ROWS_FINDEAL_BUY_ARTICLE =  363,
            ROWS_FINDEAL_BUY_ARTICLE_VALUTA_OBLIGATION =  367,
            ROWS_FINDEAL_SALE_ARTICLE_VALUTA_OBLIGATION =  368,
            ROWS_FINDEAL_BUY_ARTICLE_VALUTA_REPORT =  660,
            ROWS_FINDEAL_SALE_ARTICLE_VALUTA_REPORT =  661,
            PERIOD_PLAN_BEGIN =  700,
            ROWS_BEGIN_FINDEAL_SALE =  701,
            ROWS_BEGIN_FINDEAL_BUY =  702,
            ROWS_BEGIN_FINDEAL_SALE_ARTICLE =  703,
            ROWS_BEGIN_FINDEAL_BUY_ARTICLE =  704,
            ROWS_BEGIN_FINDEAL_SALE_ARTICLE_VALUTA_OBLIGATION =  705,
            ROWS_BEGIN_FINDEAL_SALE_ARTICLE_VALUTA_REPORT =  706,
            ROWS_BEGIN_FINDEAL_BUY_ARTICLE_VALUTA_OBLIGATION =  707,
            ROWS_BEGIN_FINDEAL_BUY_ARTICLE_VALUTA_REPORT =  708,
        }
        
        public class Ordinate : MdfAxisOrdinate {
            private OrdinateType _OrdinateType;
            public OrdinateType OrdinateType{
                get { return _OrdinateType; }
            }
            
            public Ordinate(ReportOrderPlanAxisPersFindealIeRows axis, MdfAxisOrdinateValueType value_type, OrdinateType ord_type): base(axis, value_type)  {
                _OrdinateType = ord_type;
            }
        }
        
        public ReportOrderPlanAxisPersFindealIeRows(ReportOrderPlanReport report): base(report) { }
        
        public override void OrdinatesFill() {
            Root = OrdinateCreate(null, OrdinateType.REPORT);
        }
        
        protected Ordinate OrdinateCreate(Ordinate ord_up, OrdinateType ord_type) {
            Ordinate ord;
            Ordinate sub_ord;
            Int32 sort_order = 0;
            ReportOrderPlanCategoryValue ord_up_category_value = ord_up?.CategoryValue ?? ReportOrderPlanCategoryValue.DefaultCategoryValue;
            switch (ord_type) {
                case OrdinateType.REPORT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.REPORT);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanReport> report_objs = DimReportQueryValueGet(ord.CategoryValue, ReportOrderPlanReportType.REPORT, OrdinateType.REPORT);
                    sort_order = 0;
                    foreach (var report_obj in report_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.REPORT);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimReportCategoryValueLocate(ord.CategoryValue, report_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.PERIOD_PLAN);
                    }
                    return ord;
                case OrdinateType.PERIOD_PLAN_MONTH:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.PERIOD_PLAN_MONTH);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanPeriod> period_plan_month_objs = DimPeriodQueryValueGet(ord.CategoryValue, ReportOrderPlanPeriodType.PERIOD_PLAN_MONTH, OrdinateType.PERIOD_PLAN_MONTH);
                    sort_order = 0;
                    foreach (var period_plan_month_obj in period_plan_month_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.PERIOD_PLAN_MONTH);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimPeriodCategoryValueLocate(ord.CategoryValue, period_plan_month_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.ROWS_FINDEAL_SALE);
                        OrdinateCreate(sub_ord, OrdinateType.ROWS_FINDEAL_BUY);
                    }
                    return ord;
                case OrdinateType.ROWS_FINDEAL_SALE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.ROWS_FINDEAL_SALE);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> rows_findeal_sale_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_SALE, OrdinateType.ROWS_FINDEAL_SALE);
                    sort_order = 0;
                    foreach (var rows_findeal_sale_obj in rows_findeal_sale_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.ROWS_FINDEAL_SALE);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, rows_findeal_sale_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.ROWS_FINDEAL_SALE_ARTICLE);
                    }
                    return ord;
                case OrdinateType.PERIOD_PLAN:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.PERIOD_PLAN);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanPeriod> period_plan_objs = DimPeriodQueryValueGet(ord.CategoryValue, ReportOrderPlanPeriodType.PERIOD_PLAN, OrdinateType.PERIOD_PLAN);
                    sort_order = 0;
                    foreach (var period_plan_obj in period_plan_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.PERIOD_PLAN);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimPeriodCategoryValueLocate(ord.CategoryValue, period_plan_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.PERIOD_PLAN_MONTH);
                        OrdinateCreate(sub_ord, OrdinateType.PERIOD_PLAN_BEGIN);
                    }
                    return ord;
                case OrdinateType.ROWS_FINDEAL_BUY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.ROWS_FINDEAL_BUY);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> rows_findeal_buy_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_BUY, OrdinateType.ROWS_FINDEAL_BUY);
                    sort_order = 0;
                    foreach (var rows_findeal_buy_obj in rows_findeal_buy_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.ROWS_FINDEAL_BUY);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, rows_findeal_buy_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.ROWS_FINDEAL_BUY_ARTICLE);
                    }
                    return ord;
                case OrdinateType.ROWS_FINDEAL_SALE_ARTICLE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.ROWS_FINDEAL_SALE_ARTICLE);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.DIM_FINDEAL_ACTICLE, OrdinateType.ROWS_FINDEAL_SALE_ARTICLE));
                    OrdinateCreate(ord, OrdinateType.ROWS_FINDEAL_SALE_ARTICLE_VALUTA_OBLIGATION);
                    OrdinateCreate(ord, OrdinateType.ROWS_FINDEAL_SALE_ARTICLE_VALUTA_REPORT);
                    return ord;
                case OrdinateType.ROWS_FINDEAL_BUY_ARTICLE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.ROWS_FINDEAL_BUY_ARTICLE);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.DIM_FINDEAL_ACTICLE, OrdinateType.ROWS_FINDEAL_BUY_ARTICLE));
                    OrdinateCreate(ord, OrdinateType.ROWS_FINDEAL_BUY_ARTICLE_VALUTA_OBLIGATION);
                    OrdinateCreate(ord, OrdinateType.ROWS_FINDEAL_BUY_ARTICLE_VALUTA_REPORT);
                    return ord;
                case OrdinateType.ROWS_FINDEAL_BUY_ARTICLE_VALUTA_OBLIGATION:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.ROWS_FINDEAL_BUY_ARTICLE_VALUTA_OBLIGATION);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_FINDEAL_VALUTA, OrdinateType.ROWS_FINDEAL_BUY_ARTICLE_VALUTA_OBLIGATION));
                    return ord;
                case OrdinateType.ROWS_FINDEAL_SALE_ARTICLE_VALUTA_OBLIGATION:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.ROWS_FINDEAL_SALE_ARTICLE_VALUTA_OBLIGATION);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_FINDEAL_VALUTA, OrdinateType.ROWS_FINDEAL_SALE_ARTICLE_VALUTA_OBLIGATION));
                    return ord;
                case OrdinateType.ROWS_FINDEAL_BUY_ARTICLE_VALUTA_REPORT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.ROWS_FINDEAL_BUY_ARTICLE_VALUTA_REPORT);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_REPORT_VALUTA, OrdinateType.ROWS_FINDEAL_BUY_ARTICLE_VALUTA_REPORT));
                    return ord;
                case OrdinateType.ROWS_FINDEAL_SALE_ARTICLE_VALUTA_REPORT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.ROWS_FINDEAL_SALE_ARTICLE_VALUTA_REPORT);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_REPORT_VALUTA, OrdinateType.ROWS_FINDEAL_SALE_ARTICLE_VALUTA_REPORT));
                    return ord;
                case OrdinateType.PERIOD_PLAN_BEGIN:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.PERIOD_PLAN_BEGIN);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanPeriod> period_plan_begin_objs = DimPeriodQueryValueGet(ord.CategoryValue, ReportOrderPlanPeriodType.PERIOD_PLAN_BALANCE_BEGIN, OrdinateType.PERIOD_PLAN_BEGIN);
                    sort_order = 0;
                    foreach (var period_plan_begin_obj in period_plan_begin_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.PERIOD_PLAN_BEGIN);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimPeriodCategoryValueLocate(ord.CategoryValue, period_plan_begin_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.ROWS_BEGIN_FINDEAL_SALE);
                        OrdinateCreate(sub_ord, OrdinateType.ROWS_BEGIN_FINDEAL_BUY);
                    }
                    return ord;
                case OrdinateType.ROWS_BEGIN_FINDEAL_SALE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.ROWS_BEGIN_FINDEAL_SALE);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> rows_begin_findeal_sale_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_SALE, OrdinateType.ROWS_BEGIN_FINDEAL_SALE);
                    sort_order = 0;
                    foreach (var rows_begin_findeal_sale_obj in rows_begin_findeal_sale_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.ROWS_BEGIN_FINDEAL_SALE);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, rows_begin_findeal_sale_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.ROWS_BEGIN_FINDEAL_SALE_ARTICLE);
                    }
                    return ord;
                case OrdinateType.ROWS_BEGIN_FINDEAL_BUY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.ROWS_BEGIN_FINDEAL_BUY);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> rows_begin_findeal_buy_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_BUY, OrdinateType.ROWS_BEGIN_FINDEAL_BUY);
                    sort_order = 0;
                    foreach (var rows_begin_findeal_buy_obj in rows_begin_findeal_buy_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.ROWS_BEGIN_FINDEAL_BUY);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, rows_begin_findeal_buy_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.ROWS_BEGIN_FINDEAL_BUY_ARTICLE);
                    }
                    return ord;
                case OrdinateType.ROWS_BEGIN_FINDEAL_SALE_ARTICLE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.ROWS_BEGIN_FINDEAL_SALE_ARTICLE);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.DIM_FINDEAL_ACTICLE, OrdinateType.ROWS_BEGIN_FINDEAL_SALE_ARTICLE));
                    OrdinateCreate(ord, OrdinateType.ROWS_BEGIN_FINDEAL_SALE_ARTICLE_VALUTA_OBLIGATION);
                    OrdinateCreate(ord, OrdinateType.ROWS_BEGIN_FINDEAL_SALE_ARTICLE_VALUTA_REPORT);
                    return ord;
                case OrdinateType.ROWS_BEGIN_FINDEAL_BUY_ARTICLE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.ROWS_BEGIN_FINDEAL_BUY_ARTICLE);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.DIM_FINDEAL_ACTICLE, OrdinateType.ROWS_BEGIN_FINDEAL_BUY_ARTICLE));
                    OrdinateCreate(ord, OrdinateType.ROWS_BEGIN_FINDEAL_BUY_ARTICLE_VALUTA_OBLIGATION);
                    OrdinateCreate(ord, OrdinateType.ROWS_BEGIN_FINDEAL_BUY_ARTICLE_VALUTA_REPORT);
                    return ord;
                case OrdinateType.ROWS_BEGIN_FINDEAL_SALE_ARTICLE_VALUTA_OBLIGATION:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.ROWS_BEGIN_FINDEAL_SALE_ARTICLE_VALUTA_OBLIGATION);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_FINDEAL_VALUTA, OrdinateType.ROWS_BEGIN_FINDEAL_SALE_ARTICLE_VALUTA_OBLIGATION));
                    return ord;
                case OrdinateType.ROWS_BEGIN_FINDEAL_SALE_ARTICLE_VALUTA_REPORT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.ROWS_BEGIN_FINDEAL_SALE_ARTICLE_VALUTA_REPORT);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_REPORT_VALUTA, OrdinateType.ROWS_BEGIN_FINDEAL_SALE_ARTICLE_VALUTA_REPORT));
                    return ord;
                case OrdinateType.ROWS_BEGIN_FINDEAL_BUY_ARTICLE_VALUTA_OBLIGATION:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.ROWS_BEGIN_FINDEAL_BUY_ARTICLE_VALUTA_OBLIGATION);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_FINDEAL_VALUTA, OrdinateType.ROWS_BEGIN_FINDEAL_BUY_ARTICLE_VALUTA_OBLIGATION));
                    return ord;
                case OrdinateType.ROWS_BEGIN_FINDEAL_BUY_ARTICLE_VALUTA_REPORT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.ROWS_BEGIN_FINDEAL_BUY_ARTICLE_VALUTA_REPORT);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_REPORT_VALUTA, OrdinateType.ROWS_BEGIN_FINDEAL_BUY_ARTICLE_VALUTA_REPORT));
                    return ord;
                default:
                    return null;
            }
        }
        
        protected ReportOrderPlanCategoryValue DimReportCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanReport obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimReport = obj;
            value.DimEntity = value.DimReport?.Entity;
            value.DimOrder = value.DimReport?.Order;
            value.DimVatMode = value.DimOrder?.VatMode;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimPeriodCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanPeriod obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimPeriod = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimFindealCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanFindeal obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimFindeal = obj;
            value.DimDeal = value.DimFindeal?.Deal;
            value.DimParty = value.DimDeal?.Party;
            value.DimPartyKind = value.DimParty?.Kind;
            value.DimDealKind = value.DimDeal?.Kind;
            value.DimValutaObligation = value.DimFindeal?.Valuta;
            value.DimVatModeObligation = value.DimFindeal?.VatMode;
            value.DimArticle = value.DimFindeal?.Article;
            value.DimFindealKind = value.DimFindeal?.Kind;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimArticleCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanArticle obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimArticle = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimValutaCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanValuta obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimValuta = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanArticle DimArticleSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanArticleType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.ROWS_FINDEAL_SALE_ARTICLE:
                    return context.DimFindeal?.Article;
                case OrdinateType.ROWS_FINDEAL_BUY_ARTICLE:
                    return context.DimFindeal?.Article;
                case OrdinateType.ROWS_BEGIN_FINDEAL_SALE_ARTICLE:
                    return context.DimFindeal?.Article;
                case OrdinateType.ROWS_BEGIN_FINDEAL_BUY_ARTICLE:
                    return context.DimFindeal?.Article;
                default:
                    return null;
            }
        }
        protected ReportOrderPlanValuta DimValutaSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanValutaType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.ROWS_FINDEAL_BUY_ARTICLE_VALUTA_OBLIGATION:
                    return context.DimFindeal?.Valuta;
                case OrdinateType.ROWS_FINDEAL_SALE_ARTICLE_VALUTA_OBLIGATION:
                    return context.DimFindeal?.Valuta;
                case OrdinateType.ROWS_FINDEAL_BUY_ARTICLE_VALUTA_REPORT:
                    return context.DimReport?.Valuta;
                case OrdinateType.ROWS_FINDEAL_SALE_ARTICLE_VALUTA_REPORT:
                    return context.DimReport?.Valuta;
                case OrdinateType.ROWS_BEGIN_FINDEAL_SALE_ARTICLE_VALUTA_OBLIGATION:
                    return context.DimFindeal?.Valuta;
                case OrdinateType.ROWS_BEGIN_FINDEAL_SALE_ARTICLE_VALUTA_REPORT:
                    return context.DimReport?.Valuta;
                case OrdinateType.ROWS_BEGIN_FINDEAL_BUY_ARTICLE_VALUTA_OBLIGATION:
                    return context.DimFindeal?.Valuta;
                case OrdinateType.ROWS_BEGIN_FINDEAL_BUY_ARTICLE_VALUTA_REPORT:
                    return context.DimReport?.Valuta;
                default:
                    return null;
            }
        }
        protected IList<ReportOrderPlanReport> DimReportQueryValueGet(ReportOrderPlanCategoryValue context, ReportOrderPlanReportType model, OrdinateType ord_type) {
            return Report.ReportCore.QueryReport(context, model);
        }
        protected IList<ReportOrderPlanPeriod> DimPeriodQueryValueGet(ReportOrderPlanCategoryValue context, ReportOrderPlanPeriodType model, OrdinateType ord_type) {
            return Report.ReportCore.QueryPeriod(context, model);
        }
        protected IList<ReportOrderPlanFindeal> DimFindealQueryValueGet(ReportOrderPlanCategoryValue context, ReportOrderPlanFindealType model, OrdinateType ord_type) {
            return Report.ReportCore.QueryFindeal(context, model);
        }
        
    }
    
    public partial class ReportOrderPlanAxisGoodsImport: MdfAxis<ReportOrderPlanReport,ReportOrderPlanCategoryValue,ReportOrderPlanTable,ReportOrderPlanTableCell,ReportOrderPlanDataPoint> {
        
        public enum OrdinateType {
            GOODS_ROOT =  369,
            GOODS_VALUTA =  370,
            GOODS_ARTICLE_GOOD =  371,
            GOODS_PARTY_INTERNAL =  372,
            GOODS_PARTY_ENTITY =  373,
            GOODS_ENTITY_ALL_CODE =  374,
            GOODS_PARTY_ENTITY_BYARTICLE =  375,
            GOODS_ENTITY_ALL_NAME =  376,
            GOODS_ENTITY_ARTICLE_FERRO_CODE =  377,
            GOODS_ENTITY_ALL_COST =  378,
            GOODS_ENTITY_ALL_PAY =  379,
            GOODS_ENTITY_ARTICLE_FERRO_NAME =  380,
            GOODS_ENTITY_ARTICLE_FERRO_COST =  382,
            GOODS_ENTITY_ARTICLE_FERRO_PAY =  383,
            GOODS_ENTITY_ARTICLE_NONFERRO_CODE =  384,
            GOODS_ENTITY_ARTICLE_NONFERRO_NAME =  385,
            GOODS_ENTITY_ARTICLE_NONFERRO_COST =  386,
            GOODS_ENTITY_ARTICLE_NONFERRO_PAY =  387,
            GOODS_ENTITY_ARTICLE_CABLE_CODE =  388,
            GOODS_ENTITY_ARTICLE_CHEMICAL_CODE =  389,
            GOODS_ENTITY_ARTICLE_STAMPING_CODE =  390,
            GOODS_ENTITY_ARTICLE_COMPONENT_CODE =  391,
            GOODS_ENTITY_ARTICLE_INSTRUMENT_CODE =  392,
            GOODS_ENTITY_ARTICLE_EQUIPMENT_CODE =  393,
            GOODS_ENTITY_ARTICLE_OTHER_CODE =  394,
            GOODS_ENTITY_ARTICLE_CABLE_NAME =  395,
            GOODS_ENTITY_ARTICLE_CHEMICAL_NAME =  396,
            GOODS_ENTITY_ARTICLE_STAMPING_NAME =  397,
            GOODS_ENTITY_ARTICLE_COMPONENT_NAME =  398,
            GOODS_ENTITY_ARTICLE_INSTRUMENT_NAME =  399,
            GOODS_ENTITY_ARTICLE_EQUIPMENT_NAME =  400,
            GOODS_ENTITY_ARTICLE_OTHER_NAME =  401,
            GOODS_ENTITY_ARTICLE_CABLE_COST =  402,
            GOODS_ENTITY_ARTICLE_CABLE_PAY =  403,
            GOODS_ENTITY_ARTICLE_CHEMICAL_COST =  404,
            GOODS_ENTITY_ARTICLE_CHEMICAL_PAY =  405,
            GOODS_ENTITY_ARTICLE_STAMPING_COST =  406,
            GOODS_ENTITY_ARTICLE_STAMPING_PAY =  407,
            GOODS_ENTITY_ARTICLE_COMPONENT_COST =  408,
            GOODS_ENTITY_ARTICLE_COMPONENT_PAY =  409,
            GOODS_ENTITY_ARTICLE_INSTRUMENT_COST =  410,
            GOODS_ENTITY_ARTICLE_INSTRUMENT_PAY =  411,
            GOODS_ENTITY_ARTICLE_EQUIPMENT_COST =  412,
            GOODS_ENTITY_ARTICLE_EQUIPMENT_PAY =  413,
            GOODS_ENTITY_ARTICLE_OTHER_COST =  414,
            GOODS_ENTITY_ARTICLE_OTHER_PAY =  415,
            GOODS_INTERNAL_BYARTICLE =  416,
            GOODS_INTERNAL_ALL_CODE =  417,
            GOODS_INTERNAL_ARTICLE_COMPONENT_CODE =  418,
            GOODS_INTERNAL_ARTICLE_INSTRUMENT_CODE =  419,
            GOODS_INTERNAL_ARTICLE_EQUIPMENT_CODE =  420,
            GOODS_INTERNAL_ALL_NAME =  421,
            GOODS_INTERNAL_ARTICLE_COMPONENT_NAME =  422,
            GOODS_INTERNAL_ARTICLE_INSTRUMENT_NAME =  423,
            GOODS_INTERNAL_ARTICLE_EQUIPMENT_NAME =  424,
            GOODS_INTERNAL_ALL_COST =  425,
            GOODS_INTERNAL_ARTICLE_COMPONENT_COST =  426,
            GOODS_INTERNAL_ARTICLE_INSTRUMENT_COST =  427,
            GOODS_INTERNAL_ARTICLE_EQUIPMENT_COST =  428,
        }
        
        public class Ordinate : MdfAxisOrdinate {
            private OrdinateType _OrdinateType;
            public OrdinateType OrdinateType{
                get { return _OrdinateType; }
            }
            
            public Ordinate(ReportOrderPlanAxisGoodsImport axis, MdfAxisOrdinateValueType value_type, OrdinateType ord_type): base(axis, value_type)  {
                _OrdinateType = ord_type;
            }
        }
        
        public ReportOrderPlanAxisGoodsImport(ReportOrderPlanReport report): base(report) { }
        
        public override void OrdinatesFill() {
            Root = OrdinateCreate(null, OrdinateType.GOODS_ROOT);
        }
        
        protected Ordinate OrdinateCreate(Ordinate ord_up, OrdinateType ord_type) {
            Ordinate ord;
            Ordinate sub_ord;
            Int32 sort_order = 0;
            ReportOrderPlanCategoryValue ord_up_category_value = ord_up?.CategoryValue ?? ReportOrderPlanCategoryValue.DefaultCategoryValue;
            switch (ord_type) {
                case OrdinateType.GOODS_ROOT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_ROOT);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanReport> goods_root_objs = DimReportQueryValueGet(ord.CategoryValue, ReportOrderPlanReportType.REPORT, OrdinateType.GOODS_ROOT);
                    sort_order = 0;
                    foreach (var goods_root_obj in goods_root_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.GOODS_ROOT);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimReportCategoryValueLocate(ord.CategoryValue, goods_root_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.GOODS_VALUTA);
                    }
                    return ord;
                case OrdinateType.GOODS_VALUTA:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_VALUTA);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_REPORT_VALUTA, OrdinateType.GOODS_VALUTA));
                    OrdinateCreate(ord, OrdinateType.GOODS_ARTICLE_GOOD);
                    return ord;
                case OrdinateType.GOODS_ARTICLE_GOOD:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_ARTICLE_GOOD);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD, OrdinateType.GOODS_ARTICLE_GOOD));
                    OrdinateCreate(ord, OrdinateType.GOODS_PARTY_INTERNAL);
                    OrdinateCreate(ord, OrdinateType.GOODS_PARTY_ENTITY);
                    return ord;
                case OrdinateType.GOODS_PARTY_INTERNAL:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_PARTY_INTERNAL);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimPartyKindCategoryValueLocate(ord_up_category_value, DimPartyKindSingleValueGet(ord_up_category_value, ReportOrderPlanEntityKindType.INTERNAL, OrdinateType.GOODS_PARTY_INTERNAL));
                    OrdinateCreate(ord, OrdinateType.GOODS_INTERNAL_BYARTICLE);
                    OrdinateCreate(ord, OrdinateType.GOODS_INTERNAL_ALL_CODE);
                    return ord;
                case OrdinateType.GOODS_PARTY_ENTITY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_PARTY_ENTITY);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimPartyKindCategoryValueLocate(ord_up_category_value, DimPartyKindSingleValueGet(ord_up_category_value, ReportOrderPlanEntityKindType.ENTITY, OrdinateType.GOODS_PARTY_ENTITY));
                    OrdinateCreate(ord, OrdinateType.GOODS_ENTITY_ALL_CODE);
                    OrdinateCreate(ord, OrdinateType.GOODS_PARTY_ENTITY_BYARTICLE);
                    return ord;
                case OrdinateType.GOODS_ENTITY_ALL_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_ENTITY_ALL_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.BALANCE, OrdinateType.GOODS_ENTITY_ALL_CODE));
                    OrdinateCreate(ord, OrdinateType.GOODS_ENTITY_ALL_NAME);
                    return ord;
                case OrdinateType.GOODS_PARTY_ENTITY_BYARTICLE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_PARTY_ENTITY_BYARTICLE);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.BALANCE, OrdinateType.GOODS_PARTY_ENTITY_BYARTICLE));
                    OrdinateCreate(ord, OrdinateType.GOODS_ENTITY_ARTICLE_FERRO_CODE);
                    OrdinateCreate(ord, OrdinateType.GOODS_ENTITY_ARTICLE_NONFERRO_CODE);
                    OrdinateCreate(ord, OrdinateType.GOODS_ENTITY_ARTICLE_CABLE_CODE);
                    OrdinateCreate(ord, OrdinateType.GOODS_ENTITY_ARTICLE_CHEMICAL_CODE);
                    OrdinateCreate(ord, OrdinateType.GOODS_ENTITY_ARTICLE_STAMPING_CODE);
                    OrdinateCreate(ord, OrdinateType.GOODS_ENTITY_ARTICLE_COMPONENT_CODE);
                    OrdinateCreate(ord, OrdinateType.GOODS_ENTITY_ARTICLE_INSTRUMENT_CODE);
                    OrdinateCreate(ord, OrdinateType.GOODS_ENTITY_ARTICLE_EQUIPMENT_CODE);
                    OrdinateCreate(ord, OrdinateType.GOODS_ENTITY_ARTICLE_OTHER_CODE);
                    return ord;
                case OrdinateType.GOODS_ENTITY_ALL_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_ENTITY_ALL_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = false;
                    OrdinateCreate(ord, OrdinateType.GOODS_ENTITY_ALL_COST);
                    OrdinateCreate(ord, OrdinateType.GOODS_ENTITY_ALL_PAY);
                    return ord;
                case OrdinateType.GOODS_ENTITY_ARTICLE_FERRO_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_ENTITY_ARTICLE_FERRO_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD_FERRO, OrdinateType.GOODS_ENTITY_ARTICLE_FERRO_CODE));
                    OrdinateCreate(ord, OrdinateType.GOODS_ENTITY_ARTICLE_FERRO_NAME);
                    return ord;
                case OrdinateType.GOODS_ENTITY_ALL_COST:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_ENTITY_ALL_COST);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimFinrepCategoryValueLocate(ord_up_category_value, DimFinrepSingleValueGet(ord_up_category_value, ReportOrderPlanFinrepType.FINREP_IE, OrdinateType.GOODS_ENTITY_ALL_COST));
                    return ord;
                case OrdinateType.GOODS_ENTITY_ALL_PAY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_ENTITY_ALL_PAY);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimFinrepCategoryValueLocate(ord_up_category_value, DimFinrepSingleValueGet(ord_up_category_value, ReportOrderPlanFinrepType.FINREP_CF, OrdinateType.GOODS_ENTITY_ALL_PAY));
                    return ord;
                case OrdinateType.GOODS_ENTITY_ARTICLE_FERRO_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_ENTITY_ARTICLE_FERRO_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> goods_entity_article_ferro_name_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_OTHER, OrdinateType.GOODS_ENTITY_ARTICLE_FERRO_NAME);
                    sort_order = 0;
                    foreach (var goods_entity_article_ferro_name_obj in goods_entity_article_ferro_name_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.GOODS_ENTITY_ARTICLE_FERRO_NAME);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, goods_entity_article_ferro_name_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.GOODS_ENTITY_ARTICLE_FERRO_COST);
                        OrdinateCreate(sub_ord, OrdinateType.GOODS_ENTITY_ARTICLE_FERRO_PAY);
                    }
                    return ord;
                case OrdinateType.GOODS_ENTITY_ARTICLE_FERRO_COST:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_ENTITY_ARTICLE_FERRO_COST);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimFinrepCategoryValueLocate(ord_up_category_value, DimFinrepSingleValueGet(ord_up_category_value, ReportOrderPlanFinrepType.FINREP_IE, OrdinateType.GOODS_ENTITY_ARTICLE_FERRO_COST));
                    return ord;
                case OrdinateType.GOODS_ENTITY_ARTICLE_FERRO_PAY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_ENTITY_ARTICLE_FERRO_PAY);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimFinrepCategoryValueLocate(ord_up_category_value, DimFinrepSingleValueGet(ord_up_category_value, ReportOrderPlanFinrepType.FINREP_CF, OrdinateType.GOODS_ENTITY_ARTICLE_FERRO_PAY));
                    return ord;
                case OrdinateType.GOODS_ENTITY_ARTICLE_NONFERRO_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_ENTITY_ARTICLE_NONFERRO_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD_NONFERRO, OrdinateType.GOODS_ENTITY_ARTICLE_NONFERRO_CODE));
                    OrdinateCreate(ord, OrdinateType.GOODS_ENTITY_ARTICLE_NONFERRO_NAME);
                    return ord;
                case OrdinateType.GOODS_ENTITY_ARTICLE_NONFERRO_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_ENTITY_ARTICLE_NONFERRO_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> goods_entity_article_nonferro_name_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_OTHER, OrdinateType.GOODS_ENTITY_ARTICLE_NONFERRO_NAME);
                    sort_order = 0;
                    foreach (var goods_entity_article_nonferro_name_obj in goods_entity_article_nonferro_name_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.GOODS_ENTITY_ARTICLE_NONFERRO_NAME);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, goods_entity_article_nonferro_name_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.GOODS_ENTITY_ARTICLE_NONFERRO_COST);
                        OrdinateCreate(sub_ord, OrdinateType.GOODS_ENTITY_ARTICLE_NONFERRO_PAY);
                    }
                    return ord;
                case OrdinateType.GOODS_ENTITY_ARTICLE_NONFERRO_COST:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_ENTITY_ARTICLE_NONFERRO_COST);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimFinrepCategoryValueLocate(ord_up_category_value, DimFinrepSingleValueGet(ord_up_category_value, ReportOrderPlanFinrepType.FINREP_IE, OrdinateType.GOODS_ENTITY_ARTICLE_NONFERRO_COST));
                    return ord;
                case OrdinateType.GOODS_ENTITY_ARTICLE_NONFERRO_PAY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_ENTITY_ARTICLE_NONFERRO_PAY);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimFinrepCategoryValueLocate(ord_up_category_value, DimFinrepSingleValueGet(ord_up_category_value, ReportOrderPlanFinrepType.FINREP_CF, OrdinateType.GOODS_ENTITY_ARTICLE_NONFERRO_PAY));
                    return ord;
                case OrdinateType.GOODS_ENTITY_ARTICLE_CABLE_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_ENTITY_ARTICLE_CABLE_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD_CABLE, OrdinateType.GOODS_ENTITY_ARTICLE_CABLE_CODE));
                    OrdinateCreate(ord, OrdinateType.GOODS_ENTITY_ARTICLE_CABLE_NAME);
                    return ord;
                case OrdinateType.GOODS_ENTITY_ARTICLE_CHEMICAL_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_ENTITY_ARTICLE_CHEMICAL_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 40;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD_CHEMICAL, OrdinateType.GOODS_ENTITY_ARTICLE_CHEMICAL_CODE));
                    OrdinateCreate(ord, OrdinateType.GOODS_ENTITY_ARTICLE_CHEMICAL_NAME);
                    return ord;
                case OrdinateType.GOODS_ENTITY_ARTICLE_STAMPING_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_ENTITY_ARTICLE_STAMPING_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 50;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD_STAMPING, OrdinateType.GOODS_ENTITY_ARTICLE_STAMPING_CODE));
                    OrdinateCreate(ord, OrdinateType.GOODS_ENTITY_ARTICLE_STAMPING_NAME);
                    return ord;
                case OrdinateType.GOODS_ENTITY_ARTICLE_COMPONENT_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_ENTITY_ARTICLE_COMPONENT_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 60;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD_COMPONENT, OrdinateType.GOODS_ENTITY_ARTICLE_COMPONENT_CODE));
                    OrdinateCreate(ord, OrdinateType.GOODS_ENTITY_ARTICLE_COMPONENT_NAME);
                    return ord;
                case OrdinateType.GOODS_ENTITY_ARTICLE_INSTRUMENT_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_ENTITY_ARTICLE_INSTRUMENT_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 70;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD_INSTRUMENT, OrdinateType.GOODS_ENTITY_ARTICLE_INSTRUMENT_CODE));
                    OrdinateCreate(ord, OrdinateType.GOODS_ENTITY_ARTICLE_INSTRUMENT_NAME);
                    return ord;
                case OrdinateType.GOODS_ENTITY_ARTICLE_EQUIPMENT_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_ENTITY_ARTICLE_EQUIPMENT_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 80;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD_EQUIPMENT, OrdinateType.GOODS_ENTITY_ARTICLE_EQUIPMENT_CODE));
                    OrdinateCreate(ord, OrdinateType.GOODS_ENTITY_ARTICLE_EQUIPMENT_NAME);
                    return ord;
                case OrdinateType.GOODS_ENTITY_ARTICLE_OTHER_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_ENTITY_ARTICLE_OTHER_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 90;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD_OTHER, OrdinateType.GOODS_ENTITY_ARTICLE_OTHER_CODE));
                    OrdinateCreate(ord, OrdinateType.GOODS_ENTITY_ARTICLE_OTHER_NAME);
                    return ord;
                case OrdinateType.GOODS_ENTITY_ARTICLE_CABLE_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_ENTITY_ARTICLE_CABLE_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> goods_entity_article_cable_name_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_OTHER, OrdinateType.GOODS_ENTITY_ARTICLE_CABLE_NAME);
                    sort_order = 0;
                    foreach (var goods_entity_article_cable_name_obj in goods_entity_article_cable_name_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.GOODS_ENTITY_ARTICLE_CABLE_NAME);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, goods_entity_article_cable_name_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.GOODS_ENTITY_ARTICLE_CABLE_COST);
                        OrdinateCreate(sub_ord, OrdinateType.GOODS_ENTITY_ARTICLE_CABLE_PAY);
                    }
                    return ord;
                case OrdinateType.GOODS_ENTITY_ARTICLE_CHEMICAL_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_ENTITY_ARTICLE_CHEMICAL_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> goods_entity_article_chemical_name_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_OTHER, OrdinateType.GOODS_ENTITY_ARTICLE_CHEMICAL_NAME);
                    sort_order = 0;
                    foreach (var goods_entity_article_chemical_name_obj in goods_entity_article_chemical_name_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.GOODS_ENTITY_ARTICLE_CHEMICAL_NAME);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, goods_entity_article_chemical_name_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.GOODS_ENTITY_ARTICLE_CHEMICAL_COST);
                        OrdinateCreate(sub_ord, OrdinateType.GOODS_ENTITY_ARTICLE_CHEMICAL_PAY);
                    }
                    return ord;
                case OrdinateType.GOODS_ENTITY_ARTICLE_STAMPING_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_ENTITY_ARTICLE_STAMPING_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> goods_entity_article_stamping_name_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_OTHER, OrdinateType.GOODS_ENTITY_ARTICLE_STAMPING_NAME);
                    sort_order = 0;
                    foreach (var goods_entity_article_stamping_name_obj in goods_entity_article_stamping_name_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.GOODS_ENTITY_ARTICLE_STAMPING_NAME);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, goods_entity_article_stamping_name_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.GOODS_ENTITY_ARTICLE_STAMPING_COST);
                        OrdinateCreate(sub_ord, OrdinateType.GOODS_ENTITY_ARTICLE_STAMPING_PAY);
                    }
                    return ord;
                case OrdinateType.GOODS_ENTITY_ARTICLE_COMPONENT_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_ENTITY_ARTICLE_COMPONENT_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> goods_entity_article_component_name_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_OTHER, OrdinateType.GOODS_ENTITY_ARTICLE_COMPONENT_NAME);
                    sort_order = 0;
                    foreach (var goods_entity_article_component_name_obj in goods_entity_article_component_name_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.GOODS_ENTITY_ARTICLE_COMPONENT_NAME);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, goods_entity_article_component_name_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.GOODS_ENTITY_ARTICLE_COMPONENT_COST);
                        OrdinateCreate(sub_ord, OrdinateType.GOODS_ENTITY_ARTICLE_COMPONENT_PAY);
                    }
                    return ord;
                case OrdinateType.GOODS_ENTITY_ARTICLE_INSTRUMENT_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_ENTITY_ARTICLE_INSTRUMENT_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> goods_entity_article_instrument_name_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_OTHER, OrdinateType.GOODS_ENTITY_ARTICLE_INSTRUMENT_NAME);
                    sort_order = 0;
                    foreach (var goods_entity_article_instrument_name_obj in goods_entity_article_instrument_name_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.GOODS_ENTITY_ARTICLE_INSTRUMENT_NAME);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, goods_entity_article_instrument_name_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.GOODS_ENTITY_ARTICLE_INSTRUMENT_COST);
                        OrdinateCreate(sub_ord, OrdinateType.GOODS_ENTITY_ARTICLE_INSTRUMENT_PAY);
                    }
                    return ord;
                case OrdinateType.GOODS_ENTITY_ARTICLE_EQUIPMENT_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_ENTITY_ARTICLE_EQUIPMENT_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> goods_entity_article_equipment_name_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_OTHER, OrdinateType.GOODS_ENTITY_ARTICLE_EQUIPMENT_NAME);
                    sort_order = 0;
                    foreach (var goods_entity_article_equipment_name_obj in goods_entity_article_equipment_name_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.GOODS_ENTITY_ARTICLE_EQUIPMENT_NAME);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, goods_entity_article_equipment_name_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.GOODS_ENTITY_ARTICLE_EQUIPMENT_COST);
                        OrdinateCreate(sub_ord, OrdinateType.GOODS_ENTITY_ARTICLE_EQUIPMENT_PAY);
                    }
                    return ord;
                case OrdinateType.GOODS_ENTITY_ARTICLE_OTHER_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_ENTITY_ARTICLE_OTHER_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> goods_entity_article_other_name_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_OTHER, OrdinateType.GOODS_ENTITY_ARTICLE_OTHER_NAME);
                    sort_order = 0;
                    foreach (var goods_entity_article_other_name_obj in goods_entity_article_other_name_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.GOODS_ENTITY_ARTICLE_OTHER_NAME);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, goods_entity_article_other_name_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.GOODS_ENTITY_ARTICLE_OTHER_COST);
                        OrdinateCreate(sub_ord, OrdinateType.GOODS_ENTITY_ARTICLE_OTHER_PAY);
                    }
                    return ord;
                case OrdinateType.GOODS_ENTITY_ARTICLE_CABLE_COST:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_ENTITY_ARTICLE_CABLE_COST);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimFinrepCategoryValueLocate(ord_up_category_value, DimFinrepSingleValueGet(ord_up_category_value, ReportOrderPlanFinrepType.FINREP_IE, OrdinateType.GOODS_ENTITY_ARTICLE_CABLE_COST));
                    return ord;
                case OrdinateType.GOODS_ENTITY_ARTICLE_CABLE_PAY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_ENTITY_ARTICLE_CABLE_PAY);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimFinrepCategoryValueLocate(ord_up_category_value, DimFinrepSingleValueGet(ord_up_category_value, ReportOrderPlanFinrepType.FINREP_CF, OrdinateType.GOODS_ENTITY_ARTICLE_CABLE_PAY));
                    return ord;
                case OrdinateType.GOODS_ENTITY_ARTICLE_CHEMICAL_COST:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_ENTITY_ARTICLE_CHEMICAL_COST);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimFinrepCategoryValueLocate(ord_up_category_value, DimFinrepSingleValueGet(ord_up_category_value, ReportOrderPlanFinrepType.FINREP_IE, OrdinateType.GOODS_ENTITY_ARTICLE_CHEMICAL_COST));
                    return ord;
                case OrdinateType.GOODS_ENTITY_ARTICLE_CHEMICAL_PAY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_ENTITY_ARTICLE_CHEMICAL_PAY);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimFinrepCategoryValueLocate(ord_up_category_value, DimFinrepSingleValueGet(ord_up_category_value, ReportOrderPlanFinrepType.FINREP_CF, OrdinateType.GOODS_ENTITY_ARTICLE_CHEMICAL_PAY));
                    return ord;
                case OrdinateType.GOODS_ENTITY_ARTICLE_STAMPING_COST:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_ENTITY_ARTICLE_STAMPING_COST);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimFinrepCategoryValueLocate(ord_up_category_value, DimFinrepSingleValueGet(ord_up_category_value, ReportOrderPlanFinrepType.FINREP_IE, OrdinateType.GOODS_ENTITY_ARTICLE_STAMPING_COST));
                    return ord;
                case OrdinateType.GOODS_ENTITY_ARTICLE_STAMPING_PAY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_ENTITY_ARTICLE_STAMPING_PAY);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimFinrepCategoryValueLocate(ord_up_category_value, DimFinrepSingleValueGet(ord_up_category_value, ReportOrderPlanFinrepType.FINREP_CF, OrdinateType.GOODS_ENTITY_ARTICLE_STAMPING_PAY));
                    return ord;
                case OrdinateType.GOODS_ENTITY_ARTICLE_COMPONENT_COST:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_ENTITY_ARTICLE_COMPONENT_COST);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimFinrepCategoryValueLocate(ord_up_category_value, DimFinrepSingleValueGet(ord_up_category_value, ReportOrderPlanFinrepType.FINREP_IE, OrdinateType.GOODS_ENTITY_ARTICLE_COMPONENT_COST));
                    return ord;
                case OrdinateType.GOODS_ENTITY_ARTICLE_COMPONENT_PAY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_ENTITY_ARTICLE_COMPONENT_PAY);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimFinrepCategoryValueLocate(ord_up_category_value, DimFinrepSingleValueGet(ord_up_category_value, ReportOrderPlanFinrepType.FINREP_CF, OrdinateType.GOODS_ENTITY_ARTICLE_COMPONENT_PAY));
                    return ord;
                case OrdinateType.GOODS_ENTITY_ARTICLE_INSTRUMENT_COST:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_ENTITY_ARTICLE_INSTRUMENT_COST);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimFinrepCategoryValueLocate(ord_up_category_value, DimFinrepSingleValueGet(ord_up_category_value, ReportOrderPlanFinrepType.FINREP_IE, OrdinateType.GOODS_ENTITY_ARTICLE_INSTRUMENT_COST));
                    return ord;
                case OrdinateType.GOODS_ENTITY_ARTICLE_INSTRUMENT_PAY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_ENTITY_ARTICLE_INSTRUMENT_PAY);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimFinrepCategoryValueLocate(ord_up_category_value, DimFinrepSingleValueGet(ord_up_category_value, ReportOrderPlanFinrepType.FINREP_CF, OrdinateType.GOODS_ENTITY_ARTICLE_INSTRUMENT_PAY));
                    return ord;
                case OrdinateType.GOODS_ENTITY_ARTICLE_EQUIPMENT_COST:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_ENTITY_ARTICLE_EQUIPMENT_COST);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimFinrepCategoryValueLocate(ord_up_category_value, DimFinrepSingleValueGet(ord_up_category_value, ReportOrderPlanFinrepType.FINREP_IE, OrdinateType.GOODS_ENTITY_ARTICLE_EQUIPMENT_COST));
                    return ord;
                case OrdinateType.GOODS_ENTITY_ARTICLE_EQUIPMENT_PAY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_ENTITY_ARTICLE_EQUIPMENT_PAY);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimFinrepCategoryValueLocate(ord_up_category_value, DimFinrepSingleValueGet(ord_up_category_value, ReportOrderPlanFinrepType.FINREP_CF, OrdinateType.GOODS_ENTITY_ARTICLE_EQUIPMENT_PAY));
                    return ord;
                case OrdinateType.GOODS_ENTITY_ARTICLE_OTHER_COST:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_ENTITY_ARTICLE_OTHER_COST);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimFinrepCategoryValueLocate(ord_up_category_value, DimFinrepSingleValueGet(ord_up_category_value, ReportOrderPlanFinrepType.FINREP_IE, OrdinateType.GOODS_ENTITY_ARTICLE_OTHER_COST));
                    return ord;
                case OrdinateType.GOODS_ENTITY_ARTICLE_OTHER_PAY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_ENTITY_ARTICLE_OTHER_PAY);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimFinrepCategoryValueLocate(ord_up_category_value, DimFinrepSingleValueGet(ord_up_category_value, ReportOrderPlanFinrepType.FINREP_CF, OrdinateType.GOODS_ENTITY_ARTICLE_OTHER_PAY));
                    return ord;
                case OrdinateType.GOODS_INTERNAL_BYARTICLE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_INTERNAL_BYARTICLE);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.SUMMALL, OrdinateType.GOODS_INTERNAL_BYARTICLE));
                    OrdinateCreate(ord, OrdinateType.GOODS_INTERNAL_ARTICLE_COMPONENT_CODE);
                    OrdinateCreate(ord, OrdinateType.GOODS_INTERNAL_ARTICLE_INSTRUMENT_CODE);
                    OrdinateCreate(ord, OrdinateType.GOODS_INTERNAL_ARTICLE_EQUIPMENT_CODE);
                    return ord;
                case OrdinateType.GOODS_INTERNAL_ALL_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_INTERNAL_ALL_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.BALANCE, OrdinateType.GOODS_INTERNAL_ALL_CODE));
                    OrdinateCreate(ord, OrdinateType.GOODS_INTERNAL_ALL_NAME);
                    return ord;
                case OrdinateType.GOODS_INTERNAL_ARTICLE_COMPONENT_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_INTERNAL_ARTICLE_COMPONENT_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD_COMPONENT, OrdinateType.GOODS_INTERNAL_ARTICLE_COMPONENT_CODE));
                    OrdinateCreate(ord, OrdinateType.GOODS_INTERNAL_ARTICLE_COMPONENT_NAME);
                    return ord;
                case OrdinateType.GOODS_INTERNAL_ARTICLE_INSTRUMENT_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_INTERNAL_ARTICLE_INSTRUMENT_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD_INSTRUMENT, OrdinateType.GOODS_INTERNAL_ARTICLE_INSTRUMENT_CODE));
                    OrdinateCreate(ord, OrdinateType.GOODS_INTERNAL_ARTICLE_INSTRUMENT_NAME);
                    return ord;
                case OrdinateType.GOODS_INTERNAL_ARTICLE_EQUIPMENT_CODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_INTERNAL_ARTICLE_EQUIPMENT_CODE);
                    ord.Up = ord_up;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.ARTICLE_EXPENSE_GOOD_EQUIPMENT, OrdinateType.GOODS_INTERNAL_ARTICLE_EQUIPMENT_CODE));
                    OrdinateCreate(ord, OrdinateType.GOODS_INTERNAL_ARTICLE_EQUIPMENT_NAME);
                    return ord;
                case OrdinateType.GOODS_INTERNAL_ALL_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_INTERNAL_ALL_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = false;
                    OrdinateCreate(ord, OrdinateType.GOODS_INTERNAL_ALL_COST);
                    return ord;
                case OrdinateType.GOODS_INTERNAL_ARTICLE_COMPONENT_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_INTERNAL_ARTICLE_COMPONENT_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> goods_internal_article_component_name_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_OTHER, OrdinateType.GOODS_INTERNAL_ARTICLE_COMPONENT_NAME);
                    sort_order = 0;
                    foreach (var goods_internal_article_component_name_obj in goods_internal_article_component_name_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.GOODS_INTERNAL_ARTICLE_COMPONENT_NAME);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, goods_internal_article_component_name_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.GOODS_INTERNAL_ARTICLE_COMPONENT_COST);
                    }
                    return ord;
                case OrdinateType.GOODS_INTERNAL_ARTICLE_INSTRUMENT_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_INTERNAL_ARTICLE_INSTRUMENT_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> goods_internal_article_instrument_name_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_OTHER, OrdinateType.GOODS_INTERNAL_ARTICLE_INSTRUMENT_NAME);
                    sort_order = 0;
                    foreach (var goods_internal_article_instrument_name_obj in goods_internal_article_instrument_name_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.GOODS_INTERNAL_ARTICLE_INSTRUMENT_NAME);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, goods_internal_article_instrument_name_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.GOODS_INTERNAL_ARTICLE_INSTRUMENT_COST);
                    }
                    return ord;
                case OrdinateType.GOODS_INTERNAL_ARTICLE_EQUIPMENT_NAME:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_INTERNAL_ARTICLE_EQUIPMENT_NAME);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> goods_internal_article_equipment_name_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_OTHER, OrdinateType.GOODS_INTERNAL_ARTICLE_EQUIPMENT_NAME);
                    sort_order = 0;
                    foreach (var goods_internal_article_equipment_name_obj in goods_internal_article_equipment_name_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.GOODS_INTERNAL_ARTICLE_EQUIPMENT_NAME);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, goods_internal_article_equipment_name_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.GOODS_INTERNAL_ARTICLE_EQUIPMENT_COST);
                    }
                    return ord;
                case OrdinateType.GOODS_INTERNAL_ALL_COST:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_INTERNAL_ALL_COST);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimFinrepCategoryValueLocate(ord_up_category_value, DimFinrepSingleValueGet(ord_up_category_value, ReportOrderPlanFinrepType.FINREP_IE, OrdinateType.GOODS_INTERNAL_ALL_COST));
                    return ord;
                case OrdinateType.GOODS_INTERNAL_ARTICLE_COMPONENT_COST:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_INTERNAL_ARTICLE_COMPONENT_COST);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimFinrepCategoryValueLocate(ord_up_category_value, DimFinrepSingleValueGet(ord_up_category_value, ReportOrderPlanFinrepType.FINREP_IE, OrdinateType.GOODS_INTERNAL_ARTICLE_COMPONENT_COST));
                    return ord;
                case OrdinateType.GOODS_INTERNAL_ARTICLE_INSTRUMENT_COST:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_INTERNAL_ARTICLE_INSTRUMENT_COST);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimFinrepCategoryValueLocate(ord_up_category_value, DimFinrepSingleValueGet(ord_up_category_value, ReportOrderPlanFinrepType.FINREP_IE, OrdinateType.GOODS_INTERNAL_ARTICLE_INSTRUMENT_COST));
                    return ord;
                case OrdinateType.GOODS_INTERNAL_ARTICLE_EQUIPMENT_COST:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.GOODS_INTERNAL_ARTICLE_EQUIPMENT_COST);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimFinrepCategoryValueLocate(ord_up_category_value, DimFinrepSingleValueGet(ord_up_category_value, ReportOrderPlanFinrepType.FINREP_IE, OrdinateType.GOODS_INTERNAL_ARTICLE_EQUIPMENT_COST));
                    return ord;
                default:
                    return null;
            }
        }
        
        protected ReportOrderPlanCategoryValue DimReportCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanReport obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimReport = obj;
            value.DimEntity = value.DimReport?.Entity;
            value.DimOrder = value.DimReport?.Order;
            value.DimVatMode = value.DimOrder?.VatMode;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimValutaCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanValuta obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimValuta = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimArticleCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanArticle obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimArticle = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimPartyKindCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanEntityKind obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimPartyKind = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimValueTypeCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanValueType obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimValueType = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimFinrepCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanFinrep obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimFinrep = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimFindealCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanFindeal obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimFindeal = obj;
            value.DimDeal = value.DimFindeal?.Deal;
            value.DimParty = value.DimDeal?.Party;
            value.DimPartyKind = value.DimParty?.Kind;
            value.DimDealKind = value.DimDeal?.Kind;
            value.DimValutaObligation = value.DimFindeal?.Valuta;
            value.DimVatModeObligation = value.DimFindeal?.VatMode;
            value.DimArticle = value.DimFindeal?.Article;
            value.DimFindealKind = value.DimFindeal?.Kind;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanValuta DimValutaSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanValutaType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.GOODS_VALUTA:
                    return context.DimReport?.Valuta;
                default:
                    return null;
            }
        }
        protected ReportOrderPlanArticle DimArticleSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanArticleType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.GOODS_ARTICLE_GOOD:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.GOODS_ENTITY_ARTICLE_FERRO_CODE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.GOODS_ENTITY_ARTICLE_NONFERRO_CODE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.GOODS_ENTITY_ARTICLE_CABLE_CODE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.GOODS_ENTITY_ARTICLE_CHEMICAL_CODE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.GOODS_ENTITY_ARTICLE_STAMPING_CODE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.GOODS_ENTITY_ARTICLE_COMPONENT_CODE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.GOODS_ENTITY_ARTICLE_INSTRUMENT_CODE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.GOODS_ENTITY_ARTICLE_EQUIPMENT_CODE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.GOODS_ENTITY_ARTICLE_OTHER_CODE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.GOODS_INTERNAL_ARTICLE_COMPONENT_CODE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.GOODS_INTERNAL_ARTICLE_INSTRUMENT_CODE:
                    return Report.ReportCore.ConstArticle[model];
                case OrdinateType.GOODS_INTERNAL_ARTICLE_EQUIPMENT_CODE:
                    return Report.ReportCore.ConstArticle[model];
                default:
                    return null;
            }
        }
        protected ReportOrderPlanEntityKind DimPartyKindSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanEntityKindType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.GOODS_PARTY_INTERNAL:
                    return Report.ReportCore.ConstEntityKind[model];
                case OrdinateType.GOODS_PARTY_ENTITY:
                    return Report.ReportCore.ConstEntityKind[model];
                default:
                    return null;
            }
        }
        protected ReportOrderPlanValueType DimValueTypeSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanValueTypeType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.GOODS_ENTITY_ALL_CODE:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.GOODS_PARTY_ENTITY_BYARTICLE:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.GOODS_INTERNAL_BYARTICLE:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.GOODS_INTERNAL_ALL_CODE:
                    return Report.ReportCore.ConstValueType[model];
                default:
                    return null;
            }
        }
        protected ReportOrderPlanFinrep DimFinrepSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanFinrepType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.GOODS_ENTITY_ALL_COST:
                    return Report.ReportCore.ConstFinrep[model];
                case OrdinateType.GOODS_ENTITY_ALL_PAY:
                    return Report.ReportCore.ConstFinrep[model];
                case OrdinateType.GOODS_ENTITY_ARTICLE_FERRO_COST:
                    return Report.ReportCore.ConstFinrep[model];
                case OrdinateType.GOODS_ENTITY_ARTICLE_FERRO_PAY:
                    return Report.ReportCore.ConstFinrep[model];
                case OrdinateType.GOODS_ENTITY_ARTICLE_NONFERRO_COST:
                    return Report.ReportCore.ConstFinrep[model];
                case OrdinateType.GOODS_ENTITY_ARTICLE_NONFERRO_PAY:
                    return Report.ReportCore.ConstFinrep[model];
                case OrdinateType.GOODS_ENTITY_ARTICLE_CABLE_COST:
                    return Report.ReportCore.ConstFinrep[model];
                case OrdinateType.GOODS_ENTITY_ARTICLE_CABLE_PAY:
                    return Report.ReportCore.ConstFinrep[model];
                case OrdinateType.GOODS_ENTITY_ARTICLE_CHEMICAL_COST:
                    return Report.ReportCore.ConstFinrep[model];
                case OrdinateType.GOODS_ENTITY_ARTICLE_CHEMICAL_PAY:
                    return Report.ReportCore.ConstFinrep[model];
                case OrdinateType.GOODS_ENTITY_ARTICLE_STAMPING_COST:
                    return Report.ReportCore.ConstFinrep[model];
                case OrdinateType.GOODS_ENTITY_ARTICLE_STAMPING_PAY:
                    return Report.ReportCore.ConstFinrep[model];
                case OrdinateType.GOODS_ENTITY_ARTICLE_COMPONENT_COST:
                    return Report.ReportCore.ConstFinrep[model];
                case OrdinateType.GOODS_ENTITY_ARTICLE_COMPONENT_PAY:
                    return Report.ReportCore.ConstFinrep[model];
                case OrdinateType.GOODS_ENTITY_ARTICLE_INSTRUMENT_COST:
                    return Report.ReportCore.ConstFinrep[model];
                case OrdinateType.GOODS_ENTITY_ARTICLE_INSTRUMENT_PAY:
                    return Report.ReportCore.ConstFinrep[model];
                case OrdinateType.GOODS_ENTITY_ARTICLE_EQUIPMENT_COST:
                    return Report.ReportCore.ConstFinrep[model];
                case OrdinateType.GOODS_ENTITY_ARTICLE_EQUIPMENT_PAY:
                    return Report.ReportCore.ConstFinrep[model];
                case OrdinateType.GOODS_ENTITY_ARTICLE_OTHER_COST:
                    return Report.ReportCore.ConstFinrep[model];
                case OrdinateType.GOODS_ENTITY_ARTICLE_OTHER_PAY:
                    return Report.ReportCore.ConstFinrep[model];
                case OrdinateType.GOODS_INTERNAL_ALL_COST:
                    return Report.ReportCore.ConstFinrep[model];
                case OrdinateType.GOODS_INTERNAL_ARTICLE_COMPONENT_COST:
                    return Report.ReportCore.ConstFinrep[model];
                case OrdinateType.GOODS_INTERNAL_ARTICLE_INSTRUMENT_COST:
                    return Report.ReportCore.ConstFinrep[model];
                case OrdinateType.GOODS_INTERNAL_ARTICLE_EQUIPMENT_COST:
                    return Report.ReportCore.ConstFinrep[model];
                default:
                    return null;
            }
        }
        protected IList<ReportOrderPlanReport> DimReportQueryValueGet(ReportOrderPlanCategoryValue context, ReportOrderPlanReportType model, OrdinateType ord_type) {
            return Report.ReportCore.QueryReport(context, model);
        }
        protected IList<ReportOrderPlanFindeal> DimFindealQueryValueGet(ReportOrderPlanCategoryValue context, ReportOrderPlanFindealType model, OrdinateType ord_type) {
            return Report.ReportCore.QueryFindeal(context, model);
        }
        
    }
    
    public partial class ReportOrderPlanAxisCalcImportCol: MdfAxis<ReportOrderPlanReport,ReportOrderPlanCategoryValue,ReportOrderPlanTable,ReportOrderPlanTableCell,ReportOrderPlanDataPoint> {
        
        public enum OrdinateType {
            CCIC_ROOT =  429,
            CCIC_PERIOD_PLAN =  463,
            CCIC_PERIOD_YEAR =  467,
            CCIC_PERIOD_MONTH =  473,
            CCIC_PERIOD_YEAR_YEAR =  485,
            CCIC_SCENARIO_FORECAST =  513,
            CCIC_PERIOD_YEAR_END =  884,
        }
        
        public class Ordinate : MdfAxisOrdinate {
            private OrdinateType _OrdinateType;
            public OrdinateType OrdinateType{
                get { return _OrdinateType; }
            }
            
            public Ordinate(ReportOrderPlanAxisCalcImportCol axis, MdfAxisOrdinateValueType value_type, OrdinateType ord_type): base(axis, value_type)  {
                _OrdinateType = ord_type;
            }
        }
        
        public ReportOrderPlanAxisCalcImportCol(ReportOrderPlanReport report): base(report) { }
        
        public override void OrdinatesFill() {
            Root = OrdinateCreate(null, OrdinateType.CCIC_ROOT);
        }
        
        protected Ordinate OrdinateCreate(Ordinate ord_up, OrdinateType ord_type) {
            Ordinate ord;
            Ordinate sub_ord;
            Int32 sort_order = 0;
            ReportOrderPlanCategoryValue ord_up_category_value = ord_up?.CategoryValue ?? ReportOrderPlanCategoryValue.DefaultCategoryValue;
            switch (ord_type) {
                case OrdinateType.CCIC_ROOT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIC_ROOT);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanReport> ccic_root_objs = DimReportQueryValueGet(ord.CategoryValue, ReportOrderPlanReportType.REPORT, OrdinateType.CCIC_ROOT);
                    sort_order = 0;
                    foreach (var ccic_root_obj in ccic_root_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CCIC_ROOT);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimReportCategoryValueLocate(ord.CategoryValue, ccic_root_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.CCIC_SCENARIO_FORECAST);
                    }
                    return ord;
                case OrdinateType.CCIC_PERIOD_PLAN:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIC_PERIOD_PLAN);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanPeriod> ccic_period_plan_objs = DimPeriodQueryValueGet(ord.CategoryValue, ReportOrderPlanPeriodType.PERIOD_PLAN, OrdinateType.CCIC_PERIOD_PLAN);
                    sort_order = 0;
                    foreach (var ccic_period_plan_obj in ccic_period_plan_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CCIC_PERIOD_PLAN);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimPeriodCategoryValueLocate(ord.CategoryValue, ccic_period_plan_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.CCIC_PERIOD_YEAR);
                    }
                    return ord;
                case OrdinateType.CCIC_PERIOD_YEAR:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIC_PERIOD_YEAR);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanPeriod> ccic_period_year_objs = DimPeriodQueryValueGet(ord.CategoryValue, ReportOrderPlanPeriodType.PERIOD_PLAN_YEAR, OrdinateType.CCIC_PERIOD_YEAR);
                    sort_order = 0;
                    foreach (var ccic_period_year_obj in ccic_period_year_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CCIC_PERIOD_YEAR);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimPeriodCategoryValueLocate(ord.CategoryValue, ccic_period_year_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.CCIC_PERIOD_MONTH);
                        OrdinateCreate(sub_ord, OrdinateType.CCIC_PERIOD_YEAR_YEAR);
                        OrdinateCreate(sub_ord, OrdinateType.CCIC_PERIOD_YEAR_END);
                    }
                    return ord;
                case OrdinateType.CCIC_PERIOD_MONTH:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIC_PERIOD_MONTH);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanPeriod> ccic_period_month_objs = DimPeriodQueryValueGet(ord.CategoryValue, ReportOrderPlanPeriodType.PERIOD_PLAN_MONTH, OrdinateType.CCIC_PERIOD_MONTH);
                    sort_order = 0;
                    foreach (var ccic_period_month_obj in ccic_period_month_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CCIC_PERIOD_MONTH);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimPeriodCategoryValueLocate(ord.CategoryValue, ccic_period_month_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                    }
                    return ord;
                case OrdinateType.CCIC_PERIOD_YEAR_YEAR:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIC_PERIOD_YEAR_YEAR);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.CCIC_SCENARIO_FORECAST:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIC_SCENARIO_FORECAST);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimScenarioCategoryValueLocate(ord_up_category_value, DimScenarioSingleValueGet(ord_up_category_value, ReportOrderPlanScenarioType.FORECAST, OrdinateType.CCIC_SCENARIO_FORECAST));
                    OrdinateCreate(ord, OrdinateType.CCIC_PERIOD_PLAN);
                    return ord;
                case OrdinateType.CCIC_PERIOD_YEAR_END:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIC_PERIOD_YEAR_END);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanPeriod> ccic_period_year_end_objs = DimPeriodQueryValueGet(ord.CategoryValue, ReportOrderPlanPeriodType.PERIOD_END, OrdinateType.CCIC_PERIOD_YEAR_END);
                    sort_order = 0;
                    foreach (var ccic_period_year_end_obj in ccic_period_year_end_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CCIC_PERIOD_YEAR_END);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimPeriodCategoryValueLocate(ord.CategoryValue, ccic_period_year_end_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                    }
                    return ord;
                default:
                    return null;
            }
        }
        
        protected ReportOrderPlanCategoryValue DimReportCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanReport obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimReport = obj;
            value.DimEntity = value.DimReport?.Entity;
            value.DimOrder = value.DimReport?.Order;
            value.DimVatMode = value.DimOrder?.VatMode;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimPeriodCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanPeriod obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimPeriod = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimScenarioCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanScenario obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimScenario = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanScenario DimScenarioSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanScenarioType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.CCIC_SCENARIO_FORECAST:
                    return Report.ReportCore.ConstScenario[model];
                default:
                    return null;
            }
        }
        protected IList<ReportOrderPlanReport> DimReportQueryValueGet(ReportOrderPlanCategoryValue context, ReportOrderPlanReportType model, OrdinateType ord_type) {
            return Report.ReportCore.QueryReport(context, model);
        }
        protected IList<ReportOrderPlanPeriod> DimPeriodQueryValueGet(ReportOrderPlanCategoryValue context, ReportOrderPlanPeriodType model, OrdinateType ord_type) {
            return Report.ReportCore.QueryPeriod(context, model);
        }
        
    }
    
    public partial class ReportOrderPlanAxisCalcImportRow: MdfAxis<ReportOrderPlanReport,ReportOrderPlanCategoryValue,ReportOrderPlanTable,ReportOrderPlanTableCell,ReportOrderPlanDataPoint> {
        
        public enum OrdinateType {
            CCIR_ROOT =  430,
            CCIR_CF =  794,
            CCIR_IE =  795,
            CCIR_IE_VATALLSUBJECT =  796,
            CCIR_IE_VATNOTSUBJECT =  797,
            CCIR_IE_VATSUBJECT =  798,
            CCIR_IE_VATALLSUBJECT_REPORT =  799,
            CCIR_PARTYENTITY =  804,
            CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ =  805,
            CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDEALALL =  807,
            CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDEALOTHER =  808,
            CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDEALPARTY =  809,
            CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDALL_VALFIND =  813,
            CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDOTHER_VALFIND =  814,
            CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDPARTY_VALFIND =  815,
            CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDALL_VALFIN_SUMMALL =  816,
            CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDOTHER_VALFIN_SUMMALL =  817,
            CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDPARTY_VALFIN_SUMMALL =  818,
            CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUBJ =  819,
            CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUBJ_FINDEALALL =  820,
            CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUBJ_FINDEALOTHER =  821,
            CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUBJ_FINDEALPARTY =  822,
            CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUBJ_FINDALL_VALFIND =  823,
            CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUBJ_FINDOTHER_VALFIND =  824,
            CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUBJ_FINDPARTY_VALFIND =  825,
            CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUB_FINDALL_VALFIN_SUMMALL =  826,
            CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTS_FINDOTHER_VALFIN_COST =  827,
            CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTS_FINDPARTY_VALFIN_BALANCE =  828,
            CCIR_IE_VATSUBJECT_REPORT =  829,
            CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ =  830,
            CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDEALALL =  832,
            CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDEALOTHER =  833,
            CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDEALPARTY =  834,
            CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDALL_VALFIND =  838,
            CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDOTHER_VALFIND =  839,
            CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDPARTY_VALFIND =  840,
            CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDALL_VALFIN_VAT =  844,
            CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDOTHER_VALFIN_COST =  845,
            CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDPARTY_VALFIN_BALANCE =  846,
            CCIR_IE_VATNOTSUBJ_REPORT =  850,
            CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ =  851,
            CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDEALALL =  852,
            CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDEALOTHER =  853,
            CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDEALPARTY =  854,
            CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDALL_VALFIND =  855,
            CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDOTHER_VALFIND =  856,
            CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDPARTY_VALFIND =  857,
            CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDALL_VALFIN_VAT =  858,
            CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDALL_VALFIN_VATINCOST =  859,
            CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDOTHER_VALFIN_COST =  860,
            CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDPARTY_VALFIN_BALANCE =  861,
            CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL =  862,
            CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL_VALUTA =  863,
            CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL_VALUTA_COST =  864,
            CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL_VALUTA_BALANCE =  865,
            CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL_VALUTA_SUMMALL =  866,
            CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL_VALUTA_VAT =  867,
            CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL_VALUTA_VATINCOST =  868,
            CCIR_CF_BALANCE =  869,
            CCIR_CF_REPORT_PARTYENTITY =  871,
            CCIR_CF_REPORT =  872,
            CCIR_CF_PENTITY_REPORT_FINDEALOTHER =  873,
            CCIR_CF_PENTITY_REPORT_FINDEALPARTY =  874,
            CCIR_CF_PENTITY_REPORT_VALUTAFINDEAL =  875,
            CCIR_CF_PENTITY_REPORT_FINDEALOTHER_VALUTA =  876,
            CCIR_CF_PENTITY_REPORT_FINDEALPARTY_VALUTA =  877,
            CCIR_CF_PENTITY_REPORT_VALUTAFINDEAL_REPORTVALUTA =  878,
            CCIR_CF_PENTITY_REPORT_FINDEALOTHER_VALUTA_PREPAY =  879,
            CCIR_CF_PENTITY_REPORT_FINDEALPARTY_VALUTA_ALLPAY =  880,
            CCIR_CF_PENTITY_REPORT_VALUTAFINDEAL_REPORTVALUTA_ALLPAY =  881,
            CCIR_CF_PENTITY_REPORT_VALUTAFINDEAL_REPORTVALUTA_PREPAY =  882,
            CCIR_CF_PENTITY_REPORT_VALUTAFINDEAL_REPORTVALUTA_POSTPAY =  883,
            CCIR_CF_REPORT_VALUTAFINDEAL =  885,
            CCIR_CF_REPORT_ALLFINDEAL =  886,
            CCIR_CF_REPORT_VALUTAFINDEAL_FINDEALVALUTA =  887,
            CCIR_CF_REPORT_VALUTAFINDEAL_REPORTVALUTA =  888,
            CCIR_CF_REPORT_VALUTAFINDEAL_FINDEALVALUTA_ALLPAY =  889,
            CCIR_CF_REPORT_VALUTAFINDEAL_FINDEALVALUTA_PREPAY =  890,
            CCIR_CF_REPORT_VALUTAFINDEAL_FINDEALVALUTA_POSTPAY =  891,
            CCIR_CF_REPORT_VALUTAFINDEAL_REPORTVALUTA_ALLPAY =  892,
            CCIR_CF_REPORT_VALUTAFINDEAL_REPORTVALUTA_PREPAY =  893,
            CCIR_CF_REPORT_VALUTAFINDEAL_REPORTVALUTA_POSTPAY =  894,
            CCIR_IE_REPORT_ALLFINDEAL =  895,
            CCIR_IE_REPORT_VALUTAFINDEAL =  896,
            CCIR_IE_REPORT_ALLFINDEAL_REPORTVALUTA =  899,
            CCIR_IE_REPORT_VALUTAFINDEAL_VALUTA =  900,
            CCIR_IE_REPORT_ALLFINDEAL_REPORTVALUTA_COST =  901,
            CCIR_IE_REPORT_ALLFINDEAL_REPORTVALUTA_BALANCE =  902,
            CCIR_IE_REPORT_ALLFINDEAL_REPORTVALUTA_SUMMALL =  903,
            CCIR_IE_REPORT_VALUTAFINDEAL_VALUTA_COST =  904,
            CCIR_IE_REPORT_VALUTAFINDEAL_VALUTA_BALANCE =  905,
            CCIR_IE_REPORT_VALUTAFINDEAL_VALUTA_SUMMALL =  906,
            CCIR_IE_REPORT =  907,
            CCIR_PARTYSTAFF =  908,
            CCIR_STAFF_REPORT =  909,
            CCIR_STAFF_PRIMARYCOUNT =  910,
            CCIR_STAFF_PRIMARYBALANCE =  911,
            CCIR_STAFF_REPORT_VALUTAREPORT =  912,
            CCIR_STAFF_REPORT_PRIMARYCOUNT_FINDEAL =  913,
            CCIR_STAFF_REPORT_PRIMARYCOUNT_FINDEAL_BALANCE =  914,
            CCIR_STAFF_REPORT_PRIMARYCOUNT_FINDEAL_COST =  915,
            CCIR_STAFF_REPORT_PRIMARYCOUNT_FINDEAL_INSURANCE =  916,
            CCIR_STAFF_REPORT_PRIMARYCOUNT_FINDEAL_OVERHEAD =  917,
            CCIR_STAFF_REPORT_FREEPRIMARY =  919,
            CCIR_CF_REPORT_PARTYSTAFF =  920,
            CCIR_CF_REPORT_PARTYSTAFF_FINDEAL =  921,
            CCIR_CF_REPORT_PARTYSTAFF_FINDEALVALUTA =  922,
            CCIR_CF_REPORT_PARTYSTAFF_FINDEALVALUTA_ALLPAY =  923,
            CCIR_CF_REPORT_PARTYSTAFF_FINDEALVALUTA_PREPAY =  924,
            CCIR_STAFF_PRIMBALANCE_REPORT =  925,
            CCIR_STAFF_PRIMBALANCE_REPORT_FREEPRIMARY =  926,
            CCIR_STAFF_PRIMBALANCE_REPORT_VALUTAREPORT =  927,
            CCIR_STAFF_REPORT_PRIMBALANCE_FINDEAL =  928,
            CCIR_STAFF_REPORT_PRIMBALANCE_FINDEAL_BALANCE =  929,
            CCIR_STAFF_REPORT_PRIMBALANCE_FINDEAL_COST =  930,
            CCIR_STAFF_REPORT_PRIMBALANCE_FINDEAL_INSURANCE =  931,
            CCIR_STAFF_REPORT_PRIMBALANCE_FINDEAL_OVERHEAD =  932,
        }
        
        public class Ordinate : MdfAxisOrdinate {
            private OrdinateType _OrdinateType;
            public OrdinateType OrdinateType{
                get { return _OrdinateType; }
            }
            
            public Ordinate(ReportOrderPlanAxisCalcImportRow axis, MdfAxisOrdinateValueType value_type, OrdinateType ord_type): base(axis, value_type)  {
                _OrdinateType = ord_type;
            }
        }
        
        public ReportOrderPlanAxisCalcImportRow(ReportOrderPlanReport report): base(report) { }
        
        public override void OrdinatesFill() {
            Root = OrdinateCreate(null, OrdinateType.CCIR_ROOT);
        }
        
        protected Ordinate OrdinateCreate(Ordinate ord_up, OrdinateType ord_type) {
            Ordinate ord;
            Ordinate sub_ord;
            Int32 sort_order = 0;
            ReportOrderPlanCategoryValue ord_up_category_value = ord_up?.CategoryValue ?? ReportOrderPlanCategoryValue.DefaultCategoryValue;
            switch (ord_type) {
                case OrdinateType.CCIR_ROOT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_ROOT);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimScenarioCategoryValueLocate(ord_up_category_value, DimScenarioSingleValueGet(ord_up_category_value, ReportOrderPlanScenarioType.FORECAST, OrdinateType.CCIR_ROOT));
                    OrdinateCreate(ord, OrdinateType.CCIR_CF);
                    OrdinateCreate(ord, OrdinateType.CCIR_IE);
                    return ord;
                case OrdinateType.CCIR_CF:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_CF);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimFinrepCategoryValueLocate(ord_up_category_value, DimFinrepSingleValueGet(ord_up_category_value, ReportOrderPlanFinrepType.FINREP_CF, OrdinateType.CCIR_CF));
                    OrdinateCreate(ord, OrdinateType.CCIR_CF_BALANCE);
                    return ord;
                case OrdinateType.CCIR_IE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimFinrepCategoryValueLocate(ord_up_category_value, DimFinrepSingleValueGet(ord_up_category_value, ReportOrderPlanFinrepType.FINREP_IE, OrdinateType.CCIR_IE));
                    OrdinateCreate(ord, OrdinateType.CCIR_PARTYENTITY);
                    OrdinateCreate(ord, OrdinateType.CCIR_IE_REPORT);
                    OrdinateCreate(ord, OrdinateType.CCIR_PARTYSTAFF);
                    return ord;
                case OrdinateType.CCIR_IE_VATALLSUBJECT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATALLSUBJECT);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    OrdinateCreate(ord, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT);
                    return ord;
                case OrdinateType.CCIR_IE_VATNOTSUBJECT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATNOTSUBJECT);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimVatModeCategoryValueLocate(ord_up_category_value, DimVatModeSingleValueGet(ord_up_category_value, ReportOrderPlanVatModeType.NOT_SUBJECT, OrdinateType.CCIR_IE_VATNOTSUBJECT));
                    OrdinateCreate(ord, OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT);
                    return ord;
                case OrdinateType.CCIR_IE_VATSUBJECT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATSUBJECT);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanVatMode> ccir_ie_vatsubject_objs = DimVatModeQueryValueGet(ord.CategoryValue, ReportOrderPlanVatModeType.SUBJECT, OrdinateType.CCIR_IE_VATSUBJECT);
                    sort_order = 0;
                    foreach (var ccir_ie_vatsubject_obj in ccir_ie_vatsubject_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CCIR_IE_VATSUBJECT);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimVatModeCategoryValueLocate(ord.CategoryValue, ccir_ie_vatsubject_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_IE_VATSUBJECT_REPORT);
                    }
                    return ord;
                case OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanReport> ccir_ie_vatallsubject_report_objs = DimReportQueryValueGet(ord.CategoryValue, ReportOrderPlanReportType.REPORT, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT);
                    sort_order = 0;
                    foreach (var ccir_ie_vatallsubject_report_obj in ccir_ie_vatallsubject_report_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimReportCategoryValueLocate(ord.CategoryValue, ccir_ie_vatallsubject_report_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ);
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUBJ);
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL);
                    }
                    return ord;
                case OrdinateType.CCIR_PARTYENTITY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_PARTYENTITY);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimPartyKindCategoryValueLocate(ord_up_category_value, DimPartyKindSingleValueGet(ord_up_category_value, ReportOrderPlanEntityKindType.ENTITY, OrdinateType.CCIR_PARTYENTITY));
                    OrdinateCreate(ord, OrdinateType.CCIR_IE_VATALLSUBJECT);
                    OrdinateCreate(ord, OrdinateType.CCIR_IE_VATNOTSUBJECT);
                    OrdinateCreate(ord, OrdinateType.CCIR_IE_VATSUBJECT);
                    return ord;
                case OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanVatMode> ccir_ie_vatallsubject_report_oblvatsubj_objs = DimVatModeObligationQueryValueGet(ord.CategoryValue, ReportOrderPlanVatModeType.SUBJECT, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ);
                    sort_order = 0;
                    foreach (var ccir_ie_vatallsubject_report_oblvatsubj_obj in ccir_ie_vatallsubject_report_oblvatsubj_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimVatModeObligationCategoryValueLocate(ord.CategoryValue, ccir_ie_vatallsubject_report_oblvatsubj_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDEALALL);
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDEALOTHER);
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDEALPARTY);
                    }
                    return ord;
                case OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDEALALL:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDEALALL);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> ccir_ie_vatallsubject_report_oblvatsubj_findealall_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDEALALL);
                    sort_order = 0;
                    foreach (var ccir_ie_vatallsubject_report_oblvatsubj_findealall_obj in ccir_ie_vatallsubject_report_oblvatsubj_findealall_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDEALALL);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, ccir_ie_vatallsubject_report_oblvatsubj_findealall_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDALL_VALFIND);
                    }
                    return ord;
                case OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDEALOTHER:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDEALOTHER);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> ccir_ie_vatallsubject_report_oblvatsubj_findealother_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDEALOTHER);
                    sort_order = 0;
                    foreach (var ccir_ie_vatallsubject_report_oblvatsubj_findealother_obj in ccir_ie_vatallsubject_report_oblvatsubj_findealother_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDEALOTHER);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, ccir_ie_vatallsubject_report_oblvatsubj_findealother_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDOTHER_VALFIND);
                    }
                    return ord;
                case OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDEALPARTY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDEALPARTY);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> ccir_ie_vatallsubject_report_oblvatsubj_findealparty_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDEALPARTY);
                    sort_order = 0;
                    foreach (var ccir_ie_vatallsubject_report_oblvatsubj_findealparty_obj in ccir_ie_vatallsubject_report_oblvatsubj_findealparty_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDEALPARTY);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, ccir_ie_vatallsubject_report_oblvatsubj_findealparty_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDPARTY_VALFIND);
                    }
                    return ord;
                case OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDALL_VALFIND:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDALL_VALFIND);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_FINDEAL_VALUTA, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDALL_VALFIND));
                    OrdinateCreate(ord, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDALL_VALFIN_SUMMALL);
                    return ord;
                case OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDOTHER_VALFIND:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDOTHER_VALFIND);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_FINDEAL_VALUTA, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDOTHER_VALFIND));
                    OrdinateCreate(ord, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDOTHER_VALFIN_SUMMALL);
                    return ord;
                case OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDPARTY_VALFIND:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDPARTY_VALFIND);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_FINDEAL_VALUTA, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDPARTY_VALFIND));
                    OrdinateCreate(ord, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDPARTY_VALFIN_SUMMALL);
                    return ord;
                case OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDALL_VALFIN_SUMMALL:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDALL_VALFIN_SUMMALL);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.SUMMALL, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDALL_VALFIN_SUMMALL));
                    return ord;
                case OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDOTHER_VALFIN_SUMMALL:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDOTHER_VALFIN_SUMMALL);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDPARTY_VALFIN_SUMMALL:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDPARTY_VALFIN_SUMMALL);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUBJ:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUBJ);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimVatModeObligationCategoryValueLocate(ord_up_category_value, DimVatModeObligationSingleValueGet(ord_up_category_value, ReportOrderPlanVatModeType.NOT_SUBJECT, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUBJ));
                    OrdinateCreate(ord, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUBJ_FINDEALALL);
                    OrdinateCreate(ord, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUBJ_FINDEALOTHER);
                    OrdinateCreate(ord, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUBJ_FINDEALPARTY);
                    return ord;
                case OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUBJ_FINDEALALL:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUBJ_FINDEALALL);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> ccir_ie_vatallsubject_report_oblvatnotsubj_findealall_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUBJ_FINDEALALL);
                    sort_order = 0;
                    foreach (var ccir_ie_vatallsubject_report_oblvatnotsubj_findealall_obj in ccir_ie_vatallsubject_report_oblvatnotsubj_findealall_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUBJ_FINDEALALL);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, ccir_ie_vatallsubject_report_oblvatnotsubj_findealall_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUBJ_FINDALL_VALFIND);
                    }
                    return ord;
                case OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUBJ_FINDEALOTHER:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUBJ_FINDEALOTHER);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> ccir_ie_vatallsubject_report_oblvatnotsubj_findealother_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_NOTPARTY, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUBJ_FINDEALOTHER);
                    sort_order = 0;
                    foreach (var ccir_ie_vatallsubject_report_oblvatnotsubj_findealother_obj in ccir_ie_vatallsubject_report_oblvatnotsubj_findealother_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUBJ_FINDEALOTHER);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, ccir_ie_vatallsubject_report_oblvatnotsubj_findealother_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUBJ_FINDOTHER_VALFIND);
                    }
                    return ord;
                case OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUBJ_FINDEALPARTY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUBJ_FINDEALPARTY);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> ccir_ie_vatallsubject_report_oblvatnotsubj_findealparty_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_PARTY, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUBJ_FINDEALPARTY);
                    sort_order = 0;
                    foreach (var ccir_ie_vatallsubject_report_oblvatnotsubj_findealparty_obj in ccir_ie_vatallsubject_report_oblvatnotsubj_findealparty_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUBJ_FINDEALPARTY);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, ccir_ie_vatallsubject_report_oblvatnotsubj_findealparty_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUBJ_FINDPARTY_VALFIND);
                    }
                    return ord;
                case OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUBJ_FINDALL_VALFIND:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUBJ_FINDALL_VALFIND);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_FINDEAL_VALUTA, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUBJ_FINDALL_VALFIND));
                    OrdinateCreate(ord, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUB_FINDALL_VALFIN_SUMMALL);
                    return ord;
                case OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUBJ_FINDOTHER_VALFIND:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUBJ_FINDOTHER_VALFIND);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_FINDEAL_VALUTA, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUBJ_FINDOTHER_VALFIND));
                    OrdinateCreate(ord, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTS_FINDOTHER_VALFIN_COST);
                    return ord;
                case OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUBJ_FINDPARTY_VALFIND:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUBJ_FINDPARTY_VALFIND);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_FINDEAL_VALUTA, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUBJ_FINDPARTY_VALFIND));
                    OrdinateCreate(ord, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTS_FINDPARTY_VALFIN_BALANCE);
                    return ord;
                case OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUB_FINDALL_VALFIN_SUMMALL:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUB_FINDALL_VALFIN_SUMMALL);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.SUMMALL, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUB_FINDALL_VALFIN_SUMMALL));
                    return ord;
                case OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTS_FINDOTHER_VALFIN_COST:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTS_FINDOTHER_VALFIN_COST);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.COST, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTS_FINDOTHER_VALFIN_COST));
                    return ord;
                case OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTS_FINDPARTY_VALFIN_BALANCE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTS_FINDPARTY_VALFIN_BALANCE);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.BALANCE, OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTS_FINDPARTY_VALFIN_BALANCE));
                    return ord;
                case OrdinateType.CCIR_IE_VATSUBJECT_REPORT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATSUBJECT_REPORT);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanReport> ccir_ie_vatsubject_report_objs = DimReportQueryValueGet(ord.CategoryValue, ReportOrderPlanReportType.REPORT, OrdinateType.CCIR_IE_VATSUBJECT_REPORT);
                    sort_order = 0;
                    foreach (var ccir_ie_vatsubject_report_obj in ccir_ie_vatsubject_report_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CCIR_IE_VATSUBJECT_REPORT);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimReportCategoryValueLocate(ord.CategoryValue, ccir_ie_vatsubject_report_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ);
                    }
                    return ord;
                case OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanVatMode> ccir_ie_vatsubject_report_oblvatsubj_objs = DimVatModeObligationQueryValueGet(ord.CategoryValue, ReportOrderPlanVatModeType.SUBJECT, OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ);
                    sort_order = 0;
                    foreach (var ccir_ie_vatsubject_report_oblvatsubj_obj in ccir_ie_vatsubject_report_oblvatsubj_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimVatModeObligationCategoryValueLocate(ord.CategoryValue, ccir_ie_vatsubject_report_oblvatsubj_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDEALALL);
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDEALOTHER);
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDEALPARTY);
                    }
                    return ord;
                case OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDEALALL:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDEALALL);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> ccir_ie_vatsubject_report_oblvatsubj_findealall_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL, OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDEALALL);
                    sort_order = 0;
                    foreach (var ccir_ie_vatsubject_report_oblvatsubj_findealall_obj in ccir_ie_vatsubject_report_oblvatsubj_findealall_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDEALALL);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, ccir_ie_vatsubject_report_oblvatsubj_findealall_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDALL_VALFIND);
                    }
                    return ord;
                case OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDEALOTHER:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDEALOTHER);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> ccir_ie_vatsubject_report_oblvatsubj_findealother_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_NOTPARTY, OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDEALOTHER);
                    sort_order = 0;
                    foreach (var ccir_ie_vatsubject_report_oblvatsubj_findealother_obj in ccir_ie_vatsubject_report_oblvatsubj_findealother_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDEALOTHER);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, ccir_ie_vatsubject_report_oblvatsubj_findealother_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDOTHER_VALFIND);
                    }
                    return ord;
                case OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDEALPARTY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDEALPARTY);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> ccir_ie_vatsubject_report_oblvatsubj_findealparty_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_PARTY, OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDEALPARTY);
                    sort_order = 0;
                    foreach (var ccir_ie_vatsubject_report_oblvatsubj_findealparty_obj in ccir_ie_vatsubject_report_oblvatsubj_findealparty_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDEALPARTY);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, ccir_ie_vatsubject_report_oblvatsubj_findealparty_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDPARTY_VALFIND);
                    }
                    return ord;
                case OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDALL_VALFIND:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDALL_VALFIND);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_FINDEAL_VALUTA, OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDALL_VALFIND));
                    OrdinateCreate(ord, OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDALL_VALFIN_VAT);
                    return ord;
                case OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDOTHER_VALFIND:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDOTHER_VALFIND);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_FINDEAL_VALUTA, OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDOTHER_VALFIND));
                    OrdinateCreate(ord, OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDOTHER_VALFIN_COST);
                    return ord;
                case OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDPARTY_VALFIND:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDPARTY_VALFIND);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_FINDEAL_VALUTA, OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDPARTY_VALFIND));
                    OrdinateCreate(ord, OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDPARTY_VALFIN_BALANCE);
                    return ord;
                case OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDALL_VALFIN_VAT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDALL_VALFIN_VAT);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.VAT, OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDALL_VALFIN_VAT));
                    return ord;
                case OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDOTHER_VALFIN_COST:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDOTHER_VALFIN_COST);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.COST, OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDOTHER_VALFIN_COST));
                    return ord;
                case OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDPARTY_VALFIN_BALANCE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDPARTY_VALFIN_BALANCE);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.BALANCE, OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDPARTY_VALFIN_BALANCE));
                    return ord;
                case OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanReport> ccir_ie_vatnotsubj_report_objs = DimReportQueryValueGet(ord.CategoryValue, ReportOrderPlanReportType.REPORT, OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT);
                    sort_order = 0;
                    foreach (var ccir_ie_vatnotsubj_report_obj in ccir_ie_vatnotsubj_report_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimReportCategoryValueLocate(ord.CategoryValue, ccir_ie_vatnotsubj_report_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ);
                    }
                    return ord;
                case OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanVatMode> ccir_ie_vatnotsubj_report_oblvatsubj_objs = DimVatModeObligationQueryValueGet(ord.CategoryValue, ReportOrderPlanVatModeType.SUBJECT, OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ);
                    sort_order = 0;
                    foreach (var ccir_ie_vatnotsubj_report_oblvatsubj_obj in ccir_ie_vatnotsubj_report_oblvatsubj_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimVatModeObligationCategoryValueLocate(ord.CategoryValue, ccir_ie_vatnotsubj_report_oblvatsubj_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDEALALL);
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDEALOTHER);
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDEALPARTY);
                    }
                    return ord;
                case OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDEALALL:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDEALALL);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> ccir_ie_vatnotsubj_report_oblvatsubj_findealall_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL, OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDEALALL);
                    sort_order = 0;
                    foreach (var ccir_ie_vatnotsubj_report_oblvatsubj_findealall_obj in ccir_ie_vatnotsubj_report_oblvatsubj_findealall_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDEALALL);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, ccir_ie_vatnotsubj_report_oblvatsubj_findealall_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDALL_VALFIND);
                    }
                    return ord;
                case OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDEALOTHER:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDEALOTHER);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> ccir_ie_vatnotsubj_report_oblvatsubj_findealother_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_NOTPARTY, OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDEALOTHER);
                    sort_order = 0;
                    foreach (var ccir_ie_vatnotsubj_report_oblvatsubj_findealother_obj in ccir_ie_vatnotsubj_report_oblvatsubj_findealother_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDEALOTHER);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, ccir_ie_vatnotsubj_report_oblvatsubj_findealother_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDOTHER_VALFIND);
                    }
                    return ord;
                case OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDEALPARTY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDEALPARTY);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> ccir_ie_vatnotsubj_report_oblvatsubj_findealparty_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_PARTY, OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDEALPARTY);
                    sort_order = 0;
                    foreach (var ccir_ie_vatnotsubj_report_oblvatsubj_findealparty_obj in ccir_ie_vatnotsubj_report_oblvatsubj_findealparty_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDEALPARTY);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, ccir_ie_vatnotsubj_report_oblvatsubj_findealparty_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDPARTY_VALFIND);
                    }
                    return ord;
                case OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDALL_VALFIND:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDALL_VALFIND);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_FINDEAL_VALUTA, OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDALL_VALFIND));
                    OrdinateCreate(ord, OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDALL_VALFIN_VAT);
                    OrdinateCreate(ord, OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDALL_VALFIN_VATINCOST);
                    return ord;
                case OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDOTHER_VALFIND:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDOTHER_VALFIND);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_FINDEAL_VALUTA, OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDOTHER_VALFIND));
                    OrdinateCreate(ord, OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDOTHER_VALFIN_COST);
                    return ord;
                case OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDPARTY_VALFIND:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDPARTY_VALFIND);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_FINDEAL_VALUTA, OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDPARTY_VALFIND));
                    OrdinateCreate(ord, OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDPARTY_VALFIN_BALANCE);
                    return ord;
                case OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDALL_VALFIN_VAT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDALL_VALFIN_VAT);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.VAT, OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDALL_VALFIN_VAT));
                    return ord;
                case OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDALL_VALFIN_VATINCOST:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDALL_VALFIN_VATINCOST);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.VATINCOST, OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDALL_VALFIN_VATINCOST));
                    return ord;
                case OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDOTHER_VALFIN_COST:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDOTHER_VALFIN_COST);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.COST, OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDOTHER_VALFIN_COST));
                    return ord;
                case OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDPARTY_VALFIN_BALANCE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDPARTY_VALFIN_BALANCE);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.BALANCE, OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDPARTY_VALFIN_BALANCE));
                    return ord;
                case OrdinateType.CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> ccir_ie_vatallsubj_report_valutafindeal_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_NOTREPORT_VALUTA, OrdinateType.CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL);
                    sort_order = 0;
                    foreach (var ccir_ie_vatallsubj_report_valutafindeal_obj in ccir_ie_vatallsubj_report_valutafindeal_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, ccir_ie_vatallsubj_report_valutafindeal_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL_VALUTA);
                    }
                    return ord;
                case OrdinateType.CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL_VALUTA:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL_VALUTA);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_REPORT_VALUTA, OrdinateType.CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL_VALUTA));
                    OrdinateCreate(ord, OrdinateType.CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL_VALUTA_COST);
                    OrdinateCreate(ord, OrdinateType.CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL_VALUTA_BALANCE);
                    OrdinateCreate(ord, OrdinateType.CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL_VALUTA_SUMMALL);
                    OrdinateCreate(ord, OrdinateType.CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL_VALUTA_VAT);
                    OrdinateCreate(ord, OrdinateType.CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL_VALUTA_VATINCOST);
                    return ord;
                case OrdinateType.CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL_VALUTA_COST:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL_VALUTA_COST);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.COST, OrdinateType.CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL_VALUTA_COST));
                    return ord;
                case OrdinateType.CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL_VALUTA_BALANCE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL_VALUTA_BALANCE);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.BALANCE, OrdinateType.CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL_VALUTA_BALANCE));
                    return ord;
                case OrdinateType.CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL_VALUTA_SUMMALL:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL_VALUTA_SUMMALL);
                    ord.Up = ord_up;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.SUMMALL, OrdinateType.CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL_VALUTA_SUMMALL));
                    return ord;
                case OrdinateType.CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL_VALUTA_VAT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL_VALUTA_VAT);
                    ord.Up = ord_up;
                    ord.SortOrder = 40;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.VAT, OrdinateType.CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL_VALUTA_VAT));
                    return ord;
                case OrdinateType.CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL_VALUTA_VATINCOST:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL_VALUTA_VATINCOST);
                    ord.Up = ord_up;
                    ord.SortOrder = 50;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.VATINCOST, OrdinateType.CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL_VALUTA_VATINCOST));
                    return ord;
                case OrdinateType.CCIR_CF_BALANCE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_CF_BALANCE);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.BALANCE, OrdinateType.CCIR_CF_BALANCE));
                    OrdinateCreate(ord, OrdinateType.CCIR_CF_REPORT);
                    return ord;
                case OrdinateType.CCIR_CF_REPORT_PARTYENTITY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_CF_REPORT_PARTYENTITY);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimPartyKindCategoryValueLocate(ord_up_category_value, DimPartyKindSingleValueGet(ord_up_category_value, ReportOrderPlanEntityKindType.ENTITY, OrdinateType.CCIR_CF_REPORT_PARTYENTITY));
                    OrdinateCreate(ord, OrdinateType.CCIR_CF_PENTITY_REPORT_FINDEALOTHER);
                    OrdinateCreate(ord, OrdinateType.CCIR_CF_PENTITY_REPORT_FINDEALPARTY);
                    OrdinateCreate(ord, OrdinateType.CCIR_CF_PENTITY_REPORT_VALUTAFINDEAL);
                    return ord;
                case OrdinateType.CCIR_CF_REPORT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_CF_REPORT);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanReport> ccir_cf_report_objs = DimReportQueryValueGet(ord.CategoryValue, ReportOrderPlanReportType.REPORT, OrdinateType.CCIR_CF_REPORT);
                    sort_order = 0;
                    foreach (var ccir_cf_report_obj in ccir_cf_report_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CCIR_CF_REPORT);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimReportCategoryValueLocate(ord.CategoryValue, ccir_cf_report_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_CF_REPORT_PARTYENTITY);
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL);
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_CF_REPORT_ALLFINDEAL);
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_CF_REPORT_PARTYSTAFF);
                    }
                    return ord;
                case OrdinateType.CCIR_CF_PENTITY_REPORT_FINDEALOTHER:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_CF_PENTITY_REPORT_FINDEALOTHER);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> ccir_cf_pentity_report_findealother_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_NOTPARTY, OrdinateType.CCIR_CF_PENTITY_REPORT_FINDEALOTHER);
                    sort_order = 0;
                    foreach (var ccir_cf_pentity_report_findealother_obj in ccir_cf_pentity_report_findealother_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CCIR_CF_PENTITY_REPORT_FINDEALOTHER);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, ccir_cf_pentity_report_findealother_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_CF_PENTITY_REPORT_FINDEALOTHER_VALUTA);
                    }
                    return ord;
                case OrdinateType.CCIR_CF_PENTITY_REPORT_FINDEALPARTY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_CF_PENTITY_REPORT_FINDEALPARTY);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> ccir_cf_pentity_report_findealparty_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_PARTY, OrdinateType.CCIR_CF_PENTITY_REPORT_FINDEALPARTY);
                    sort_order = 0;
                    foreach (var ccir_cf_pentity_report_findealparty_obj in ccir_cf_pentity_report_findealparty_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CCIR_CF_PENTITY_REPORT_FINDEALPARTY);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, ccir_cf_pentity_report_findealparty_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_CF_PENTITY_REPORT_FINDEALPARTY_VALUTA);
                    }
                    return ord;
                case OrdinateType.CCIR_CF_PENTITY_REPORT_VALUTAFINDEAL:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_CF_PENTITY_REPORT_VALUTAFINDEAL);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> ccir_cf_pentity_report_valutafindeal_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_NOTREPORT_VALUTA, OrdinateType.CCIR_CF_PENTITY_REPORT_VALUTAFINDEAL);
                    sort_order = 0;
                    foreach (var ccir_cf_pentity_report_valutafindeal_obj in ccir_cf_pentity_report_valutafindeal_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CCIR_CF_PENTITY_REPORT_VALUTAFINDEAL);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, ccir_cf_pentity_report_valutafindeal_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_CF_PENTITY_REPORT_VALUTAFINDEAL_REPORTVALUTA);
                    }
                    return ord;
                case OrdinateType.CCIR_CF_PENTITY_REPORT_FINDEALOTHER_VALUTA:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_CF_PENTITY_REPORT_FINDEALOTHER_VALUTA);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_FINDEAL_VALUTA, OrdinateType.CCIR_CF_PENTITY_REPORT_FINDEALOTHER_VALUTA));
                    OrdinateCreate(ord, OrdinateType.CCIR_CF_PENTITY_REPORT_FINDEALOTHER_VALUTA_PREPAY);
                    return ord;
                case OrdinateType.CCIR_CF_PENTITY_REPORT_FINDEALPARTY_VALUTA:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_CF_PENTITY_REPORT_FINDEALPARTY_VALUTA);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_FINDEAL_VALUTA, OrdinateType.CCIR_CF_PENTITY_REPORT_FINDEALPARTY_VALUTA));
                    OrdinateCreate(ord, OrdinateType.CCIR_CF_PENTITY_REPORT_FINDEALPARTY_VALUTA_ALLPAY);
                    return ord;
                case OrdinateType.CCIR_CF_PENTITY_REPORT_VALUTAFINDEAL_REPORTVALUTA:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_CF_PENTITY_REPORT_VALUTAFINDEAL_REPORTVALUTA);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_REPORT_VALUTA, OrdinateType.CCIR_CF_PENTITY_REPORT_VALUTAFINDEAL_REPORTVALUTA));
                    OrdinateCreate(ord, OrdinateType.CCIR_CF_PENTITY_REPORT_VALUTAFINDEAL_REPORTVALUTA_ALLPAY);
                    OrdinateCreate(ord, OrdinateType.CCIR_CF_PENTITY_REPORT_VALUTAFINDEAL_REPORTVALUTA_PREPAY);
                    OrdinateCreate(ord, OrdinateType.CCIR_CF_PENTITY_REPORT_VALUTAFINDEAL_REPORTVALUTA_POSTPAY);
                    return ord;
                case OrdinateType.CCIR_CF_PENTITY_REPORT_FINDEALOTHER_VALUTA_PREPAY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_CF_PENTITY_REPORT_FINDEALOTHER_VALUTA_PREPAY);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimPayTypeCategoryValueLocate(ord_up_category_value, DimPayTypeSingleValueGet(ord_up_category_value, ReportOrderPlanPayTypeType.PREPAYMENT, OrdinateType.CCIR_CF_PENTITY_REPORT_FINDEALOTHER_VALUTA_PREPAY));
                    return ord;
                case OrdinateType.CCIR_CF_PENTITY_REPORT_FINDEALPARTY_VALUTA_ALLPAY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_CF_PENTITY_REPORT_FINDEALPARTY_VALUTA_ALLPAY);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.CCIR_CF_PENTITY_REPORT_VALUTAFINDEAL_REPORTVALUTA_ALLPAY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_CF_PENTITY_REPORT_VALUTAFINDEAL_REPORTVALUTA_ALLPAY);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.CCIR_CF_PENTITY_REPORT_VALUTAFINDEAL_REPORTVALUTA_PREPAY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_CF_PENTITY_REPORT_VALUTAFINDEAL_REPORTVALUTA_PREPAY);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimPayTypeCategoryValueLocate(ord_up_category_value, DimPayTypeSingleValueGet(ord_up_category_value, ReportOrderPlanPayTypeType.PREPAYMENT, OrdinateType.CCIR_CF_PENTITY_REPORT_VALUTAFINDEAL_REPORTVALUTA_PREPAY));
                    return ord;
                case OrdinateType.CCIR_CF_PENTITY_REPORT_VALUTAFINDEAL_REPORTVALUTA_POSTPAY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_CF_PENTITY_REPORT_VALUTAFINDEAL_REPORTVALUTA_POSTPAY);
                    ord.Up = ord_up;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimPayTypeCategoryValueLocate(ord_up_category_value, DimPayTypeSingleValueGet(ord_up_category_value, ReportOrderPlanPayTypeType.POSTPAYMENT, OrdinateType.CCIR_CF_PENTITY_REPORT_VALUTAFINDEAL_REPORTVALUTA_POSTPAY));
                    return ord;
                case OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> ccir_cf_report_valutafindeal_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_NOTREPORT_VALUTA, OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL);
                    sort_order = 0;
                    foreach (var ccir_cf_report_valutafindeal_obj in ccir_cf_report_valutafindeal_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, ccir_cf_report_valutafindeal_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_FINDEALVALUTA);
                    }
                    return ord;
                case OrdinateType.CCIR_CF_REPORT_ALLFINDEAL:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_CF_REPORT_ALLFINDEAL);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 40;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> ccir_cf_report_allfindeal_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL, OrdinateType.CCIR_CF_REPORT_ALLFINDEAL);
                    sort_order = 0;
                    foreach (var ccir_cf_report_allfindeal_obj in ccir_cf_report_allfindeal_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CCIR_CF_REPORT_ALLFINDEAL);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, ccir_cf_report_allfindeal_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_REPORTVALUTA);
                    }
                    return ord;
                case OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_FINDEALVALUTA:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_FINDEALVALUTA);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_FINDEAL_VALUTA, OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_FINDEALVALUTA));
                    OrdinateCreate(ord, OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_FINDEALVALUTA_ALLPAY);
                    OrdinateCreate(ord, OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_FINDEALVALUTA_PREPAY);
                    OrdinateCreate(ord, OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_FINDEALVALUTA_POSTPAY);
                    return ord;
                case OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_REPORTVALUTA:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_REPORTVALUTA);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_REPORT_VALUTA, OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_REPORTVALUTA));
                    OrdinateCreate(ord, OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_REPORTVALUTA_ALLPAY);
                    OrdinateCreate(ord, OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_REPORTVALUTA_PREPAY);
                    OrdinateCreate(ord, OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_REPORTVALUTA_POSTPAY);
                    return ord;
                case OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_FINDEALVALUTA_ALLPAY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_FINDEALVALUTA_ALLPAY);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_FINDEALVALUTA_PREPAY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_FINDEALVALUTA_PREPAY);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimPayTypeCategoryValueLocate(ord_up_category_value, DimPayTypeSingleValueGet(ord_up_category_value, ReportOrderPlanPayTypeType.PREPAYMENT, OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_FINDEALVALUTA_PREPAY));
                    return ord;
                case OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_FINDEALVALUTA_POSTPAY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_FINDEALVALUTA_POSTPAY);
                    ord.Up = ord_up;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimPayTypeCategoryValueLocate(ord_up_category_value, DimPayTypeSingleValueGet(ord_up_category_value, ReportOrderPlanPayTypeType.POSTPAYMENT, OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_FINDEALVALUTA_POSTPAY));
                    return ord;
                case OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_REPORTVALUTA_ALLPAY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_REPORTVALUTA_ALLPAY);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_REPORTVALUTA_PREPAY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_REPORTVALUTA_PREPAY);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimPayTypeCategoryValueLocate(ord_up_category_value, DimPayTypeSingleValueGet(ord_up_category_value, ReportOrderPlanPayTypeType.PREPAYMENT, OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_REPORTVALUTA_PREPAY));
                    return ord;
                case OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_REPORTVALUTA_POSTPAY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_REPORTVALUTA_POSTPAY);
                    ord.Up = ord_up;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimPayTypeCategoryValueLocate(ord_up_category_value, DimPayTypeSingleValueGet(ord_up_category_value, ReportOrderPlanPayTypeType.POSTPAYMENT, OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_REPORTVALUTA_POSTPAY));
                    return ord;
                case OrdinateType.CCIR_IE_REPORT_ALLFINDEAL:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_REPORT_ALLFINDEAL);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 40;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> ccir_ie_report_allfindeal_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL, OrdinateType.CCIR_IE_REPORT_ALLFINDEAL);
                    sort_order = 0;
                    foreach (var ccir_ie_report_allfindeal_obj in ccir_ie_report_allfindeal_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CCIR_IE_REPORT_ALLFINDEAL);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, ccir_ie_report_allfindeal_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_IE_REPORT_ALLFINDEAL_REPORTVALUTA);
                    }
                    return ord;
                case OrdinateType.CCIR_IE_REPORT_VALUTAFINDEAL:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_REPORT_VALUTAFINDEAL);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 50;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> ccir_ie_report_valutafindeal_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_NOTREPORT_VALUTA, OrdinateType.CCIR_IE_REPORT_VALUTAFINDEAL);
                    sort_order = 0;
                    foreach (var ccir_ie_report_valutafindeal_obj in ccir_ie_report_valutafindeal_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CCIR_IE_REPORT_VALUTAFINDEAL);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, ccir_ie_report_valutafindeal_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_IE_REPORT_VALUTAFINDEAL_VALUTA);
                    }
                    return ord;
                case OrdinateType.CCIR_IE_REPORT_ALLFINDEAL_REPORTVALUTA:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_REPORT_ALLFINDEAL_REPORTVALUTA);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_REPORT_VALUTA, OrdinateType.CCIR_IE_REPORT_ALLFINDEAL_REPORTVALUTA));
                    OrdinateCreate(ord, OrdinateType.CCIR_IE_REPORT_ALLFINDEAL_REPORTVALUTA_COST);
                    OrdinateCreate(ord, OrdinateType.CCIR_IE_REPORT_ALLFINDEAL_REPORTVALUTA_BALANCE);
                    OrdinateCreate(ord, OrdinateType.CCIR_IE_REPORT_ALLFINDEAL_REPORTVALUTA_SUMMALL);
                    return ord;
                case OrdinateType.CCIR_IE_REPORT_VALUTAFINDEAL_VALUTA:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_REPORT_VALUTAFINDEAL_VALUTA);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_FINDEAL_VALUTA, OrdinateType.CCIR_IE_REPORT_VALUTAFINDEAL_VALUTA));
                    OrdinateCreate(ord, OrdinateType.CCIR_IE_REPORT_VALUTAFINDEAL_VALUTA_COST);
                    OrdinateCreate(ord, OrdinateType.CCIR_IE_REPORT_VALUTAFINDEAL_VALUTA_BALANCE);
                    OrdinateCreate(ord, OrdinateType.CCIR_IE_REPORT_VALUTAFINDEAL_VALUTA_SUMMALL);
                    return ord;
                case OrdinateType.CCIR_IE_REPORT_ALLFINDEAL_REPORTVALUTA_COST:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_REPORT_ALLFINDEAL_REPORTVALUTA_COST);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.COST, OrdinateType.CCIR_IE_REPORT_ALLFINDEAL_REPORTVALUTA_COST));
                    return ord;
                case OrdinateType.CCIR_IE_REPORT_ALLFINDEAL_REPORTVALUTA_BALANCE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_REPORT_ALLFINDEAL_REPORTVALUTA_BALANCE);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.BALANCE, OrdinateType.CCIR_IE_REPORT_ALLFINDEAL_REPORTVALUTA_BALANCE));
                    return ord;
                case OrdinateType.CCIR_IE_REPORT_ALLFINDEAL_REPORTVALUTA_SUMMALL:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_REPORT_ALLFINDEAL_REPORTVALUTA_SUMMALL);
                    ord.Up = ord_up;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.SUMMALL, OrdinateType.CCIR_IE_REPORT_ALLFINDEAL_REPORTVALUTA_SUMMALL));
                    return ord;
                case OrdinateType.CCIR_IE_REPORT_VALUTAFINDEAL_VALUTA_COST:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_REPORT_VALUTAFINDEAL_VALUTA_COST);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.COST, OrdinateType.CCIR_IE_REPORT_VALUTAFINDEAL_VALUTA_COST));
                    return ord;
                case OrdinateType.CCIR_IE_REPORT_VALUTAFINDEAL_VALUTA_BALANCE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_REPORT_VALUTAFINDEAL_VALUTA_BALANCE);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.BALANCE, OrdinateType.CCIR_IE_REPORT_VALUTAFINDEAL_VALUTA_BALANCE));
                    return ord;
                case OrdinateType.CCIR_IE_REPORT_VALUTAFINDEAL_VALUTA_SUMMALL:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_REPORT_VALUTAFINDEAL_VALUTA_SUMMALL);
                    ord.Up = ord_up;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.SUMMALL, OrdinateType.CCIR_IE_REPORT_VALUTAFINDEAL_VALUTA_SUMMALL));
                    return ord;
                case OrdinateType.CCIR_IE_REPORT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_IE_REPORT);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanReport> ccir_ie_report_objs = DimReportQueryValueGet(ord.CategoryValue, ReportOrderPlanReportType.REPORT, OrdinateType.CCIR_IE_REPORT);
                    sort_order = 0;
                    foreach (var ccir_ie_report_obj in ccir_ie_report_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CCIR_IE_REPORT);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimReportCategoryValueLocate(ord.CategoryValue, ccir_ie_report_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_IE_REPORT_ALLFINDEAL);
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_IE_REPORT_VALUTAFINDEAL);
                    }
                    return ord;
                case OrdinateType.CCIR_PARTYSTAFF:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_PARTYSTAFF);
                    ord.Up = ord_up;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimPartyKindCategoryValueLocate(ord_up_category_value, DimPartyKindSingleValueGet(ord_up_category_value, ReportOrderPlanEntityKindType.STAFF, OrdinateType.CCIR_PARTYSTAFF));
                    OrdinateCreate(ord, OrdinateType.CCIR_STAFF_PRIMARYCOUNT);
                    OrdinateCreate(ord, OrdinateType.CCIR_STAFF_PRIMARYBALANCE);
                    return ord;
                case OrdinateType.CCIR_STAFF_REPORT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_STAFF_REPORT);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanReport> ccir_staff_report_objs = DimReportQueryValueGet(ord.CategoryValue, ReportOrderPlanReportType.REPORT, OrdinateType.CCIR_STAFF_REPORT);
                    sort_order = 0;
                    foreach (var ccir_staff_report_obj in ccir_staff_report_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CCIR_STAFF_REPORT);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimReportCategoryValueLocate(ord.CategoryValue, ccir_staff_report_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_STAFF_REPORT_FREEPRIMARY);
                    }
                    return ord;
                case OrdinateType.CCIR_STAFF_PRIMARYCOUNT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_STAFF_PRIMARYCOUNT);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimPrimaryValueCategoryValueLocate(ord_up_category_value, DimPrimaryValueSingleValueGet(ord_up_category_value, ReportOrderPlanPrimaryValueType.PRIMARY_COUNT, OrdinateType.CCIR_STAFF_PRIMARYCOUNT));
                    OrdinateCreate(ord, OrdinateType.CCIR_STAFF_REPORT);
                    return ord;
                case OrdinateType.CCIR_STAFF_PRIMARYBALANCE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_STAFF_PRIMARYBALANCE);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimPrimaryValueCategoryValueLocate(ord_up_category_value, DimPrimaryValueSingleValueGet(ord_up_category_value, ReportOrderPlanPrimaryValueType.PRIMARY_BALANCE, OrdinateType.CCIR_STAFF_PRIMARYBALANCE));
                    OrdinateCreate(ord, OrdinateType.CCIR_STAFF_PRIMBALANCE_REPORT);
                    return ord;
                case OrdinateType.CCIR_STAFF_REPORT_VALUTAREPORT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_STAFF_REPORT_VALUTAREPORT);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_REPORT_VALUTA, OrdinateType.CCIR_STAFF_REPORT_VALUTAREPORT));
                    OrdinateCreate(ord, OrdinateType.CCIR_STAFF_REPORT_PRIMARYCOUNT_FINDEAL);
                    return ord;
                case OrdinateType.CCIR_STAFF_REPORT_PRIMARYCOUNT_FINDEAL:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_STAFF_REPORT_PRIMARYCOUNT_FINDEAL);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> ccir_staff_report_primarycount_findeal_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL, OrdinateType.CCIR_STAFF_REPORT_PRIMARYCOUNT_FINDEAL);
                    sort_order = 0;
                    foreach (var ccir_staff_report_primarycount_findeal_obj in ccir_staff_report_primarycount_findeal_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CCIR_STAFF_REPORT_PRIMARYCOUNT_FINDEAL);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, ccir_staff_report_primarycount_findeal_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_STAFF_REPORT_PRIMARYCOUNT_FINDEAL_BALANCE);
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_STAFF_REPORT_PRIMARYCOUNT_FINDEAL_COST);
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_STAFF_REPORT_PRIMARYCOUNT_FINDEAL_INSURANCE);
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_STAFF_REPORT_PRIMARYCOUNT_FINDEAL_OVERHEAD);
                    }
                    return ord;
                case OrdinateType.CCIR_STAFF_REPORT_PRIMARYCOUNT_FINDEAL_BALANCE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_STAFF_REPORT_PRIMARYCOUNT_FINDEAL_BALANCE);
                    ord.Up = ord_up;
                    ord.SortOrder = 50;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.BALANCE, OrdinateType.CCIR_STAFF_REPORT_PRIMARYCOUNT_FINDEAL_BALANCE));
                    return ord;
                case OrdinateType.CCIR_STAFF_REPORT_PRIMARYCOUNT_FINDEAL_COST:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_STAFF_REPORT_PRIMARYCOUNT_FINDEAL_COST);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.COST, OrdinateType.CCIR_STAFF_REPORT_PRIMARYCOUNT_FINDEAL_COST));
                    return ord;
                case OrdinateType.CCIR_STAFF_REPORT_PRIMARYCOUNT_FINDEAL_INSURANCE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_STAFF_REPORT_PRIMARYCOUNT_FINDEAL_INSURANCE);
                    ord.Up = ord_up;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.INSURANCE, OrdinateType.CCIR_STAFF_REPORT_PRIMARYCOUNT_FINDEAL_INSURANCE));
                    return ord;
                case OrdinateType.CCIR_STAFF_REPORT_PRIMARYCOUNT_FINDEAL_OVERHEAD:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_STAFF_REPORT_PRIMARYCOUNT_FINDEAL_OVERHEAD);
                    ord.Up = ord_up;
                    ord.SortOrder = 40;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.OVERHEAD, OrdinateType.CCIR_STAFF_REPORT_PRIMARYCOUNT_FINDEAL_OVERHEAD));
                    return ord;
                case OrdinateType.CCIR_STAFF_REPORT_FREEPRIMARY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_STAFF_REPORT_FREEPRIMARY);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimPrimaryValueCategoryValueLocate(ord_up_category_value, null);
                    OrdinateCreate(ord, OrdinateType.CCIR_STAFF_REPORT_VALUTAREPORT);
                    return ord;
                case OrdinateType.CCIR_CF_REPORT_PARTYSTAFF:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_CF_REPORT_PARTYSTAFF);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimPartyKindCategoryValueLocate(ord_up_category_value, DimPartyKindSingleValueGet(ord_up_category_value, ReportOrderPlanEntityKindType.STAFF, OrdinateType.CCIR_CF_REPORT_PARTYSTAFF));
                    OrdinateCreate(ord, OrdinateType.CCIR_CF_REPORT_PARTYSTAFF_FINDEAL);
                    return ord;
                case OrdinateType.CCIR_CF_REPORT_PARTYSTAFF_FINDEAL:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_CF_REPORT_PARTYSTAFF_FINDEAL);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> ccir_cf_report_partystaff_findeal_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL, OrdinateType.CCIR_CF_REPORT_PARTYSTAFF_FINDEAL);
                    sort_order = 0;
                    foreach (var ccir_cf_report_partystaff_findeal_obj in ccir_cf_report_partystaff_findeal_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CCIR_CF_REPORT_PARTYSTAFF_FINDEAL);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, ccir_cf_report_partystaff_findeal_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_CF_REPORT_PARTYSTAFF_FINDEALVALUTA);
                    }
                    return ord;
                case OrdinateType.CCIR_CF_REPORT_PARTYSTAFF_FINDEALVALUTA:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_CF_REPORT_PARTYSTAFF_FINDEALVALUTA);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_FINDEAL_VALUTA, OrdinateType.CCIR_CF_REPORT_PARTYSTAFF_FINDEALVALUTA));
                    OrdinateCreate(ord, OrdinateType.CCIR_CF_REPORT_PARTYSTAFF_FINDEALVALUTA_ALLPAY);
                    OrdinateCreate(ord, OrdinateType.CCIR_CF_REPORT_PARTYSTAFF_FINDEALVALUTA_PREPAY);
                    return ord;
                case OrdinateType.CCIR_CF_REPORT_PARTYSTAFF_FINDEALVALUTA_ALLPAY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_CF_REPORT_PARTYSTAFF_FINDEALVALUTA_ALLPAY);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.CCIR_CF_REPORT_PARTYSTAFF_FINDEALVALUTA_PREPAY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_CF_REPORT_PARTYSTAFF_FINDEALVALUTA_PREPAY);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimPayTypeCategoryValueLocate(ord_up_category_value, DimPayTypeSingleValueGet(ord_up_category_value, ReportOrderPlanPayTypeType.PREPAYMENT, OrdinateType.CCIR_CF_REPORT_PARTYSTAFF_FINDEALVALUTA_PREPAY));
                    return ord;
                case OrdinateType.CCIR_STAFF_PRIMBALANCE_REPORT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_STAFF_PRIMBALANCE_REPORT);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanReport> ccir_staff_primbalance_report_objs = DimReportQueryValueGet(ord.CategoryValue, ReportOrderPlanReportType.REPORT, OrdinateType.CCIR_STAFF_PRIMBALANCE_REPORT);
                    sort_order = 0;
                    foreach (var ccir_staff_primbalance_report_obj in ccir_staff_primbalance_report_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CCIR_STAFF_PRIMBALANCE_REPORT);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimReportCategoryValueLocate(ord.CategoryValue, ccir_staff_primbalance_report_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_STAFF_PRIMBALANCE_REPORT_FREEPRIMARY);
                    }
                    return ord;
                case OrdinateType.CCIR_STAFF_PRIMBALANCE_REPORT_FREEPRIMARY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_STAFF_PRIMBALANCE_REPORT_FREEPRIMARY);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimPrimaryValueCategoryValueLocate(ord_up_category_value, null);
                    OrdinateCreate(ord, OrdinateType.CCIR_STAFF_PRIMBALANCE_REPORT_VALUTAREPORT);
                    return ord;
                case OrdinateType.CCIR_STAFF_PRIMBALANCE_REPORT_VALUTAREPORT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_STAFF_PRIMBALANCE_REPORT_VALUTAREPORT);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_REPORT_VALUTA, OrdinateType.CCIR_STAFF_PRIMBALANCE_REPORT_VALUTAREPORT));
                    OrdinateCreate(ord, OrdinateType.CCIR_STAFF_REPORT_PRIMBALANCE_FINDEAL);
                    return ord;
                case OrdinateType.CCIR_STAFF_REPORT_PRIMBALANCE_FINDEAL:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_STAFF_REPORT_PRIMBALANCE_FINDEAL);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> ccir_staff_report_primbalance_findeal_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL, OrdinateType.CCIR_STAFF_REPORT_PRIMBALANCE_FINDEAL);
                    sort_order = 0;
                    foreach (var ccir_staff_report_primbalance_findeal_obj in ccir_staff_report_primbalance_findeal_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.CCIR_STAFF_REPORT_PRIMBALANCE_FINDEAL);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, ccir_staff_report_primbalance_findeal_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_STAFF_REPORT_PRIMBALANCE_FINDEAL_BALANCE);
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_STAFF_REPORT_PRIMBALANCE_FINDEAL_COST);
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_STAFF_REPORT_PRIMBALANCE_FINDEAL_INSURANCE);
                        OrdinateCreate(sub_ord, OrdinateType.CCIR_STAFF_REPORT_PRIMBALANCE_FINDEAL_OVERHEAD);
                    }
                    return ord;
                case OrdinateType.CCIR_STAFF_REPORT_PRIMBALANCE_FINDEAL_BALANCE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_STAFF_REPORT_PRIMBALANCE_FINDEAL_BALANCE);
                    ord.Up = ord_up;
                    ord.SortOrder = 50;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.BALANCE, OrdinateType.CCIR_STAFF_REPORT_PRIMBALANCE_FINDEAL_BALANCE));
                    return ord;
                case OrdinateType.CCIR_STAFF_REPORT_PRIMBALANCE_FINDEAL_COST:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_STAFF_REPORT_PRIMBALANCE_FINDEAL_COST);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.COST, OrdinateType.CCIR_STAFF_REPORT_PRIMBALANCE_FINDEAL_COST));
                    return ord;
                case OrdinateType.CCIR_STAFF_REPORT_PRIMBALANCE_FINDEAL_INSURANCE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_STAFF_REPORT_PRIMBALANCE_FINDEAL_INSURANCE);
                    ord.Up = ord_up;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.INSURANCE, OrdinateType.CCIR_STAFF_REPORT_PRIMBALANCE_FINDEAL_INSURANCE));
                    return ord;
                case OrdinateType.CCIR_STAFF_REPORT_PRIMBALANCE_FINDEAL_OVERHEAD:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CCIR_STAFF_REPORT_PRIMBALANCE_FINDEAL_OVERHEAD);
                    ord.Up = ord_up;
                    ord.SortOrder = 40;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.OVERHEAD, OrdinateType.CCIR_STAFF_REPORT_PRIMBALANCE_FINDEAL_OVERHEAD));
                    return ord;
                default:
                    return null;
            }
        }
        
        protected ReportOrderPlanCategoryValue DimScenarioCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanScenario obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimScenario = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimFinrepCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanFinrep obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimFinrep = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimVatModeCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanVatMode obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimVatMode = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimReportCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanReport obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimReport = obj;
            value.DimEntity = value.DimReport?.Entity;
            value.DimOrder = value.DimReport?.Order;
            value.DimVatMode = value.DimOrder?.VatMode;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimPartyKindCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanEntityKind obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimPartyKind = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimVatModeObligationCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanVatMode obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimVatModeObligation = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimFindealCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanFindeal obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimFindeal = obj;
            value.DimDeal = value.DimFindeal?.Deal;
            value.DimParty = value.DimDeal?.Party;
            value.DimPartyKind = value.DimParty?.Kind;
            value.DimDealKind = value.DimDeal?.Kind;
            value.DimValutaObligation = value.DimFindeal?.Valuta;
            value.DimVatModeObligation = value.DimFindeal?.VatMode;
            value.DimArticle = value.DimFindeal?.Article;
            value.DimFindealKind = value.DimFindeal?.Kind;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimValutaCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanValuta obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimValuta = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimValueTypeCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanValueType obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimValueType = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimPayTypeCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanPayType obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimPayType = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimPrimaryValueCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanPrimaryValue obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimPrimaryValue = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanScenario DimScenarioSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanScenarioType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.CCIR_ROOT:
                    return Report.ReportCore.ConstScenario[model];
                default:
                    return null;
            }
        }
        protected ReportOrderPlanFinrep DimFinrepSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanFinrepType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.CCIR_CF:
                    return Report.ReportCore.ConstFinrep[model];
                case OrdinateType.CCIR_IE:
                    return Report.ReportCore.ConstFinrep[model];
                default:
                    return null;
            }
        }
        protected ReportOrderPlanVatMode DimVatModeSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanVatModeType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.CCIR_IE_VATNOTSUBJECT:
                    return Report.ReportCore.ConstVatMode[model];
                case OrdinateType.CCIR_IE_VATSUBJECT:
                default:
                    return null;
            }
        }
        protected ReportOrderPlanEntityKind DimPartyKindSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanEntityKindType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.CCIR_PARTYENTITY:
                    return Report.ReportCore.ConstEntityKind[model];
                case OrdinateType.CCIR_CF_REPORT_PARTYENTITY:
                    return Report.ReportCore.ConstEntityKind[model];
                case OrdinateType.CCIR_PARTYSTAFF:
                    return Report.ReportCore.ConstEntityKind[model];
                case OrdinateType.CCIR_CF_REPORT_PARTYSTAFF:
                    return Report.ReportCore.ConstEntityKind[model];
                default:
                    return null;
            }
        }
        protected ReportOrderPlanValuta DimValutaSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanValutaType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDALL_VALFIND:
                    return context.DimFindeal?.Valuta;
                case OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDOTHER_VALFIND:
                    return context.DimFindeal?.Valuta;
                case OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDPARTY_VALFIND:
                    return context.DimFindeal?.Valuta;
                case OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUBJ_FINDALL_VALFIND:
                    return context.DimFindeal?.Valuta;
                case OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUBJ_FINDOTHER_VALFIND:
                    return context.DimFindeal?.Valuta;
                case OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUBJ_FINDPARTY_VALFIND:
                    return context.DimFindeal?.Valuta;
                case OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDALL_VALFIND:
                    return context.DimFindeal?.Valuta;
                case OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDOTHER_VALFIND:
                    return context.DimFindeal?.Valuta;
                case OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDPARTY_VALFIND:
                    return context.DimFindeal?.Valuta;
                case OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDALL_VALFIND:
                    return context.DimFindeal?.Valuta;
                case OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDOTHER_VALFIND:
                    return context.DimFindeal?.Valuta;
                case OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDPARTY_VALFIND:
                    return context.DimFindeal?.Valuta;
                case OrdinateType.CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL_VALUTA:
                    return context.DimReport?.Valuta;
                case OrdinateType.CCIR_CF_PENTITY_REPORT_FINDEALOTHER_VALUTA:
                    return context.DimFindeal?.Valuta;
                case OrdinateType.CCIR_CF_PENTITY_REPORT_FINDEALPARTY_VALUTA:
                    return context.DimFindeal?.Valuta;
                case OrdinateType.CCIR_CF_PENTITY_REPORT_VALUTAFINDEAL_REPORTVALUTA:
                    return context.DimReport?.Valuta;
                case OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_FINDEALVALUTA:
                    return context.DimFindeal?.Valuta;
                case OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_REPORTVALUTA:
                    return context.DimReport?.Valuta;
                case OrdinateType.CCIR_IE_REPORT_ALLFINDEAL_REPORTVALUTA:
                    return context.DimReport?.Valuta;
                case OrdinateType.CCIR_IE_REPORT_VALUTAFINDEAL_VALUTA:
                    return context.DimFindeal?.Valuta;
                case OrdinateType.CCIR_STAFF_REPORT_VALUTAREPORT:
                    return context.DimReport?.Valuta;
                case OrdinateType.CCIR_CF_REPORT_PARTYSTAFF_FINDEALVALUTA:
                    return context.DimFindeal?.Valuta;
                case OrdinateType.CCIR_STAFF_PRIMBALANCE_REPORT_VALUTAREPORT:
                    return context.DimReport?.Valuta;
                default:
                    return null;
            }
        }
        protected ReportOrderPlanValueType DimValueTypeSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanValueTypeType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ_FINDALL_VALFIN_SUMMALL:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUB_FINDALL_VALFIN_SUMMALL:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTS_FINDOTHER_VALFIN_COST:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTS_FINDPARTY_VALFIN_BALANCE:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDALL_VALFIN_VAT:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDOTHER_VALFIN_COST:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ_FINDPARTY_VALFIN_BALANCE:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDALL_VALFIN_VAT:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDALL_VALFIN_VATINCOST:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDOTHER_VALFIN_COST:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ_FINDPARTY_VALFIN_BALANCE:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL_VALUTA_COST:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL_VALUTA_BALANCE:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL_VALUTA_SUMMALL:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL_VALUTA_VAT:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.CCIR_IE_VATALLSUBJ_REPORT_VALUTAFINDEAL_VALUTA_VATINCOST:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.CCIR_CF_BALANCE:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.CCIR_IE_REPORT_ALLFINDEAL_REPORTVALUTA_COST:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.CCIR_IE_REPORT_ALLFINDEAL_REPORTVALUTA_BALANCE:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.CCIR_IE_REPORT_ALLFINDEAL_REPORTVALUTA_SUMMALL:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.CCIR_IE_REPORT_VALUTAFINDEAL_VALUTA_COST:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.CCIR_IE_REPORT_VALUTAFINDEAL_VALUTA_BALANCE:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.CCIR_IE_REPORT_VALUTAFINDEAL_VALUTA_SUMMALL:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.CCIR_STAFF_REPORT_PRIMARYCOUNT_FINDEAL_BALANCE:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.CCIR_STAFF_REPORT_PRIMARYCOUNT_FINDEAL_COST:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.CCIR_STAFF_REPORT_PRIMARYCOUNT_FINDEAL_INSURANCE:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.CCIR_STAFF_REPORT_PRIMARYCOUNT_FINDEAL_OVERHEAD:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.CCIR_STAFF_REPORT_PRIMBALANCE_FINDEAL_BALANCE:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.CCIR_STAFF_REPORT_PRIMBALANCE_FINDEAL_COST:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.CCIR_STAFF_REPORT_PRIMBALANCE_FINDEAL_INSURANCE:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.CCIR_STAFF_REPORT_PRIMBALANCE_FINDEAL_OVERHEAD:
                    return Report.ReportCore.ConstValueType[model];
                default:
                    return null;
            }
        }
        protected ReportOrderPlanVatMode DimVatModeObligationSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanVatModeType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATSUBJ:
                case OrdinateType.CCIR_IE_VATALLSUBJECT_REPORT_OBLVATNOTSUBJ:
                    return Report.ReportCore.ConstVatMode[model];
                case OrdinateType.CCIR_IE_VATSUBJECT_REPORT_OBLVATSUBJ:
                case OrdinateType.CCIR_IE_VATNOTSUBJ_REPORT_OBLVATSUBJ:
                default:
                    return null;
            }
        }
        protected ReportOrderPlanPayType DimPayTypeSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanPayTypeType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.CCIR_CF_PENTITY_REPORT_FINDEALOTHER_VALUTA_PREPAY:
                    return Report.ReportCore.ConstPayType[model];
                case OrdinateType.CCIR_CF_PENTITY_REPORT_VALUTAFINDEAL_REPORTVALUTA_PREPAY:
                    return Report.ReportCore.ConstPayType[model];
                case OrdinateType.CCIR_CF_PENTITY_REPORT_VALUTAFINDEAL_REPORTVALUTA_POSTPAY:
                    return Report.ReportCore.ConstPayType[model];
                case OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_FINDEALVALUTA_PREPAY:
                    return Report.ReportCore.ConstPayType[model];
                case OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_FINDEALVALUTA_POSTPAY:
                    return Report.ReportCore.ConstPayType[model];
                case OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_REPORTVALUTA_PREPAY:
                    return Report.ReportCore.ConstPayType[model];
                case OrdinateType.CCIR_CF_REPORT_VALUTAFINDEAL_REPORTVALUTA_POSTPAY:
                    return Report.ReportCore.ConstPayType[model];
                case OrdinateType.CCIR_CF_REPORT_PARTYSTAFF_FINDEALVALUTA_PREPAY:
                    return Report.ReportCore.ConstPayType[model];
                default:
                    return null;
            }
        }
        protected ReportOrderPlanPrimaryValue DimPrimaryValueSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanPrimaryValueType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.CCIR_STAFF_PRIMARYCOUNT:
                    return Report.ReportCore.ConstPrimaryValue[model];
                case OrdinateType.CCIR_STAFF_PRIMARYBALANCE:
                    return Report.ReportCore.ConstPrimaryValue[model];
                case OrdinateType.CCIR_STAFF_REPORT_FREEPRIMARY:
                    return Report.ReportCore.ConstPrimaryValue[model];
                case OrdinateType.CCIR_STAFF_PRIMBALANCE_REPORT_FREEPRIMARY:
                    return Report.ReportCore.ConstPrimaryValue[model];
                default:
                    return null;
            }
        }
        protected IList<ReportOrderPlanVatMode> DimVatModeQueryValueGet(ReportOrderPlanCategoryValue context, ReportOrderPlanVatModeType model, OrdinateType ord_type) {
            return Report.ReportCore.QueryVatMode(context, model);
        }
        protected IList<ReportOrderPlanReport> DimReportQueryValueGet(ReportOrderPlanCategoryValue context, ReportOrderPlanReportType model, OrdinateType ord_type) {
            return Report.ReportCore.QueryReport(context, model);
        }
        protected IList<ReportOrderPlanVatMode> DimVatModeObligationQueryValueGet(ReportOrderPlanCategoryValue context, ReportOrderPlanVatModeType model, OrdinateType ord_type) {
            return Report.ReportCore.QueryVatMode(context, model);
        }
        protected IList<ReportOrderPlanFindeal> DimFindealQueryValueGet(ReportOrderPlanCategoryValue context, ReportOrderPlanFindealType model, OrdinateType ord_type) {
            return Report.ReportCore.QueryFindeal(context, model);
        }
        
    }
    
    public partial class ReportOrderPlanAxisStandartCol: MdfAxis<ReportOrderPlanReport,ReportOrderPlanCategoryValue,ReportOrderPlanTable,ReportOrderPlanTableCell,ReportOrderPlanDataPoint> {
        
        public enum OrdinateType {
            STDC_ROOT =  431,
            STDC_TAX_VAT =  435,
            STDC_STAFF_FOT =  439,
            STDC_STAFF_INSURANCE =  440,
            STDC_STAFF_OVERHEAD =  441,
            STDC_EXCHANGE_RATE =  442,
            STDC_EXCHANGE_FROM_RUB =  444,
            STDC_EXCHANGE_FROM_EUR =  445,
            STDC_EXCHANGE_FROM_USD =  446,
            STDC_VALUE_STANDART =  447,
            STDC_TAX_VAT_NORMAL =  448,
            STDC_TAX_VAT_EXPORT =  449,
        }
        
        public class Ordinate : MdfAxisOrdinate {
            private OrdinateType _OrdinateType;
            public OrdinateType OrdinateType{
                get { return _OrdinateType; }
            }
            
            public Ordinate(ReportOrderPlanAxisStandartCol axis, MdfAxisOrdinateValueType value_type, OrdinateType ord_type): base(axis, value_type)  {
                _OrdinateType = ord_type;
            }
        }
        
        public ReportOrderPlanAxisStandartCol(ReportOrderPlanReport report): base(report) { }
        
        public override void OrdinatesFill() {
            Root = OrdinateCreate(null, OrdinateType.STDC_ROOT);
        }
        
        protected Ordinate OrdinateCreate(Ordinate ord_up, OrdinateType ord_type) {
            Ordinate ord;
            Ordinate sub_ord;
            Int32 sort_order = 0;
            ReportOrderPlanCategoryValue ord_up_category_value = ord_up?.CategoryValue ?? ReportOrderPlanCategoryValue.DefaultCategoryValue;
            switch (ord_type) {
                case OrdinateType.STDC_ROOT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.STDC_ROOT);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimScenarioCategoryValueLocate(ord_up_category_value, DimScenarioSingleValueGet(ord_up_category_value, ReportOrderPlanScenarioType.FORECAST, OrdinateType.STDC_ROOT));
                    OrdinateCreate(ord, OrdinateType.STDC_VALUE_STANDART);
                    return ord;
                case OrdinateType.STDC_TAX_VAT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.STDC_TAX_VAT);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimStandartCategoryValueLocate(ord_up_category_value, DimStandartSingleValueGet(ord_up_category_value, ReportOrderPlanStandartType.STD_TAX_VAT, OrdinateType.STDC_TAX_VAT));
                    OrdinateCreate(ord, OrdinateType.STDC_TAX_VAT_NORMAL);
                    OrdinateCreate(ord, OrdinateType.STDC_TAX_VAT_EXPORT);
                    return ord;
                case OrdinateType.STDC_STAFF_FOT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.STDC_STAFF_FOT);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimStandartCategoryValueLocate(ord_up_category_value, DimStandartSingleValueGet(ord_up_category_value, ReportOrderPlanStandartType.STD_STAFF_FOT, OrdinateType.STDC_STAFF_FOT));
                    return ord;
                case OrdinateType.STDC_STAFF_INSURANCE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.STDC_STAFF_INSURANCE);
                    ord.Up = ord_up;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimStandartCategoryValueLocate(ord_up_category_value, DimStandartSingleValueGet(ord_up_category_value, ReportOrderPlanStandartType.STD_STAFF_INSURANCE, OrdinateType.STDC_STAFF_INSURANCE));
                    return ord;
                case OrdinateType.STDC_STAFF_OVERHEAD:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.STDC_STAFF_OVERHEAD);
                    ord.Up = ord_up;
                    ord.SortOrder = 40;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimStandartCategoryValueLocate(ord_up_category_value, DimStandartSingleValueGet(ord_up_category_value, ReportOrderPlanStandartType.STD_STAFF_OVERHEAD, OrdinateType.STDC_STAFF_OVERHEAD));
                    return ord;
                case OrdinateType.STDC_EXCHANGE_RATE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.STDC_EXCHANGE_RATE);
                    ord.Up = ord_up;
                    ord.SortOrder = 50;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimStandartCategoryValueLocate(ord_up_category_value, DimStandartSingleValueGet(ord_up_category_value, ReportOrderPlanStandartType.STD_EXCHANGE_RATE, OrdinateType.STDC_EXCHANGE_RATE));
                    OrdinateCreate(ord, OrdinateType.STDC_EXCHANGE_FROM_RUB);
                    OrdinateCreate(ord, OrdinateType.STDC_EXCHANGE_FROM_EUR);
                    OrdinateCreate(ord, OrdinateType.STDC_EXCHANGE_FROM_USD);
                    return ord;
                case OrdinateType.STDC_EXCHANGE_FROM_RUB:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.STDC_EXCHANGE_FROM_RUB);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValutaObligationCategoryValueLocate(ord_up_category_value, DimValutaObligationSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.RUB, OrdinateType.STDC_EXCHANGE_FROM_RUB));
                    return ord;
                case OrdinateType.STDC_EXCHANGE_FROM_EUR:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.STDC_EXCHANGE_FROM_EUR);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValutaObligationCategoryValueLocate(ord_up_category_value, DimValutaObligationSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.EUR, OrdinateType.STDC_EXCHANGE_FROM_EUR));
                    return ord;
                case OrdinateType.STDC_EXCHANGE_FROM_USD:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.STDC_EXCHANGE_FROM_USD);
                    ord.Up = ord_up;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValutaObligationCategoryValueLocate(ord_up_category_value, DimValutaObligationSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.USD, OrdinateType.STDC_EXCHANGE_FROM_USD));
                    return ord;
                case OrdinateType.STDC_VALUE_STANDART:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.STDC_VALUE_STANDART);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.STANDART, OrdinateType.STDC_VALUE_STANDART));
                    OrdinateCreate(ord, OrdinateType.STDC_TAX_VAT);
                    OrdinateCreate(ord, OrdinateType.STDC_STAFF_FOT);
                    OrdinateCreate(ord, OrdinateType.STDC_STAFF_INSURANCE);
                    OrdinateCreate(ord, OrdinateType.STDC_STAFF_OVERHEAD);
                    OrdinateCreate(ord, OrdinateType.STDC_EXCHANGE_RATE);
                    return ord;
                case OrdinateType.STDC_TAX_VAT_NORMAL:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.STDC_TAX_VAT_NORMAL);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimVatModeObligationCategoryValueLocate(ord_up_category_value, DimVatModeObligationSingleValueGet(ord_up_category_value, ReportOrderPlanVatModeType.NORMAL, OrdinateType.STDC_TAX_VAT_NORMAL));
                    return ord;
                case OrdinateType.STDC_TAX_VAT_EXPORT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.STDC_TAX_VAT_EXPORT);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimVatModeObligationCategoryValueLocate(ord_up_category_value, DimVatModeObligationSingleValueGet(ord_up_category_value, ReportOrderPlanVatModeType.EXPORT, OrdinateType.STDC_TAX_VAT_EXPORT));
                    return ord;
                default:
                    return null;
            }
        }
        
        protected ReportOrderPlanCategoryValue DimScenarioCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanScenario obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimScenario = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimStandartCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanStandart obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimStandart = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimValutaObligationCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanValuta obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimValutaObligation = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimValueTypeCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanValueType obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimValueType = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimVatModeObligationCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanVatMode obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimVatModeObligation = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanScenario DimScenarioSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanScenarioType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.STDC_ROOT:
                    return Report.ReportCore.ConstScenario[model];
                default:
                    return null;
            }
        }
        protected ReportOrderPlanStandart DimStandartSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanStandartType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.STDC_TAX_VAT:
                    return Report.ReportCore.ConstStandart[model];
                case OrdinateType.STDC_STAFF_FOT:
                    return Report.ReportCore.ConstStandart[model];
                case OrdinateType.STDC_STAFF_INSURANCE:
                    return Report.ReportCore.ConstStandart[model];
                case OrdinateType.STDC_STAFF_OVERHEAD:
                    return Report.ReportCore.ConstStandart[model];
                case OrdinateType.STDC_EXCHANGE_RATE:
                    return Report.ReportCore.ConstStandart[model];
                default:
                    return null;
            }
        }
        protected ReportOrderPlanValuta DimValutaObligationSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanValutaType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.STDC_EXCHANGE_FROM_RUB:
                    return Report.ReportCore.ConstValuta[model];
                case OrdinateType.STDC_EXCHANGE_FROM_EUR:
                    return Report.ReportCore.ConstValuta[model];
                case OrdinateType.STDC_EXCHANGE_FROM_USD:
                    return Report.ReportCore.ConstValuta[model];
                default:
                    return null;
            }
        }
        protected ReportOrderPlanValueType DimValueTypeSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanValueTypeType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.STDC_VALUE_STANDART:
                    return Report.ReportCore.ConstValueType[model];
                default:
                    return null;
            }
        }
        protected ReportOrderPlanVatMode DimVatModeObligationSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanVatModeType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.STDC_TAX_VAT_NORMAL:
                    return Report.ReportCore.ConstVatMode[model];
                case OrdinateType.STDC_TAX_VAT_EXPORT:
                    return Report.ReportCore.ConstVatMode[model];
                default:
                    return null;
            }
        }
        
    }
    
    public partial class ReportOrderPlanAxisStandartRow: MdfAxis<ReportOrderPlanReport,ReportOrderPlanCategoryValue,ReportOrderPlanTable,ReportOrderPlanTableCell,ReportOrderPlanDataPoint> {
        
        public enum OrdinateType {
            STDR_ROOT =  432,
            STDR_PERIOD_PLAN =  433,
            STDR_PERIOD_MONTH =  434,
            STDR_GENERAL =  437,
            STDR_STAFF =  438,
            STDR_EXCHANGE =  451,
        }
        
        public class Ordinate : MdfAxisOrdinate {
            private OrdinateType _OrdinateType;
            public OrdinateType OrdinateType{
                get { return _OrdinateType; }
            }
            
            public Ordinate(ReportOrderPlanAxisStandartRow axis, MdfAxisOrdinateValueType value_type, OrdinateType ord_type): base(axis, value_type)  {
                _OrdinateType = ord_type;
            }
        }
        
        public ReportOrderPlanAxisStandartRow(ReportOrderPlanReport report): base(report) { }
        
        public override void OrdinatesFill() {
            Root = OrdinateCreate(null, OrdinateType.STDR_ROOT);
        }
        
        protected Ordinate OrdinateCreate(Ordinate ord_up, OrdinateType ord_type) {
            Ordinate ord;
            Ordinate sub_ord;
            Int32 sort_order = 0;
            ReportOrderPlanCategoryValue ord_up_category_value = ord_up?.CategoryValue ?? ReportOrderPlanCategoryValue.DefaultCategoryValue;
            switch (ord_type) {
                case OrdinateType.STDR_ROOT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.STDR_ROOT);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanReport> stdr_root_objs = DimReportQueryValueGet(ord.CategoryValue, ReportOrderPlanReportType.REPORT, OrdinateType.STDR_ROOT);
                    sort_order = 0;
                    foreach (var stdr_root_obj in stdr_root_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.STDR_ROOT);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimReportCategoryValueLocate(ord.CategoryValue, stdr_root_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.STDR_PERIOD_PLAN);
                    }
                    return ord;
                case OrdinateType.STDR_PERIOD_PLAN:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.STDR_PERIOD_PLAN);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanPeriod> stdr_period_plan_objs = DimPeriodQueryValueGet(ord.CategoryValue, ReportOrderPlanPeriodType.PERIOD_PLAN, OrdinateType.STDR_PERIOD_PLAN);
                    sort_order = 0;
                    foreach (var stdr_period_plan_obj in stdr_period_plan_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.STDR_PERIOD_PLAN);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimPeriodCategoryValueLocate(ord.CategoryValue, stdr_period_plan_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.STDR_PERIOD_MONTH);
                    }
                    return ord;
                case OrdinateType.STDR_PERIOD_MONTH:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.STDR_PERIOD_MONTH);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanPeriod> stdr_period_month_objs = DimPeriodQueryValueGet(ord.CategoryValue, ReportOrderPlanPeriodType.PERIOD_PLAN_MONTH, OrdinateType.STDR_PERIOD_MONTH);
                    sort_order = 0;
                    foreach (var stdr_period_month_obj in stdr_period_month_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.STDR_PERIOD_MONTH);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimPeriodCategoryValueLocate(ord.CategoryValue, stdr_period_month_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.STDR_GENERAL);
                        OrdinateCreate(sub_ord, OrdinateType.STDR_STAFF);
                        OrdinateCreate(sub_ord, OrdinateType.STDR_EXCHANGE);
                    }
                    return ord;
                case OrdinateType.STDR_GENERAL:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.STDR_GENERAL);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.STDR_STAFF:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.STDR_STAFF);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanEntity> stdr_staff_objs = DimPartyQueryValueGet(ord.CategoryValue, ReportOrderPlanEntityType.PARTY_BAY_STAFF, OrdinateType.STDR_STAFF);
                    sort_order = 0;
                    foreach (var stdr_staff_obj in stdr_staff_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.STDR_STAFF);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimPartyCategoryValueLocate(ord.CategoryValue, stdr_staff_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                    }
                    return ord;
                case OrdinateType.STDR_EXCHANGE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.STDR_EXCHANGE);
                    ord.Up = ord_up;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_REPORT_VALUTA, OrdinateType.STDR_EXCHANGE));
                    return ord;
                default:
                    return null;
            }
        }
        
        protected ReportOrderPlanCategoryValue DimReportCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanReport obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimReport = obj;
            value.DimEntity = value.DimReport?.Entity;
            value.DimOrder = value.DimReport?.Order;
            value.DimVatMode = value.DimOrder?.VatMode;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimPeriodCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanPeriod obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimPeriod = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimPartyCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanEntity obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimParty = obj;
            value.DimPartyKind = value.DimParty?.Kind;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimValutaCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanValuta obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimValuta = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanValuta DimValutaSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanValutaType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.STDR_EXCHANGE:
                    return context.DimReport?.Valuta;
                default:
                    return null;
            }
        }
        protected IList<ReportOrderPlanReport> DimReportQueryValueGet(ReportOrderPlanCategoryValue context, ReportOrderPlanReportType model, OrdinateType ord_type) {
            return Report.ReportCore.QueryReport(context, model);
        }
        protected IList<ReportOrderPlanPeriod> DimPeriodQueryValueGet(ReportOrderPlanCategoryValue context, ReportOrderPlanPeriodType model, OrdinateType ord_type) {
            return Report.ReportCore.QueryPeriod(context, model);
        }
        protected IList<ReportOrderPlanEntity> DimPartyQueryValueGet(ReportOrderPlanCategoryValue context, ReportOrderPlanEntityType model, OrdinateType ord_type) {
            return Report.ReportCore.QueryEntity(context, model);
        }
        
    }
    
    public partial class ReportOrderPlanAxisStandartImport: MdfAxis<ReportOrderPlanReport,ReportOrderPlanCategoryValue,ReportOrderPlanTable,ReportOrderPlanTableCell,ReportOrderPlanDataPoint> {
        
        public enum OrdinateType {
            STDI_ROOT =  452,
            STDI_VALUE_STANDART =  453,
            STDI_EXCHANGE =  455,
            STDI_STAFF =  456,
            STDI_VAT_MODE =  457,
            STDI_STAFF_INSURANCE =  458,
            STDI_EXCHANGE_RATE =  459,
            STDI_STAFF_FOT =  460,
            STDI_STAFF_OVERHEAD =  461,
            STDI_TAX_VAT =  462,
            STDI_EXCHANGE_VALUTA_OBLIGATION =  511,
        }
        
        public class Ordinate : MdfAxisOrdinate {
            private OrdinateType _OrdinateType;
            public OrdinateType OrdinateType{
                get { return _OrdinateType; }
            }
            
            public Ordinate(ReportOrderPlanAxisStandartImport axis, MdfAxisOrdinateValueType value_type, OrdinateType ord_type): base(axis, value_type)  {
                _OrdinateType = ord_type;
            }
        }
        
        public ReportOrderPlanAxisStandartImport(ReportOrderPlanReport report): base(report) { }
        
        public override void OrdinatesFill() {
            Root = OrdinateCreate(null, OrdinateType.STDI_ROOT);
        }
        
        protected Ordinate OrdinateCreate(Ordinate ord_up, OrdinateType ord_type) {
            Ordinate ord;
            Ordinate sub_ord;
            Int32 sort_order = 0;
            ReportOrderPlanCategoryValue ord_up_category_value = ord_up?.CategoryValue ?? ReportOrderPlanCategoryValue.DefaultCategoryValue;
            switch (ord_type) {
                case OrdinateType.STDI_ROOT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.STDI_ROOT);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanReport> stdi_root_objs = DimReportQueryValueGet(ord.CategoryValue, ReportOrderPlanReportType.REPORT, OrdinateType.STDI_ROOT);
                    sort_order = 0;
                    foreach (var stdi_root_obj in stdi_root_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.STDI_ROOT);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimReportCategoryValueLocate(ord.CategoryValue, stdi_root_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.STDI_VALUE_STANDART);
                    }
                    return ord;
                case OrdinateType.STDI_VALUE_STANDART:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.STDI_VALUE_STANDART);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.STANDART, OrdinateType.STDI_VALUE_STANDART));
                    OrdinateCreate(ord, OrdinateType.STDI_EXCHANGE);
                    OrdinateCreate(ord, OrdinateType.STDI_STAFF);
                    OrdinateCreate(ord, OrdinateType.STDI_VAT_MODE);
                    return ord;
                case OrdinateType.STDI_EXCHANGE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.STDI_EXCHANGE);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_REPORT_VALUTA, OrdinateType.STDI_EXCHANGE));
                    OrdinateCreate(ord, OrdinateType.STDI_EXCHANGE_RATE);
                    return ord;
                case OrdinateType.STDI_STAFF:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.STDI_STAFF);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanEntity> stdi_staff_objs = DimPartyQueryValueGet(ord.CategoryValue, ReportOrderPlanEntityType.PARTY_BAY_STAFF, OrdinateType.STDI_STAFF);
                    sort_order = 0;
                    foreach (var stdi_staff_obj in stdi_staff_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.STDI_STAFF);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimPartyCategoryValueLocate(ord.CategoryValue, stdi_staff_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.STDI_STAFF_INSURANCE);
                        OrdinateCreate(sub_ord, OrdinateType.STDI_STAFF_FOT);
                        OrdinateCreate(sub_ord, OrdinateType.STDI_STAFF_OVERHEAD);
                    }
                    return ord;
                case OrdinateType.STDI_VAT_MODE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.STDI_VAT_MODE);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 15;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanVatMode> stdi_vat_mode_objs = DimVatModeObligationQueryValueGet(ord.CategoryValue, ReportOrderPlanVatModeType.ALLRATE, OrdinateType.STDI_VAT_MODE);
                    sort_order = 0;
                    foreach (var stdi_vat_mode_obj in stdi_vat_mode_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.STDI_VAT_MODE);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimVatModeObligationCategoryValueLocate(ord.CategoryValue, stdi_vat_mode_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.STDI_TAX_VAT);
                    }
                    return ord;
                case OrdinateType.STDI_STAFF_INSURANCE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.STDI_STAFF_INSURANCE);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimStandartCategoryValueLocate(ord_up_category_value, DimStandartSingleValueGet(ord_up_category_value, ReportOrderPlanStandartType.STD_STAFF_INSURANCE, OrdinateType.STDI_STAFF_INSURANCE));
                    return ord;
                case OrdinateType.STDI_EXCHANGE_RATE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.STDI_EXCHANGE_RATE);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimStandartCategoryValueLocate(ord_up_category_value, DimStandartSingleValueGet(ord_up_category_value, ReportOrderPlanStandartType.STD_EXCHANGE_RATE, OrdinateType.STDI_EXCHANGE_RATE));
                    OrdinateCreate(ord, OrdinateType.STDI_EXCHANGE_VALUTA_OBLIGATION);
                    return ord;
                case OrdinateType.STDI_STAFF_FOT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.STDI_STAFF_FOT);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimStandartCategoryValueLocate(ord_up_category_value, DimStandartSingleValueGet(ord_up_category_value, ReportOrderPlanStandartType.STD_STAFF_FOT, OrdinateType.STDI_STAFF_FOT));
                    return ord;
                case OrdinateType.STDI_STAFF_OVERHEAD:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.STDI_STAFF_OVERHEAD);
                    ord.Up = ord_up;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimStandartCategoryValueLocate(ord_up_category_value, DimStandartSingleValueGet(ord_up_category_value, ReportOrderPlanStandartType.STD_STAFF_OVERHEAD, OrdinateType.STDI_STAFF_OVERHEAD));
                    return ord;
                case OrdinateType.STDI_TAX_VAT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.STDI_TAX_VAT);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimStandartCategoryValueLocate(ord_up_category_value, DimStandartSingleValueGet(ord_up_category_value, ReportOrderPlanStandartType.STD_TAX_VAT, OrdinateType.STDI_TAX_VAT));
                    return ord;
                case OrdinateType.STDI_EXCHANGE_VALUTA_OBLIGATION:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.STDI_EXCHANGE_VALUTA_OBLIGATION);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanValuta> stdi_exchange_valuta_obligation_objs = DimValutaObligationQueryValueGet(ord.CategoryValue, ReportOrderPlanValutaType.ALL_OBLIGATION, OrdinateType.STDI_EXCHANGE_VALUTA_OBLIGATION);
                    sort_order = 0;
                    foreach (var stdi_exchange_valuta_obligation_obj in stdi_exchange_valuta_obligation_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.STDI_EXCHANGE_VALUTA_OBLIGATION);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimValutaObligationCategoryValueLocate(ord.CategoryValue, stdi_exchange_valuta_obligation_obj);
                        sub_ord.IsIntegrated = false;
                        sub_ord.SortOrder = sort_order++;
                    }
                    return ord;
                default:
                    return null;
            }
        }
        
        protected ReportOrderPlanCategoryValue DimReportCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanReport obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimReport = obj;
            value.DimEntity = value.DimReport?.Entity;
            value.DimOrder = value.DimReport?.Order;
            value.DimVatMode = value.DimOrder?.VatMode;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimValueTypeCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanValueType obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimValueType = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimValutaCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanValuta obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimValuta = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimPartyCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanEntity obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimParty = obj;
            value.DimPartyKind = value.DimParty?.Kind;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimVatModeObligationCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanVatMode obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimVatModeObligation = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimStandartCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanStandart obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimStandart = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimValutaObligationCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanValuta obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimValutaObligation = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanValueType DimValueTypeSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanValueTypeType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.STDI_VALUE_STANDART:
                    return Report.ReportCore.ConstValueType[model];
                default:
                    return null;
            }
        }
        protected ReportOrderPlanValuta DimValutaSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanValutaType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.STDI_EXCHANGE:
                    return context.DimReport?.Valuta;
                default:
                    return null;
            }
        }
        protected ReportOrderPlanStandart DimStandartSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanStandartType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.STDI_STAFF_INSURANCE:
                    return Report.ReportCore.ConstStandart[model];
                case OrdinateType.STDI_EXCHANGE_RATE:
                    return Report.ReportCore.ConstStandart[model];
                case OrdinateType.STDI_STAFF_FOT:
                    return Report.ReportCore.ConstStandart[model];
                case OrdinateType.STDI_STAFF_OVERHEAD:
                    return Report.ReportCore.ConstStandart[model];
                case OrdinateType.STDI_TAX_VAT:
                    return Report.ReportCore.ConstStandart[model];
                default:
                    return null;
            }
        }
        protected IList<ReportOrderPlanReport> DimReportQueryValueGet(ReportOrderPlanCategoryValue context, ReportOrderPlanReportType model, OrdinateType ord_type) {
            return Report.ReportCore.QueryReport(context, model);
        }
        protected IList<ReportOrderPlanEntity> DimPartyQueryValueGet(ReportOrderPlanCategoryValue context, ReportOrderPlanEntityType model, OrdinateType ord_type) {
            return Report.ReportCore.QueryEntity(context, model);
        }
        protected IList<ReportOrderPlanVatMode> DimVatModeObligationQueryValueGet(ReportOrderPlanCategoryValue context, ReportOrderPlanVatModeType model, OrdinateType ord_type) {
            return Report.ReportCore.QueryVatMode(context, model);
        }
        protected IList<ReportOrderPlanValuta> DimValutaObligationQueryValueGet(ReportOrderPlanCategoryValue context, ReportOrderPlanValutaType model, OrdinateType ord_type) {
            return Report.ReportCore.QueryValuta(context, model);
        }
        
    }
    
    public partial class ReportOrderPlanAxisPersFindealCfRows: MdfAxis<ReportOrderPlanReport,ReportOrderPlanCategoryValue,ReportOrderPlanTable,ReportOrderPlanTableCell,ReportOrderPlanDataPoint> {
        
        public enum OrdinateType {
            REPORT =  670,
            PERIOD_PLAN =  671,
            PERIOD_PLAN_MONTH =  672,
            ROWS_FINDEAL_SALE =  673,
            ROWS_FINDEAL_BUY =  674,
            ROWS_FINDEAL_SALE_ARTICLE =  675,
            ROWS_FINDEAL_BUY_ARTICLE =  676,
            ROWS_FINDEAL_SALE_ARTICLE_VALUTA_OBLIGATION =  677,
            ROWS_FINDEAL_SALE_ARTICLE_VALUTA_REPORT =  678,
            ROWS_FINDEAL_BUY_ARTICLE_VALUTA_OBLIGATION =  679,
            ROWS_FINDEAL_BUY_ARTICLE_VALUTA_REPORT =  680,
            PERIOD_PLAN_BEGIN =  711,
            ROWS_BEGIN_FINDEAL_SALE =  712,
            ROWS_BEGIN_FINDEAL_BUY =  713,
            ROWS_BEGIN_FINDEAL_SALE_ARTICLE =  714,
            ROWS_BEGIN_FINDEAL_BUY_ARTICLE =  715,
            ROWS_BEGIN_FINDEAL_SALE_ARTICLE_VALUTA_OBLIGATION =  716,
            ROWS_BEGIN_FINDEAL_SALE_ARTICLE_VALUTA_REPORT =  717,
            ROWS_BEGIN_FINDEAL_BUY_ARTICLE_VALUTA_OBLIGATION =  718,
            ROWS_BEGIN_FINDEAL_BUY_ARTICLE_VALUTA_REPORT =  719,
        }
        
        public class Ordinate : MdfAxisOrdinate {
            private OrdinateType _OrdinateType;
            public OrdinateType OrdinateType{
                get { return _OrdinateType; }
            }
            
            public Ordinate(ReportOrderPlanAxisPersFindealCfRows axis, MdfAxisOrdinateValueType value_type, OrdinateType ord_type): base(axis, value_type)  {
                _OrdinateType = ord_type;
            }
        }
        
        public ReportOrderPlanAxisPersFindealCfRows(ReportOrderPlanReport report): base(report) { }
        
        public override void OrdinatesFill() {
            Root = OrdinateCreate(null, OrdinateType.REPORT);
        }
        
        protected Ordinate OrdinateCreate(Ordinate ord_up, OrdinateType ord_type) {
            Ordinate ord;
            Ordinate sub_ord;
            Int32 sort_order = 0;
            ReportOrderPlanCategoryValue ord_up_category_value = ord_up?.CategoryValue ?? ReportOrderPlanCategoryValue.DefaultCategoryValue;
            switch (ord_type) {
                case OrdinateType.REPORT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.REPORT);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanReport> report_objs = DimReportQueryValueGet(ord.CategoryValue, ReportOrderPlanReportType.REPORT, OrdinateType.REPORT);
                    sort_order = 0;
                    foreach (var report_obj in report_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.REPORT);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimReportCategoryValueLocate(ord.CategoryValue, report_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.PERIOD_PLAN);
                    }
                    return ord;
                case OrdinateType.PERIOD_PLAN:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.PERIOD_PLAN);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanPeriod> period_plan_objs = DimPeriodQueryValueGet(ord.CategoryValue, ReportOrderPlanPeriodType.PERIOD_PLAN, OrdinateType.PERIOD_PLAN);
                    sort_order = 0;
                    foreach (var period_plan_obj in period_plan_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.PERIOD_PLAN);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimPeriodCategoryValueLocate(ord.CategoryValue, period_plan_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.PERIOD_PLAN_MONTH);
                        OrdinateCreate(sub_ord, OrdinateType.PERIOD_PLAN_BEGIN);
                    }
                    return ord;
                case OrdinateType.PERIOD_PLAN_MONTH:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.PERIOD_PLAN_MONTH);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanPeriod> period_plan_month_objs = DimPeriodQueryValueGet(ord.CategoryValue, ReportOrderPlanPeriodType.PERIOD_PLAN_MONTH, OrdinateType.PERIOD_PLAN_MONTH);
                    sort_order = 0;
                    foreach (var period_plan_month_obj in period_plan_month_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.PERIOD_PLAN_MONTH);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimPeriodCategoryValueLocate(ord.CategoryValue, period_plan_month_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.ROWS_FINDEAL_SALE);
                        OrdinateCreate(sub_ord, OrdinateType.ROWS_FINDEAL_BUY);
                    }
                    return ord;
                case OrdinateType.ROWS_FINDEAL_SALE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.ROWS_FINDEAL_SALE);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> rows_findeal_sale_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_SALE, OrdinateType.ROWS_FINDEAL_SALE);
                    sort_order = 0;
                    foreach (var rows_findeal_sale_obj in rows_findeal_sale_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.ROWS_FINDEAL_SALE);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, rows_findeal_sale_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.ROWS_FINDEAL_SALE_ARTICLE);
                    }
                    return ord;
                case OrdinateType.ROWS_FINDEAL_BUY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.ROWS_FINDEAL_BUY);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> rows_findeal_buy_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_BUY, OrdinateType.ROWS_FINDEAL_BUY);
                    sort_order = 0;
                    foreach (var rows_findeal_buy_obj in rows_findeal_buy_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.ROWS_FINDEAL_BUY);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, rows_findeal_buy_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.ROWS_FINDEAL_BUY_ARTICLE);
                    }
                    return ord;
                case OrdinateType.ROWS_FINDEAL_SALE_ARTICLE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.ROWS_FINDEAL_SALE_ARTICLE);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.DIM_FINDEAL_ACTICLE, OrdinateType.ROWS_FINDEAL_SALE_ARTICLE));
                    OrdinateCreate(ord, OrdinateType.ROWS_FINDEAL_SALE_ARTICLE_VALUTA_OBLIGATION);
                    OrdinateCreate(ord, OrdinateType.ROWS_FINDEAL_SALE_ARTICLE_VALUTA_REPORT);
                    return ord;
                case OrdinateType.ROWS_FINDEAL_BUY_ARTICLE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.ROWS_FINDEAL_BUY_ARTICLE);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.DIM_FINDEAL_ACTICLE, OrdinateType.ROWS_FINDEAL_BUY_ARTICLE));
                    OrdinateCreate(ord, OrdinateType.ROWS_FINDEAL_BUY_ARTICLE_VALUTA_OBLIGATION);
                    OrdinateCreate(ord, OrdinateType.ROWS_FINDEAL_BUY_ARTICLE_VALUTA_REPORT);
                    return ord;
                case OrdinateType.ROWS_FINDEAL_SALE_ARTICLE_VALUTA_OBLIGATION:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.ROWS_FINDEAL_SALE_ARTICLE_VALUTA_OBLIGATION);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_FINDEAL_VALUTA, OrdinateType.ROWS_FINDEAL_SALE_ARTICLE_VALUTA_OBLIGATION));
                    return ord;
                case OrdinateType.ROWS_FINDEAL_SALE_ARTICLE_VALUTA_REPORT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.ROWS_FINDEAL_SALE_ARTICLE_VALUTA_REPORT);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_REPORT_VALUTA, OrdinateType.ROWS_FINDEAL_SALE_ARTICLE_VALUTA_REPORT));
                    return ord;
                case OrdinateType.ROWS_FINDEAL_BUY_ARTICLE_VALUTA_OBLIGATION:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.ROWS_FINDEAL_BUY_ARTICLE_VALUTA_OBLIGATION);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_FINDEAL_VALUTA, OrdinateType.ROWS_FINDEAL_BUY_ARTICLE_VALUTA_OBLIGATION));
                    return ord;
                case OrdinateType.ROWS_FINDEAL_BUY_ARTICLE_VALUTA_REPORT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.ROWS_FINDEAL_BUY_ARTICLE_VALUTA_REPORT);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_REPORT_VALUTA, OrdinateType.ROWS_FINDEAL_BUY_ARTICLE_VALUTA_REPORT));
                    return ord;
                case OrdinateType.PERIOD_PLAN_BEGIN:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.PERIOD_PLAN_BEGIN);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanPeriod> period_plan_begin_objs = DimPeriodQueryValueGet(ord.CategoryValue, ReportOrderPlanPeriodType.PERIOD_PLAN_BALANCE_BEGIN, OrdinateType.PERIOD_PLAN_BEGIN);
                    sort_order = 0;
                    foreach (var period_plan_begin_obj in period_plan_begin_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.PERIOD_PLAN_BEGIN);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimPeriodCategoryValueLocate(ord.CategoryValue, period_plan_begin_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.ROWS_BEGIN_FINDEAL_SALE);
                        OrdinateCreate(sub_ord, OrdinateType.ROWS_BEGIN_FINDEAL_BUY);
                    }
                    return ord;
                case OrdinateType.ROWS_BEGIN_FINDEAL_SALE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.ROWS_BEGIN_FINDEAL_SALE);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> rows_begin_findeal_sale_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_SALE, OrdinateType.ROWS_BEGIN_FINDEAL_SALE);
                    sort_order = 0;
                    foreach (var rows_begin_findeal_sale_obj in rows_begin_findeal_sale_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.ROWS_BEGIN_FINDEAL_SALE);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, rows_begin_findeal_sale_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.ROWS_BEGIN_FINDEAL_SALE_ARTICLE);
                    }
                    return ord;
                case OrdinateType.ROWS_BEGIN_FINDEAL_BUY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.ROWS_BEGIN_FINDEAL_BUY);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> rows_begin_findeal_buy_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_BUY, OrdinateType.ROWS_BEGIN_FINDEAL_BUY);
                    sort_order = 0;
                    foreach (var rows_begin_findeal_buy_obj in rows_begin_findeal_buy_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.ROWS_BEGIN_FINDEAL_BUY);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, rows_begin_findeal_buy_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.ROWS_BEGIN_FINDEAL_BUY_ARTICLE);
                    }
                    return ord;
                case OrdinateType.ROWS_BEGIN_FINDEAL_SALE_ARTICLE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.ROWS_BEGIN_FINDEAL_SALE_ARTICLE);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.DIM_FINDEAL_ACTICLE, OrdinateType.ROWS_BEGIN_FINDEAL_SALE_ARTICLE));
                    OrdinateCreate(ord, OrdinateType.ROWS_BEGIN_FINDEAL_SALE_ARTICLE_VALUTA_OBLIGATION);
                    OrdinateCreate(ord, OrdinateType.ROWS_BEGIN_FINDEAL_SALE_ARTICLE_VALUTA_REPORT);
                    return ord;
                case OrdinateType.ROWS_BEGIN_FINDEAL_BUY_ARTICLE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.ROWS_BEGIN_FINDEAL_BUY_ARTICLE);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.DIM_FINDEAL_ACTICLE, OrdinateType.ROWS_BEGIN_FINDEAL_BUY_ARTICLE));
                    OrdinateCreate(ord, OrdinateType.ROWS_BEGIN_FINDEAL_BUY_ARTICLE_VALUTA_OBLIGATION);
                    OrdinateCreate(ord, OrdinateType.ROWS_BEGIN_FINDEAL_BUY_ARTICLE_VALUTA_REPORT);
                    return ord;
                case OrdinateType.ROWS_BEGIN_FINDEAL_SALE_ARTICLE_VALUTA_OBLIGATION:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.ROWS_BEGIN_FINDEAL_SALE_ARTICLE_VALUTA_OBLIGATION);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_FINDEAL_VALUTA, OrdinateType.ROWS_BEGIN_FINDEAL_SALE_ARTICLE_VALUTA_OBLIGATION));
                    return ord;
                case OrdinateType.ROWS_BEGIN_FINDEAL_SALE_ARTICLE_VALUTA_REPORT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.ROWS_BEGIN_FINDEAL_SALE_ARTICLE_VALUTA_REPORT);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_REPORT_VALUTA, OrdinateType.ROWS_BEGIN_FINDEAL_SALE_ARTICLE_VALUTA_REPORT));
                    return ord;
                case OrdinateType.ROWS_BEGIN_FINDEAL_BUY_ARTICLE_VALUTA_OBLIGATION:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.ROWS_BEGIN_FINDEAL_BUY_ARTICLE_VALUTA_OBLIGATION);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_FINDEAL_VALUTA, OrdinateType.ROWS_BEGIN_FINDEAL_BUY_ARTICLE_VALUTA_OBLIGATION));
                    return ord;
                case OrdinateType.ROWS_BEGIN_FINDEAL_BUY_ARTICLE_VALUTA_REPORT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.ROWS_BEGIN_FINDEAL_BUY_ARTICLE_VALUTA_REPORT);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_REPORT_VALUTA, OrdinateType.ROWS_BEGIN_FINDEAL_BUY_ARTICLE_VALUTA_REPORT));
                    return ord;
                default:
                    return null;
            }
        }
        
        protected ReportOrderPlanCategoryValue DimReportCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanReport obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimReport = obj;
            value.DimEntity = value.DimReport?.Entity;
            value.DimOrder = value.DimReport?.Order;
            value.DimVatMode = value.DimOrder?.VatMode;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimPeriodCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanPeriod obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimPeriod = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimFindealCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanFindeal obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimFindeal = obj;
            value.DimDeal = value.DimFindeal?.Deal;
            value.DimParty = value.DimDeal?.Party;
            value.DimPartyKind = value.DimParty?.Kind;
            value.DimDealKind = value.DimDeal?.Kind;
            value.DimValutaObligation = value.DimFindeal?.Valuta;
            value.DimVatModeObligation = value.DimFindeal?.VatMode;
            value.DimArticle = value.DimFindeal?.Article;
            value.DimFindealKind = value.DimFindeal?.Kind;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimArticleCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanArticle obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimArticle = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimValutaCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanValuta obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimValuta = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanArticle DimArticleSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanArticleType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.ROWS_FINDEAL_SALE_ARTICLE:
                    return context.DimFindeal?.Article;
                case OrdinateType.ROWS_FINDEAL_BUY_ARTICLE:
                    return context.DimFindeal?.Article;
                case OrdinateType.ROWS_BEGIN_FINDEAL_SALE_ARTICLE:
                    return context.DimFindeal?.Article;
                case OrdinateType.ROWS_BEGIN_FINDEAL_BUY_ARTICLE:
                    return context.DimFindeal?.Article;
                default:
                    return null;
            }
        }
        protected ReportOrderPlanValuta DimValutaSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanValutaType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.ROWS_FINDEAL_SALE_ARTICLE_VALUTA_OBLIGATION:
                    return context.DimFindeal?.Valuta;
                case OrdinateType.ROWS_FINDEAL_SALE_ARTICLE_VALUTA_REPORT:
                    return context.DimReport?.Valuta;
                case OrdinateType.ROWS_FINDEAL_BUY_ARTICLE_VALUTA_OBLIGATION:
                    return context.DimFindeal?.Valuta;
                case OrdinateType.ROWS_FINDEAL_BUY_ARTICLE_VALUTA_REPORT:
                    return context.DimReport?.Valuta;
                case OrdinateType.ROWS_BEGIN_FINDEAL_SALE_ARTICLE_VALUTA_OBLIGATION:
                    return context.DimFindeal?.Valuta;
                case OrdinateType.ROWS_BEGIN_FINDEAL_SALE_ARTICLE_VALUTA_REPORT:
                    return context.DimReport?.Valuta;
                case OrdinateType.ROWS_BEGIN_FINDEAL_BUY_ARTICLE_VALUTA_OBLIGATION:
                    return context.DimFindeal?.Valuta;
                case OrdinateType.ROWS_BEGIN_FINDEAL_BUY_ARTICLE_VALUTA_REPORT:
                    return context.DimReport?.Valuta;
                default:
                    return null;
            }
        }
        protected IList<ReportOrderPlanReport> DimReportQueryValueGet(ReportOrderPlanCategoryValue context, ReportOrderPlanReportType model, OrdinateType ord_type) {
            return Report.ReportCore.QueryReport(context, model);
        }
        protected IList<ReportOrderPlanPeriod> DimPeriodQueryValueGet(ReportOrderPlanCategoryValue context, ReportOrderPlanPeriodType model, OrdinateType ord_type) {
            return Report.ReportCore.QueryPeriod(context, model);
        }
        protected IList<ReportOrderPlanFindeal> DimFindealQueryValueGet(ReportOrderPlanCategoryValue context, ReportOrderPlanFindealType model, OrdinateType ord_type) {
            return Report.ReportCore.QueryFindeal(context, model);
        }
        
    }
    
    public partial class ReportOrderPlanAxisPersFindealCfCols: MdfAxis<ReportOrderPlanReport,ReportOrderPlanCategoryValue,ReportOrderPlanTable,ReportOrderPlanTableCell,ReportOrderPlanDataPoint> {
        
        public enum OrdinateType {
            ROOT =  682,
            FORECAST =  683,
            REPORT_CF =  685,
            CF_FORECAST_BALANCE =  695,
            CF_FORECAST_PAYMENT =  697,
            CF_FORECAST_PREPAYMENT =  698,
            CF_FORECAST_POSTPAYMENT =  699,
        }
        
        public class Ordinate : MdfAxisOrdinate {
            private OrdinateType _OrdinateType;
            public OrdinateType OrdinateType{
                get { return _OrdinateType; }
            }
            
            public Ordinate(ReportOrderPlanAxisPersFindealCfCols axis, MdfAxisOrdinateValueType value_type, OrdinateType ord_type): base(axis, value_type)  {
                _OrdinateType = ord_type;
            }
        }
        
        public ReportOrderPlanAxisPersFindealCfCols(ReportOrderPlanReport report): base(report) { }
        
        public override void OrdinatesFill() {
            Root = OrdinateCreate(null, OrdinateType.ROOT);
        }
        
        protected Ordinate OrdinateCreate(Ordinate ord_up, OrdinateType ord_type) {
            Ordinate ord;
            Ordinate sub_ord;
            Int32 sort_order = 0;
            ReportOrderPlanCategoryValue ord_up_category_value = ord_up?.CategoryValue ?? ReportOrderPlanCategoryValue.DefaultCategoryValue;
            switch (ord_type) {
                case OrdinateType.ROOT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.ROOT);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    OrdinateCreate(ord, OrdinateType.FORECAST);
                    return ord;
                case OrdinateType.FORECAST:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.FORECAST);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimScenarioCategoryValueLocate(ord_up_category_value, DimScenarioSingleValueGet(ord_up_category_value, ReportOrderPlanScenarioType.FORECAST, OrdinateType.FORECAST));
                    OrdinateCreate(ord, OrdinateType.REPORT_CF);
                    return ord;
                case OrdinateType.REPORT_CF:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.REPORT_CF);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimFinrepCategoryValueLocate(ord_up_category_value, DimFinrepSingleValueGet(ord_up_category_value, ReportOrderPlanFinrepType.FINREP_CF, OrdinateType.REPORT_CF));
                    OrdinateCreate(ord, OrdinateType.CF_FORECAST_BALANCE);
                    return ord;
                case OrdinateType.CF_FORECAST_BALANCE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_FORECAST_BALANCE);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.BALANCE, OrdinateType.CF_FORECAST_BALANCE));
                    OrdinateCreate(ord, OrdinateType.CF_FORECAST_PAYMENT);
                    OrdinateCreate(ord, OrdinateType.CF_FORECAST_PREPAYMENT);
                    OrdinateCreate(ord, OrdinateType.CF_FORECAST_POSTPAYMENT);
                    return ord;
                case OrdinateType.CF_FORECAST_PAYMENT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_FORECAST_PAYMENT);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.CF_FORECAST_PREPAYMENT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_FORECAST_PREPAYMENT);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimPayTypeCategoryValueLocate(ord_up_category_value, DimPayTypeSingleValueGet(ord_up_category_value, ReportOrderPlanPayTypeType.PREPAYMENT, OrdinateType.CF_FORECAST_PREPAYMENT));
                    return ord;
                case OrdinateType.CF_FORECAST_POSTPAYMENT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_FORECAST_POSTPAYMENT);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimPayTypeCategoryValueLocate(ord_up_category_value, DimPayTypeSingleValueGet(ord_up_category_value, ReportOrderPlanPayTypeType.POSTPAYMENT, OrdinateType.CF_FORECAST_POSTPAYMENT));
                    return ord;
                default:
                    return null;
            }
        }
        
        protected ReportOrderPlanCategoryValue DimScenarioCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanScenario obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimScenario = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimFinrepCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanFinrep obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimFinrep = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimValueTypeCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanValueType obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimValueType = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimPayTypeCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanPayType obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimPayType = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanScenario DimScenarioSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanScenarioType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.FORECAST:
                    return Report.ReportCore.ConstScenario[model];
                default:
                    return null;
            }
        }
        protected ReportOrderPlanFinrep DimFinrepSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanFinrepType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.REPORT_CF:
                    return Report.ReportCore.ConstFinrep[model];
                default:
                    return null;
            }
        }
        protected ReportOrderPlanValueType DimValueTypeSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanValueTypeType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.CF_FORECAST_BALANCE:
                    return Report.ReportCore.ConstValueType[model];
                default:
                    return null;
            }
        }
        protected ReportOrderPlanPayType DimPayTypeSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanPayTypeType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.CF_FORECAST_PREPAYMENT:
                    return Report.ReportCore.ConstPayType[model];
                case OrdinateType.CF_FORECAST_POSTPAYMENT:
                    return Report.ReportCore.ConstPayType[model];
                default:
                    return null;
            }
        }
        
    }
    
    public partial class ReportOrderPlanAxisPersFindealCheckRows: MdfAxis<ReportOrderPlanReport,ReportOrderPlanCategoryValue,ReportOrderPlanTable,ReportOrderPlanTableCell,ReportOrderPlanDataPoint> {
        
        public enum OrdinateType {
            REPORT =  754,
            ROWS_FINDEAL_SALE =  755,
            ROWS_FINDEAL_BUY =  756,
            ROWS_FINDEAL_SALE_ARTICLE =  757,
            ROWS_FINDEAL_BUY_ARTICLE =  758,
            ROWS_FINDEAL_SALE_ARTICLE_VALUTA_OBLIGATION =  759,
            ROWS_FINDEAL_SALE_ARTICLE_VALUTA_REPORT =  760,
            ROWS_FINDEAL_BUY_ARTICLE_VALUTA_OBLIGATION =  761,
            ROWS_FINDEAL_BUY_ARTICLE_VALUTA_REPORT =  762,
            PERIOD_PLAN =  782,
            PERIOD_PLAN_BALANCE_END =  783,
        }
        
        public class Ordinate : MdfAxisOrdinate {
            private OrdinateType _OrdinateType;
            public OrdinateType OrdinateType{
                get { return _OrdinateType; }
            }
            
            public Ordinate(ReportOrderPlanAxisPersFindealCheckRows axis, MdfAxisOrdinateValueType value_type, OrdinateType ord_type): base(axis, value_type)  {
                _OrdinateType = ord_type;
            }
        }
        
        public ReportOrderPlanAxisPersFindealCheckRows(ReportOrderPlanReport report): base(report) { }
        
        public override void OrdinatesFill() {
            Root = OrdinateCreate(null, OrdinateType.REPORT);
        }
        
        protected Ordinate OrdinateCreate(Ordinate ord_up, OrdinateType ord_type) {
            Ordinate ord;
            Ordinate sub_ord;
            Int32 sort_order = 0;
            ReportOrderPlanCategoryValue ord_up_category_value = ord_up?.CategoryValue ?? ReportOrderPlanCategoryValue.DefaultCategoryValue;
            switch (ord_type) {
                case OrdinateType.REPORT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.REPORT);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanReport> report_objs = DimReportQueryValueGet(ord.CategoryValue, ReportOrderPlanReportType.REPORT, OrdinateType.REPORT);
                    sort_order = 0;
                    foreach (var report_obj in report_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.REPORT);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimReportCategoryValueLocate(ord.CategoryValue, report_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.PERIOD_PLAN);
                    }
                    return ord;
                case OrdinateType.ROWS_FINDEAL_SALE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.ROWS_FINDEAL_SALE);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> rows_findeal_sale_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_SALE, OrdinateType.ROWS_FINDEAL_SALE);
                    sort_order = 0;
                    foreach (var rows_findeal_sale_obj in rows_findeal_sale_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.ROWS_FINDEAL_SALE);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, rows_findeal_sale_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.ROWS_FINDEAL_SALE_ARTICLE);
                    }
                    return ord;
                case OrdinateType.ROWS_FINDEAL_BUY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.ROWS_FINDEAL_BUY);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanFindeal> rows_findeal_buy_objs = DimFindealQueryValueGet(ord.CategoryValue, ReportOrderPlanFindealType.FINDEAL_BUY, OrdinateType.ROWS_FINDEAL_BUY);
                    sort_order = 0;
                    foreach (var rows_findeal_buy_obj in rows_findeal_buy_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.ROWS_FINDEAL_BUY);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimFindealCategoryValueLocate(ord.CategoryValue, rows_findeal_buy_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.ROWS_FINDEAL_BUY_ARTICLE);
                    }
                    return ord;
                case OrdinateType.ROWS_FINDEAL_SALE_ARTICLE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.ROWS_FINDEAL_SALE_ARTICLE);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.DIM_FINDEAL_ACTICLE, OrdinateType.ROWS_FINDEAL_SALE_ARTICLE));
                    OrdinateCreate(ord, OrdinateType.ROWS_FINDEAL_SALE_ARTICLE_VALUTA_OBLIGATION);
                    OrdinateCreate(ord, OrdinateType.ROWS_FINDEAL_SALE_ARTICLE_VALUTA_REPORT);
                    return ord;
                case OrdinateType.ROWS_FINDEAL_BUY_ARTICLE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.ROWS_FINDEAL_BUY_ARTICLE);
                    ord.Up = ord_up;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimArticleCategoryValueLocate(ord_up_category_value, DimArticleSingleValueGet(ord_up_category_value, ReportOrderPlanArticleType.DIM_FINDEAL_ACTICLE, OrdinateType.ROWS_FINDEAL_BUY_ARTICLE));
                    OrdinateCreate(ord, OrdinateType.ROWS_FINDEAL_BUY_ARTICLE_VALUTA_OBLIGATION);
                    OrdinateCreate(ord, OrdinateType.ROWS_FINDEAL_BUY_ARTICLE_VALUTA_REPORT);
                    return ord;
                case OrdinateType.ROWS_FINDEAL_SALE_ARTICLE_VALUTA_OBLIGATION:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.ROWS_FINDEAL_SALE_ARTICLE_VALUTA_OBLIGATION);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_FINDEAL_VALUTA, OrdinateType.ROWS_FINDEAL_SALE_ARTICLE_VALUTA_OBLIGATION));
                    return ord;
                case OrdinateType.ROWS_FINDEAL_SALE_ARTICLE_VALUTA_REPORT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.ROWS_FINDEAL_SALE_ARTICLE_VALUTA_REPORT);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_REPORT_VALUTA, OrdinateType.ROWS_FINDEAL_SALE_ARTICLE_VALUTA_REPORT));
                    return ord;
                case OrdinateType.ROWS_FINDEAL_BUY_ARTICLE_VALUTA_OBLIGATION:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.ROWS_FINDEAL_BUY_ARTICLE_VALUTA_OBLIGATION);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_FINDEAL_VALUTA, OrdinateType.ROWS_FINDEAL_BUY_ARTICLE_VALUTA_OBLIGATION));
                    return ord;
                case OrdinateType.ROWS_FINDEAL_BUY_ARTICLE_VALUTA_REPORT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.ROWS_FINDEAL_BUY_ARTICLE_VALUTA_REPORT);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValutaCategoryValueLocate(ord_up_category_value, DimValutaSingleValueGet(ord_up_category_value, ReportOrderPlanValutaType.DIM_REPORT_VALUTA, OrdinateType.ROWS_FINDEAL_BUY_ARTICLE_VALUTA_REPORT));
                    return ord;
                case OrdinateType.PERIOD_PLAN:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.PERIOD_PLAN);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanPeriod> period_plan_objs = DimPeriodQueryValueGet(ord.CategoryValue, ReportOrderPlanPeriodType.PERIOD_PLAN, OrdinateType.PERIOD_PLAN);
                    sort_order = 0;
                    foreach (var period_plan_obj in period_plan_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.PERIOD_PLAN);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimPeriodCategoryValueLocate(ord.CategoryValue, period_plan_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.PERIOD_PLAN_BALANCE_END);
                    }
                    return ord;
                case OrdinateType.PERIOD_PLAN_BALANCE_END:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.PERIOD_PLAN_BALANCE_END);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    IList<ReportOrderPlanPeriod> period_plan_balance_end_objs = DimPeriodQueryValueGet(ord.CategoryValue, ReportOrderPlanPeriodType.PERIOD_PLAN_BALANCE_END, OrdinateType.PERIOD_PLAN_BALANCE_END);
                    sort_order = 0;
                    foreach (var period_plan_balance_end_obj in period_plan_balance_end_objs) {
                        sub_ord = new Ordinate(this, MdfAxisOrdinateValueType.OBJECT, OrdinateType.PERIOD_PLAN_BALANCE_END);
                        sub_ord.Up = ord;
                        sub_ord.CategoryValue = DimPeriodCategoryValueLocate(ord.CategoryValue, period_plan_balance_end_obj);
                        sub_ord.IsIntegrated = true;
                        sub_ord.SortOrder = sort_order++;
                        OrdinateCreate(sub_ord, OrdinateType.ROWS_FINDEAL_SALE);
                        OrdinateCreate(sub_ord, OrdinateType.ROWS_FINDEAL_BUY);
                    }
                    return ord;
                default:
                    return null;
            }
        }
        
        protected ReportOrderPlanCategoryValue DimReportCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanReport obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimReport = obj;
            value.DimEntity = value.DimReport?.Entity;
            value.DimOrder = value.DimReport?.Order;
            value.DimVatMode = value.DimOrder?.VatMode;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimFindealCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanFindeal obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimFindeal = obj;
            value.DimDeal = value.DimFindeal?.Deal;
            value.DimParty = value.DimDeal?.Party;
            value.DimPartyKind = value.DimParty?.Kind;
            value.DimDealKind = value.DimDeal?.Kind;
            value.DimValutaObligation = value.DimFindeal?.Valuta;
            value.DimVatModeObligation = value.DimFindeal?.VatMode;
            value.DimArticle = value.DimFindeal?.Article;
            value.DimFindealKind = value.DimFindeal?.Kind;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimArticleCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanArticle obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimArticle = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimValutaCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanValuta obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimValuta = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimPeriodCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanPeriod obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimPeriod = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanArticle DimArticleSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanArticleType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.ROWS_FINDEAL_SALE_ARTICLE:
                    return context.DimFindeal?.Article;
                case OrdinateType.ROWS_FINDEAL_BUY_ARTICLE:
                    return context.DimFindeal?.Article;
                default:
                    return null;
            }
        }
        protected ReportOrderPlanValuta DimValutaSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanValutaType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.ROWS_FINDEAL_SALE_ARTICLE_VALUTA_OBLIGATION:
                    return context.DimFindeal?.Valuta;
                case OrdinateType.ROWS_FINDEAL_SALE_ARTICLE_VALUTA_REPORT:
                    return context.DimReport?.Valuta;
                case OrdinateType.ROWS_FINDEAL_BUY_ARTICLE_VALUTA_OBLIGATION:
                    return context.DimFindeal?.Valuta;
                case OrdinateType.ROWS_FINDEAL_BUY_ARTICLE_VALUTA_REPORT:
                    return context.DimReport?.Valuta;
                default:
                    return null;
            }
        }
        protected IList<ReportOrderPlanReport> DimReportQueryValueGet(ReportOrderPlanCategoryValue context, ReportOrderPlanReportType model, OrdinateType ord_type) {
            return Report.ReportCore.QueryReport(context, model);
        }
        protected IList<ReportOrderPlanFindeal> DimFindealQueryValueGet(ReportOrderPlanCategoryValue context, ReportOrderPlanFindealType model, OrdinateType ord_type) {
            return Report.ReportCore.QueryFindeal(context, model);
        }
        protected IList<ReportOrderPlanPeriod> DimPeriodQueryValueGet(ReportOrderPlanCategoryValue context, ReportOrderPlanPeriodType model, OrdinateType ord_type) {
            return Report.ReportCore.QueryPeriod(context, model);
        }
        
    }
    
    public partial class ReportOrderPlanAxisPersFindealCheckCols: MdfAxis<ReportOrderPlanReport,ReportOrderPlanCategoryValue,ReportOrderPlanTable,ReportOrderPlanTableCell,ReportOrderPlanDataPoint> {
        
        public enum OrdinateType {
            ROOT =  766,
            FORECAST =  767,
            IMPORT =  768,
            REPORT_CF =  769,
            REPORT_IE =  770,
            IMPORT_REPORT_CF =  771,
            IMPORT_REPORT_IE =  772,
            CF_FORECAST_BALANCE =  773,
            IE_FORECAST_SUMMALL =  774,
            CF_IMPORT_BALANCE =  775,
            IE_IMPORT_SUMMALL =  776,
            CF_FORECAST_BALANCE_ALL =  777,
            IE_IMPORT_COST =  785,
            CF_IMPORT_BALANCE_ALL =  786,
            IE_FORECAST_BALANCE =  787,
            IE_FORECAST_COST =  788,
            CF_FORECAST_BALANCE_PREPAY =  789,
            CF_FORECAST_BALANCE_POSTPAY =  790,
            IE_IMPORT_BALANCE =  791,
            CF_IMPORT_BALANCE_PREPAY =  792,
            CF_IMPORT_BALANCE_POSTPAY =  793,
        }
        
        public class Ordinate : MdfAxisOrdinate {
            private OrdinateType _OrdinateType;
            public OrdinateType OrdinateType{
                get { return _OrdinateType; }
            }
            
            public Ordinate(ReportOrderPlanAxisPersFindealCheckCols axis, MdfAxisOrdinateValueType value_type, OrdinateType ord_type): base(axis, value_type)  {
                _OrdinateType = ord_type;
            }
        }
        
        public ReportOrderPlanAxisPersFindealCheckCols(ReportOrderPlanReport report): base(report) { }
        
        public override void OrdinatesFill() {
            Root = OrdinateCreate(null, OrdinateType.ROOT);
        }
        
        protected Ordinate OrdinateCreate(Ordinate ord_up, OrdinateType ord_type) {
            Ordinate ord;
            Ordinate sub_ord;
            Int32 sort_order = 0;
            ReportOrderPlanCategoryValue ord_up_category_value = ord_up?.CategoryValue ?? ReportOrderPlanCategoryValue.DefaultCategoryValue;
            switch (ord_type) {
                case OrdinateType.ROOT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.ROOT);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 0;
                    ord.IsIntegrated = true;
                    OrdinateCreate(ord, OrdinateType.FORECAST);
                    OrdinateCreate(ord, OrdinateType.IMPORT);
                    return ord;
                case OrdinateType.FORECAST:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.FORECAST);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimScenarioCategoryValueLocate(ord_up_category_value, DimScenarioSingleValueGet(ord_up_category_value, ReportOrderPlanScenarioType.FORECAST, OrdinateType.FORECAST));
                    OrdinateCreate(ord, OrdinateType.REPORT_CF);
                    OrdinateCreate(ord, OrdinateType.REPORT_IE);
                    return ord;
                case OrdinateType.IMPORT:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IMPORT);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimScenarioCategoryValueLocate(ord_up_category_value, DimScenarioSingleValueGet(ord_up_category_value, ReportOrderPlanScenarioType.IMPORT, OrdinateType.IMPORT));
                    OrdinateCreate(ord, OrdinateType.IMPORT_REPORT_CF);
                    OrdinateCreate(ord, OrdinateType.IMPORT_REPORT_IE);
                    return ord;
                case OrdinateType.REPORT_CF:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.REPORT_CF);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimFinrepCategoryValueLocate(ord_up_category_value, DimFinrepSingleValueGet(ord_up_category_value, ReportOrderPlanFinrepType.FINREP_CF, OrdinateType.REPORT_CF));
                    OrdinateCreate(ord, OrdinateType.CF_FORECAST_BALANCE);
                    return ord;
                case OrdinateType.REPORT_IE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.REPORT_IE);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimFinrepCategoryValueLocate(ord_up_category_value, DimFinrepSingleValueGet(ord_up_category_value, ReportOrderPlanFinrepType.FINREP_IE, OrdinateType.REPORT_IE));
                    OrdinateCreate(ord, OrdinateType.IE_FORECAST_SUMMALL);
                    OrdinateCreate(ord, OrdinateType.IE_FORECAST_BALANCE);
                    OrdinateCreate(ord, OrdinateType.IE_FORECAST_COST);
                    return ord;
                case OrdinateType.IMPORT_REPORT_CF:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IMPORT_REPORT_CF);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimFinrepCategoryValueLocate(ord_up_category_value, DimFinrepSingleValueGet(ord_up_category_value, ReportOrderPlanFinrepType.FINREP_CF, OrdinateType.IMPORT_REPORT_CF));
                    OrdinateCreate(ord, OrdinateType.CF_IMPORT_BALANCE);
                    return ord;
                case OrdinateType.IMPORT_REPORT_IE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IMPORT_REPORT_IE);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimFinrepCategoryValueLocate(ord_up_category_value, DimFinrepSingleValueGet(ord_up_category_value, ReportOrderPlanFinrepType.FINREP_IE, OrdinateType.IMPORT_REPORT_IE));
                    OrdinateCreate(ord, OrdinateType.IE_IMPORT_SUMMALL);
                    OrdinateCreate(ord, OrdinateType.IE_IMPORT_COST);
                    OrdinateCreate(ord, OrdinateType.IE_IMPORT_BALANCE);
                    return ord;
                case OrdinateType.CF_FORECAST_BALANCE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_FORECAST_BALANCE);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.BALANCE, OrdinateType.CF_FORECAST_BALANCE));
                    OrdinateCreate(ord, OrdinateType.CF_FORECAST_BALANCE_ALL);
                    OrdinateCreate(ord, OrdinateType.CF_FORECAST_BALANCE_PREPAY);
                    OrdinateCreate(ord, OrdinateType.CF_FORECAST_BALANCE_POSTPAY);
                    return ord;
                case OrdinateType.IE_FORECAST_SUMMALL:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_FORECAST_SUMMALL);
                    ord.Up = ord_up;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.SUMMALL, OrdinateType.IE_FORECAST_SUMMALL));
                    return ord;
                case OrdinateType.CF_IMPORT_BALANCE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_IMPORT_BALANCE);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = true;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.BALANCE, OrdinateType.CF_IMPORT_BALANCE));
                    OrdinateCreate(ord, OrdinateType.CF_IMPORT_BALANCE_ALL);
                    OrdinateCreate(ord, OrdinateType.CF_IMPORT_BALANCE_PREPAY);
                    OrdinateCreate(ord, OrdinateType.CF_IMPORT_BALANCE_POSTPAY);
                    return ord;
                case OrdinateType.IE_IMPORT_SUMMALL:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_IMPORT_SUMMALL);
                    ord.Up = ord_up;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.SUMMALL, OrdinateType.IE_IMPORT_SUMMALL));
                    return ord;
                case OrdinateType.CF_FORECAST_BALANCE_ALL:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_FORECAST_BALANCE_ALL);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.IE_IMPORT_COST:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_IMPORT_COST);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.COST, OrdinateType.IE_IMPORT_COST));
                    return ord;
                case OrdinateType.CF_IMPORT_BALANCE_ALL:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_IMPORT_BALANCE_ALL);
                    ord.Up = ord_up;
                    ord.CategoryValue = ord_up_category_value;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    return ord;
                case OrdinateType.IE_FORECAST_BALANCE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_FORECAST_BALANCE);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.BALANCE, OrdinateType.IE_FORECAST_BALANCE));
                    return ord;
                case OrdinateType.IE_FORECAST_COST:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_FORECAST_COST);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.COST, OrdinateType.IE_FORECAST_COST));
                    return ord;
                case OrdinateType.CF_FORECAST_BALANCE_PREPAY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_FORECAST_BALANCE_PREPAY);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimPayTypeCategoryValueLocate(ord_up_category_value, DimPayTypeSingleValueGet(ord_up_category_value, ReportOrderPlanPayTypeType.PREPAYMENT, OrdinateType.CF_FORECAST_BALANCE_PREPAY));
                    return ord;
                case OrdinateType.CF_FORECAST_BALANCE_POSTPAY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_FORECAST_BALANCE_POSTPAY);
                    ord.Up = ord_up;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimPayTypeCategoryValueLocate(ord_up_category_value, DimPayTypeSingleValueGet(ord_up_category_value, ReportOrderPlanPayTypeType.POSTPAYMENT, OrdinateType.CF_FORECAST_BALANCE_POSTPAY));
                    return ord;
                case OrdinateType.IE_IMPORT_BALANCE:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.IE_IMPORT_BALANCE);
                    ord.Up = ord_up;
                    ord.SortOrder = 10;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimValueTypeCategoryValueLocate(ord_up_category_value, DimValueTypeSingleValueGet(ord_up_category_value, ReportOrderPlanValueTypeType.BALANCE, OrdinateType.IE_IMPORT_BALANCE));
                    return ord;
                case OrdinateType.CF_IMPORT_BALANCE_PREPAY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_IMPORT_BALANCE_PREPAY);
                    ord.Up = ord_up;
                    ord.SortOrder = 20;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimPayTypeCategoryValueLocate(ord_up_category_value, DimPayTypeSingleValueGet(ord_up_category_value, ReportOrderPlanPayTypeType.PREPAYMENT, OrdinateType.CF_IMPORT_BALANCE_PREPAY));
                    return ord;
                case OrdinateType.CF_IMPORT_BALANCE_POSTPAY:
                    ord = new Ordinate(this, MdfAxisOrdinateValueType.MODEL, OrdinateType.CF_IMPORT_BALANCE_POSTPAY);
                    ord.Up = ord_up;
                    ord.SortOrder = 30;
                    ord.IsIntegrated = false;
                    ord.CategoryValue = DimPayTypeCategoryValueLocate(ord_up_category_value, DimPayTypeSingleValueGet(ord_up_category_value, ReportOrderPlanPayTypeType.POSTPAYMENT, OrdinateType.CF_IMPORT_BALANCE_POSTPAY));
                    return ord;
                default:
                    return null;
            }
        }
        
        protected ReportOrderPlanCategoryValue DimScenarioCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanScenario obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimScenario = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimFinrepCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanFinrep obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimFinrep = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimValueTypeCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanValueType obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimValueType = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanCategoryValue DimPayTypeCategoryValueLocate(ReportOrderPlanCategoryValue context, ReportOrderPlanPayType obj) {
            ReportOrderPlanCategoryValue value = new ReportOrderPlanCategoryValue(context);
            value.DimPayType = obj;
            value = Report.ReportCore.CategoryValues.Locate(value);
            return value;
        }
        
        protected ReportOrderPlanScenario DimScenarioSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanScenarioType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.FORECAST:
                    return Report.ReportCore.ConstScenario[model];
                case OrdinateType.IMPORT:
                    return Report.ReportCore.ConstScenario[model];
                default:
                    return null;
            }
        }
        protected ReportOrderPlanFinrep DimFinrepSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanFinrepType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.REPORT_CF:
                    return Report.ReportCore.ConstFinrep[model];
                case OrdinateType.REPORT_IE:
                    return Report.ReportCore.ConstFinrep[model];
                case OrdinateType.IMPORT_REPORT_CF:
                    return Report.ReportCore.ConstFinrep[model];
                case OrdinateType.IMPORT_REPORT_IE:
                    return Report.ReportCore.ConstFinrep[model];
                default:
                    return null;
            }
        }
        protected ReportOrderPlanValueType DimValueTypeSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanValueTypeType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.CF_FORECAST_BALANCE:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.IE_FORECAST_SUMMALL:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.CF_IMPORT_BALANCE:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.IE_IMPORT_SUMMALL:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.IE_IMPORT_COST:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.IE_FORECAST_BALANCE:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.IE_FORECAST_COST:
                    return Report.ReportCore.ConstValueType[model];
                case OrdinateType.IE_IMPORT_BALANCE:
                    return Report.ReportCore.ConstValueType[model];
                default:
                    return null;
            }
        }
        protected ReportOrderPlanPayType DimPayTypeSingleValueGet(ReportOrderPlanCategoryValue context,  ReportOrderPlanPayTypeType model, OrdinateType ord_type) {
            switch(ord_type) {
                case OrdinateType.CF_FORECAST_BALANCE_PREPAY:
                    return Report.ReportCore.ConstPayType[model];
                case OrdinateType.CF_FORECAST_BALANCE_POSTPAY:
                    return Report.ReportCore.ConstPayType[model];
                case OrdinateType.CF_IMPORT_BALANCE_PREPAY:
                    return Report.ReportCore.ConstPayType[model];
                case OrdinateType.CF_IMPORT_BALANCE_POSTPAY:
                    return Report.ReportCore.ConstPayType[model];
                default:
                    return null;
            }
        }
        
    }
    
    [Persistent("FmMdfTestReportOrderPlanDataPersIeBalance")]
    public partial class ReportOrderPlanDataPersIeBalance : MdfContainerObject {
        
        private ReportOrderPlanReport _Report;
        [Association]
        [Browsable(false)]
        public ReportOrderPlanReport Report {
            get { return _Report; }
            set {
                if (SetPropertyValue(ref _Report, value) && !IsLoading && value != null) {
                    Container = value;
                }
            }
        }
        
        [PersistentAlias(nameof(Report))]
        public ReportOrderPlanReport DimReport {
            get { return Report; }
            set { Report = value; }
        }
        
        private ReportOrderPlanPeriod _DimPeriod;
        public ReportOrderPlanPeriod DimPeriod {
            get { return _DimPeriod; }
            set { SetPropertyValue(ref _DimPeriod, value); }
        }
        
        private ReportOrderPlanFindeal _DimFindeal;
        public ReportOrderPlanFindeal DimFindeal {
            get { return _DimFindeal; }
            set { SetPropertyValue(ref _DimFindeal, value); }
        }
        
        private ReportOrderPlanValuta _DimValuta;
        public ReportOrderPlanValuta DimValuta {
            get { return _DimValuta; }
            set { SetPropertyValue(ref _DimValuta, value); }
        }
        
        private System.Decimal _IeForecastVat;
        public System.Decimal IeForecastVat {
            get { return _IeForecastVat; }
            set { SetPropertyValue(ref _IeForecastVat, value); }
        }
        
        private System.Decimal _IeForecastCount;
        public System.Decimal IeForecastCount {
            get { return _IeForecastCount; }
            set { SetPropertyValue(ref _IeForecastCount, value); }
        }
        
        private System.Decimal _IeForecastSummall;
        public System.Decimal IeForecastSummall {
            get { return _IeForecastSummall; }
            set { SetPropertyValue(ref _IeForecastSummall, value); }
        }
        
        private System.Decimal _IeForecastCost;
        public System.Decimal IeForecastCost {
            get { return _IeForecastCost; }
            set { SetPropertyValue(ref _IeForecastCost, value); }
        }
        
        private System.Decimal _IeForecastBalance;
        public System.Decimal IeForecastBalance {
            get { return _IeForecastBalance; }
            set { SetPropertyValue(ref _IeForecastBalance, value); }
        }
        
        private System.Decimal _IeForecastVatincost;
        public System.Decimal IeForecastVatincost {
            get { return _IeForecastVatincost; }
            set { SetPropertyValue(ref _IeForecastVatincost, value); }
        }
        
        private System.Decimal _IeForecastInsurance;
        public System.Decimal IeForecastInsurance {
            get { return _IeForecastInsurance; }
            set { SetPropertyValue(ref _IeForecastInsurance, value); }
        }
        
        private System.Decimal _IeForecastOverhead;
        public System.Decimal IeForecastOverhead {
            get { return _IeForecastOverhead; }
            set { SetPropertyValue(ref _IeForecastOverhead, value); }
        }
        
        private System.Decimal _IeForecastAdvance;
        public System.Decimal IeForecastAdvance {
            get { return _IeForecastAdvance; }
            set { SetPropertyValue(ref _IeForecastAdvance, value); }
        }
        
        public ReportOrderPlanDataPersIeBalance(Session session) : base(session) { }
        
    }
    
    [Persistent("FmMdfTestReportOrderPlanDataPersStandarts")]
    public partial class ReportOrderPlanDataPersStandarts : MdfContainerObject {
        
        private ReportOrderPlanReport _Report;
        [Association]
        [Browsable(false)]
        public ReportOrderPlanReport Report {
            get { return _Report; }
            set {
                if (SetPropertyValue(ref _Report, value) && !IsLoading && value != null) {
                    Container = value;
                }
            }
        }
        
        [PersistentAlias(nameof(Report))]
        public ReportOrderPlanReport DimReport {
            get { return Report; }
            set { Report = value; }
        }
        
        private ReportOrderPlanPeriod _DimPeriod;
        public ReportOrderPlanPeriod DimPeriod {
            get { return _DimPeriod; }
            set { SetPropertyValue(ref _DimPeriod, value); }
        }
        
        private ReportOrderPlanEntity _DimParty;
        public ReportOrderPlanEntity DimParty {
            get { return _DimParty; }
            set { SetPropertyValue(ref _DimParty, value); }
        }
        
        private System.Decimal _StdcStaffFot;
        public System.Decimal StdcStaffFot {
            get { return _StdcStaffFot; }
            set { SetPropertyValue(ref _StdcStaffFot, value); }
        }
        
        private System.Decimal _StdcStaffInsurance;
        public System.Decimal StdcStaffInsurance {
            get { return _StdcStaffInsurance; }
            set { SetPropertyValue(ref _StdcStaffInsurance, value); }
        }
        
        private System.Decimal _StdcStaffOverhead;
        public System.Decimal StdcStaffOverhead {
            get { return _StdcStaffOverhead; }
            set { SetPropertyValue(ref _StdcStaffOverhead, value); }
        }
        
        private System.Decimal _StdcExchangeFromRub;
        public System.Decimal StdcExchangeFromRub {
            get { return _StdcExchangeFromRub; }
            set { SetPropertyValue(ref _StdcExchangeFromRub, value); }
        }
        
        private System.Decimal _StdcExchangeFromEur;
        public System.Decimal StdcExchangeFromEur {
            get { return _StdcExchangeFromEur; }
            set { SetPropertyValue(ref _StdcExchangeFromEur, value); }
        }
        
        private System.Decimal _StdcExchangeFromUsd;
        public System.Decimal StdcExchangeFromUsd {
            get { return _StdcExchangeFromUsd; }
            set { SetPropertyValue(ref _StdcExchangeFromUsd, value); }
        }
        
        private System.Decimal _StdcTaxVatNormal;
        public System.Decimal StdcTaxVatNormal {
            get { return _StdcTaxVatNormal; }
            set { SetPropertyValue(ref _StdcTaxVatNormal, value); }
        }
        
        private System.Decimal _StdcTaxVatExport;
        public System.Decimal StdcTaxVatExport {
            get { return _StdcTaxVatExport; }
            set { SetPropertyValue(ref _StdcTaxVatExport, value); }
        }
        
        public ReportOrderPlanDataPersStandarts(Session session) : base(session) { }
        
    }
    
    [Persistent("FmMdfTestReportOrderPlanDataPersCfBalance")]
    public partial class ReportOrderPlanDataPersCfBalance : MdfContainerObject {
        
        private ReportOrderPlanReport _Report;
        [Association]
        [Browsable(false)]
        public ReportOrderPlanReport Report {
            get { return _Report; }
            set {
                if (SetPropertyValue(ref _Report, value) && !IsLoading && value != null) {
                    Container = value;
                }
            }
        }
        
        [PersistentAlias(nameof(Report))]
        public ReportOrderPlanReport DimReport {
            get { return Report; }
            set { Report = value; }
        }
        
        private ReportOrderPlanPeriod _DimPeriod;
        public ReportOrderPlanPeriod DimPeriod {
            get { return _DimPeriod; }
            set { SetPropertyValue(ref _DimPeriod, value); }
        }
        
        private ReportOrderPlanFindeal _DimFindeal;
        public ReportOrderPlanFindeal DimFindeal {
            get { return _DimFindeal; }
            set { SetPropertyValue(ref _DimFindeal, value); }
        }
        
        private ReportOrderPlanValuta _DimValuta;
        public ReportOrderPlanValuta DimValuta {
            get { return _DimValuta; }
            set { SetPropertyValue(ref _DimValuta, value); }
        }
        
        private System.Decimal _CfForecastPayment;
        public System.Decimal CfForecastPayment {
            get { return _CfForecastPayment; }
            set { SetPropertyValue(ref _CfForecastPayment, value); }
        }
        
        private System.Decimal _CfForecastPrepayment;
        public System.Decimal CfForecastPrepayment {
            get { return _CfForecastPrepayment; }
            set { SetPropertyValue(ref _CfForecastPrepayment, value); }
        }
        
        private System.Decimal _CfForecastPostpayment;
        public System.Decimal CfForecastPostpayment {
            get { return _CfForecastPostpayment; }
            set { SetPropertyValue(ref _CfForecastPostpayment, value); }
        }
        
        public ReportOrderPlanDataPersCfBalance(Session session) : base(session) { }
        
    }
    
    [Persistent("FmMdfTestReportOrderPlanDataPersCheck")]
    public partial class ReportOrderPlanDataPersCheck : MdfContainerObject {
        
        private ReportOrderPlanReport _Report;
        [Association]
        [Browsable(false)]
        public ReportOrderPlanReport Report {
            get { return _Report; }
            set {
                if (SetPropertyValue(ref _Report, value) && !IsLoading && value != null) {
                    Container = value;
                }
            }
        }
        
        [PersistentAlias(nameof(Report))]
        public ReportOrderPlanReport DimReport {
            get { return Report; }
            set { Report = value; }
        }
        
        private ReportOrderPlanPeriod _DimPeriod;
        public ReportOrderPlanPeriod DimPeriod {
            get { return _DimPeriod; }
            set { SetPropertyValue(ref _DimPeriod, value); }
        }
        
        private ReportOrderPlanFindeal _DimFindeal;
        public ReportOrderPlanFindeal DimFindeal {
            get { return _DimFindeal; }
            set { SetPropertyValue(ref _DimFindeal, value); }
        }
        
        private ReportOrderPlanValuta _DimValuta;
        public ReportOrderPlanValuta DimValuta {
            get { return _DimValuta; }
            set { SetPropertyValue(ref _DimValuta, value); }
        }
        
        private System.Decimal _IeForecastSummall;
        public System.Decimal IeForecastSummall {
            get { return _IeForecastSummall; }
            set { SetPropertyValue(ref _IeForecastSummall, value); }
        }
        
        private System.Decimal _IeImportSummall;
        public System.Decimal IeImportSummall {
            get { return _IeImportSummall; }
            set { SetPropertyValue(ref _IeImportSummall, value); }
        }
        
        private System.Decimal _CfForecastBalanceAll;
        public System.Decimal CfForecastBalanceAll {
            get { return _CfForecastBalanceAll; }
            set { SetPropertyValue(ref _CfForecastBalanceAll, value); }
        }
        
        private System.Decimal _IeImportCost;
        public System.Decimal IeImportCost {
            get { return _IeImportCost; }
            set { SetPropertyValue(ref _IeImportCost, value); }
        }
        
        private System.Decimal _CfImportBalanceAll;
        public System.Decimal CfImportBalanceAll {
            get { return _CfImportBalanceAll; }
            set { SetPropertyValue(ref _CfImportBalanceAll, value); }
        }
        
        private System.Decimal _IeForecastBalance;
        public System.Decimal IeForecastBalance {
            get { return _IeForecastBalance; }
            set { SetPropertyValue(ref _IeForecastBalance, value); }
        }
        
        private System.Decimal _IeForecastCost;
        public System.Decimal IeForecastCost {
            get { return _IeForecastCost; }
            set { SetPropertyValue(ref _IeForecastCost, value); }
        }
        
        private System.Decimal _CfForecastBalancePrepay;
        public System.Decimal CfForecastBalancePrepay {
            get { return _CfForecastBalancePrepay; }
            set { SetPropertyValue(ref _CfForecastBalancePrepay, value); }
        }
        
        private System.Decimal _CfForecastBalancePostpay;
        public System.Decimal CfForecastBalancePostpay {
            get { return _CfForecastBalancePostpay; }
            set { SetPropertyValue(ref _CfForecastBalancePostpay, value); }
        }
        
        private System.Decimal _IeImportBalance;
        public System.Decimal IeImportBalance {
            get { return _IeImportBalance; }
            set { SetPropertyValue(ref _IeImportBalance, value); }
        }
        
        private System.Decimal _CfImportBalancePrepay;
        public System.Decimal CfImportBalancePrepay {
            get { return _CfImportBalancePrepay; }
            set { SetPropertyValue(ref _CfImportBalancePrepay, value); }
        }
        
        private System.Decimal _CfImportBalancePostpay;
        public System.Decimal CfImportBalancePostpay {
            get { return _CfImportBalancePostpay; }
            set { SetPropertyValue(ref _CfImportBalancePostpay, value); }
        }
        
        public ReportOrderPlanDataPersCheck(Session session) : base(session) { }
        
    }
    
    [MapInheritance(MapInheritanceType.OwnTable)]
    [Persistent("FmMdfTestReportOrderPlanForm")]
    public abstract partial class ReportOrderPlanForm: MdfReportFormExcel {
    
        private ReportOrderPlanReport _Report;
        [Association]
        public ReportOrderPlanReport Report {
            get { return _Report; }
            set { SetPropertyValue(ref _Report, value); }
        }
        
        private ReportOrderPlanCalcVariant _CalcVariant;
        public ReportOrderPlanCalcVariant CalcVariant {
            get { return _CalcVariant; }
            set { SetPropertyValue(ref _CalcVariant, value); }
        }
        
        protected ReportOrderPlanForm(Session session): base(session) { }
    
    }
    
    public abstract class ReportOrderPlanFormSheet<Tax, Tox, Tay, Toy, Tst, Tsc> : MdfReportFormExcelSheet<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint, Tax, Tox, Tay, Toy, Tsc>
        where Tax : MdfAxis<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>
        where Tox : MdfAxis<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>.MdfAxisOrdinate
        where Tay : MdfAxis<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>
        where Toy : MdfAxis<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>.MdfAxisOrdinate
        where Tst : ReportOrderPlanFormSheet<Tax, Tox, Tay, Toy, Tst, Tsc>
        where Tsc : ReportOrderPlanFormSheetCell<Tax, Tox, Tay, Toy, Tst, Tsc> {
        
        public new ReportOrderPlanForm Form {
            get { return (ReportOrderPlanForm)base.Form; }
        }
        
        public ReportOrderPlanFormSheet(ReportOrderPlanTable table, ReportOrderPlanForm form, Int32 index) : base(form, index) {
            Table = table;
        }
    
    }
    
    public abstract class ReportOrderPlanFormSheetCell<Tax, Tox, Tay, Toy, Tst, Tsc> : MdfReportFormExcelSheetCell<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>
        where Tax : MdfAxis<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>
        where Tox : MdfAxis<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>.MdfAxisOrdinate
        where Tay : MdfAxis<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>
        where Toy : MdfAxis<ReportOrderPlanReport, ReportOrderPlanCategoryValue, ReportOrderPlanTable, ReportOrderPlanTableCell, ReportOrderPlanDataPoint>.MdfAxisOrdinate
        where Tst : ReportOrderPlanFormSheet<Tax, Tox, Tay, Toy, Tst, Tsc>
        where Tsc : ReportOrderPlanFormSheetCell<Tax, Tox, Tay, Toy, Tst, Tsc> {
        
        private Tst sheet;
        private MdfReportFormExcelSheetColumn column;
        private MdfReportFormExcelSheetRow row;
        
        protected ReportOrderPlanFormSheetCell(Tst sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row) : base(sheet, column, row) {
            this.sheet = sheet;
            this.column = column;
            this.row = row;
        }
    }
    
    [Persistent("FmMdfTestReportOrderPlanFormWork")]
    public partial class ReportOrderPlanFormWork: ReportOrderPlanForm {
        
        private ReportOrderPlanFormWorkSheetIe _Ie;
        public ReportOrderPlanFormWorkSheetIe Ie { get { return _Ie; } }
        
        private ReportOrderPlanFormWorkSheetCf _Cf;
        public ReportOrderPlanFormWorkSheetCf Cf { get { return _Cf; } }
        
        private ReportOrderPlanFormWorkSheetDeal _Deal;
        public ReportOrderPlanFormWorkSheetDeal Deal { get { return _Deal; } }
        
        protected override void RenderCore() {
            
            Report.ReportCore.TablePersIeBalance.Render(Report, CalcVariant);
            Report.ReportCore.TablePersStandarts.Render(Report, CalcVariant);
            Report.ReportCore.TableTableCalcImport.Render(Report, CalcVariant);
            Report.ReportCore.TablePersCfBalance.Render(Report, CalcVariant);
            Report.ReportCore.TablePersCheck.Render(Report, CalcVariant);
            Report.ReportCore.TableTableIe.Render(Report, CalcVariant);
            Report.ReportCore.TableTableCf.Render(Report, CalcVariant);
            Report.ReportCore.TableTableBayDeal.Render(Report, CalcVariant);
            
            Int32 index = 0;
            _Sheets.Clear();
            
            _Ie = new ReportOrderPlanFormWorkSheetIe(this, Report.ReportCore.TableTableIe, index++);
            Ie.AxisX = Report.ReportCore.AxisAxisPeriod;
            Ie.AxisXIndex = 0;
            Ie.AxisY = Report.ReportCore.AxisAxisIeArticle;
            Ie.AxisYIndex = 1;
            Ie.OffsetCol = 2;
            Ie.OffsetRow = 2;
            Ie.Code = "";
            Ie.Render();
            _Sheets.Add(Ie);
            
            _Cf = new ReportOrderPlanFormWorkSheetCf(this, Report.ReportCore.TableTableCf, index++);
            Cf.AxisX = Report.ReportCore.AxisAxisPeriod;
            Cf.AxisXIndex = 0;
            Cf.AxisY = Report.ReportCore.AxisAxisCfArticle;
            Cf.AxisYIndex = 1;
            Cf.OffsetCol = 2;
            Cf.OffsetRow = 2;
            Cf.Code = "";
            Cf.Render();
            _Sheets.Add(Cf);
            
            _Deal = new ReportOrderPlanFormWorkSheetDeal(this, Report.ReportCore.TableTableBayDeal, index++);
            Deal.AxisX = Report.ReportCore.AxisAxisPeriod;
            Deal.AxisXIndex = 0;
            Deal.AxisY = Report.ReportCore.AxisAxisFindeal;
            Deal.AxisYIndex = 1;
            Deal.OffsetCol = 2;
            Deal.OffsetRow = 2;
            Deal.Code = "";
            Deal.Render();
            _Sheets.Add(Deal);
        }
        
        public ReportOrderPlanFormWork(Session session): base(session) { }
    
    }
    
    public class ReportOrderPlanFormWorkSheetIe : ReportOrderPlanFormSheet <ReportOrderPlanAxisPeriod, ReportOrderPlanAxisPeriod.Ordinate, ReportOrderPlanAxisIeArticle, ReportOrderPlanAxisIeArticle.Ordinate, ReportOrderPlanFormWorkSheetIe, ReportOrderPlanFormWorkSheetIeCell> {
        
        public new ReportOrderPlanFormWork Form {
            get { return (ReportOrderPlanFormWork)base.Form; }
        }
        
        public ReportOrderPlanFormWorkSheetIe(ReportOrderPlanFormWork form, ReportOrderPlanTable table, Int32 index) : base(table, form,  index) {
        }
        
        protected override ReportOrderPlanFormWorkSheetIeCell ReportCellCreate(MdfReportFormExcelSheetRow row, MdfReportFormExcelSheetColumn column) {
            return new ReportOrderPlanFormWorkSheetIeCellReport(this, column, row);
        }
        
        protected override ReportOrderPlanFormWorkSheetIeCell OrdinateXCellCreate(MdfReportFormExcelSheetRow row, MdfReportFormExcelSheetColumn column, ReportOrderPlanAxisPeriod.Ordinate ordinate) {
            return new ReportOrderPlanFormWorkSheetIeCellOrdinateX(this, column, row, ordinate);
        }
        
        protected override ReportOrderPlanFormWorkSheetIeCell OrdinateYCellCreate(MdfReportFormExcelSheetRow row, MdfReportFormExcelSheetColumn column, ReportOrderPlanAxisIeArticle.Ordinate ordinate) {
            return new ReportOrderPlanFormWorkSheetIeCellOrdinateY(this, column, row, ordinate);
        }
        
        protected override ReportOrderPlanFormWorkSheetIeCell TableCellCreate(MdfReportFormExcelSheetRow row, MdfReportFormExcelSheetColumn column, ReportOrderPlanTableCell table_cell) {
            return new ReportOrderPlanFormWorkSheetIeCellData(this, column, row, table_cell);
        }
        
    }
    
    public abstract class ReportOrderPlanFormWorkSheetIeCell : ReportOrderPlanFormSheetCell<ReportOrderPlanAxisPeriod, ReportOrderPlanAxisPeriod.Ordinate, ReportOrderPlanAxisIeArticle, ReportOrderPlanAxisIeArticle.Ordinate, ReportOrderPlanFormWorkSheetIe, ReportOrderPlanFormWorkSheetIeCell> {
        
        public new ReportOrderPlanFormWorkSheetIe Sheet {
            get { return (ReportOrderPlanFormWorkSheetIe)base.Sheet; }
        }
        
        public ReportOrderPlanFormWorkSheetIeCell(ReportOrderPlanFormWorkSheetIe sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row) : base(sheet, column, row) {
        }
        
    }
    
    public partial class ReportOrderPlanFormWorkSheetIeCellReport : ReportOrderPlanFormWorkSheetIeCell {
        
        public override object Value {
            get { return null; }
            set { }
        }
        
        public override Object CellData {
            get { return Sheet.Form.Report; }
        }
        
        public override bool IsEditable {
            get { return false; }
        }
        
        public ReportOrderPlanFormWorkSheetIeCellReport(ReportOrderPlanFormWorkSheetIe sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row) : base(sheet, column, row) { }
        
    }
    
    public partial class ReportOrderPlanFormWorkSheetIeCellData : ReportOrderPlanFormWorkSheetIeCell {
        
        private readonly ReportOrderPlanTableCell _TableCell;
        public ReportOrderPlanTableCell TableCell {
            get { return _TableCell; }
        }
        
        public override object Value {
            get { return TableCell.DataPoint.Value; }
            set {
                if (TableCell.DataPoint != null)
                    TableCell.DataPoint.Value = value;
            }
        }
        
        public override Object CellData {
            get { return TableCell?.DataPoint; }
        }
        
        public override bool IsEditable {
            get { return TableCell.DataPoint.Calc == null; }
        }
        
        public ReportOrderPlanFormWorkSheetIeCellData(ReportOrderPlanFormWorkSheetIe sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row, ReportOrderPlanTableCell table_cell) : base(sheet, column, row) {
            _TableCell = table_cell;
        }
        
    }
    
    public partial class ReportOrderPlanFormWorkSheetIeCellOrdinateX : ReportOrderPlanFormWorkSheetIeCell {
        
        private readonly ReportOrderPlanAxisPeriod.Ordinate _Ordinate;
        public ReportOrderPlanAxisPeriod.Ordinate Ordinate {
            get { return _Ordinate; }
        }
        
        public override Object CellData {
            get { return Ordinate?.CategoryValue; }
        }
        
        public ReportOrderPlanFormWorkSheetIeCellOrdinateX(ReportOrderPlanFormWorkSheetIe sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row, ReportOrderPlanAxisPeriod.Ordinate ordinate) : base(sheet, column, row) {
            _Ordinate = ordinate;
        }
        
    }
    
    public partial class ReportOrderPlanFormWorkSheetIeCellOrdinateY : ReportOrderPlanFormWorkSheetIeCell {
        
        private readonly ReportOrderPlanAxisIeArticle.Ordinate _Ordinate;
        public ReportOrderPlanAxisIeArticle.Ordinate Ordinate {
            get { return _Ordinate; }
        }
        
        public override Object CellData {
            get { return Ordinate?.CategoryValue; }
        }
        
        public ReportOrderPlanFormWorkSheetIeCellOrdinateY(ReportOrderPlanFormWorkSheetIe sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row, ReportOrderPlanAxisIeArticle.Ordinate ordinate) : base(sheet, column, row) {
            _Ordinate = ordinate;
        }
        
    }
    
    public class ReportOrderPlanFormWorkSheetCf : ReportOrderPlanFormSheet <ReportOrderPlanAxisPeriod, ReportOrderPlanAxisPeriod.Ordinate, ReportOrderPlanAxisCfArticle, ReportOrderPlanAxisCfArticle.Ordinate, ReportOrderPlanFormWorkSheetCf, ReportOrderPlanFormWorkSheetCfCell> {
        
        public new ReportOrderPlanFormWork Form {
            get { return (ReportOrderPlanFormWork)base.Form; }
        }
        
        public ReportOrderPlanFormWorkSheetCf(ReportOrderPlanFormWork form, ReportOrderPlanTable table, Int32 index) : base(table, form,  index) {
        }
        
        protected override ReportOrderPlanFormWorkSheetCfCell ReportCellCreate(MdfReportFormExcelSheetRow row, MdfReportFormExcelSheetColumn column) {
            return new ReportOrderPlanFormWorkSheetCfCellReport(this, column, row);
        }
        
        protected override ReportOrderPlanFormWorkSheetCfCell OrdinateXCellCreate(MdfReportFormExcelSheetRow row, MdfReportFormExcelSheetColumn column, ReportOrderPlanAxisPeriod.Ordinate ordinate) {
            return new ReportOrderPlanFormWorkSheetCfCellOrdinateX(this, column, row, ordinate);
        }
        
        protected override ReportOrderPlanFormWorkSheetCfCell OrdinateYCellCreate(MdfReportFormExcelSheetRow row, MdfReportFormExcelSheetColumn column, ReportOrderPlanAxisCfArticle.Ordinate ordinate) {
            return new ReportOrderPlanFormWorkSheetCfCellOrdinateY(this, column, row, ordinate);
        }
        
        protected override ReportOrderPlanFormWorkSheetCfCell TableCellCreate(MdfReportFormExcelSheetRow row, MdfReportFormExcelSheetColumn column, ReportOrderPlanTableCell table_cell) {
            return new ReportOrderPlanFormWorkSheetCfCellData(this, column, row, table_cell);
        }
        
    }
    
    public abstract class ReportOrderPlanFormWorkSheetCfCell : ReportOrderPlanFormSheetCell<ReportOrderPlanAxisPeriod, ReportOrderPlanAxisPeriod.Ordinate, ReportOrderPlanAxisCfArticle, ReportOrderPlanAxisCfArticle.Ordinate, ReportOrderPlanFormWorkSheetCf, ReportOrderPlanFormWorkSheetCfCell> {
        
        public new ReportOrderPlanFormWorkSheetCf Sheet {
            get { return (ReportOrderPlanFormWorkSheetCf)base.Sheet; }
        }
        
        public ReportOrderPlanFormWorkSheetCfCell(ReportOrderPlanFormWorkSheetCf sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row) : base(sheet, column, row) {
        }
        
    }
    
    public partial class ReportOrderPlanFormWorkSheetCfCellReport : ReportOrderPlanFormWorkSheetCfCell {
        
        public override object Value {
            get { return null; }
            set { }
        }
        
        public override Object CellData {
            get { return Sheet.Form.Report; }
        }
        
        public override bool IsEditable {
            get { return false; }
        }
        
        public ReportOrderPlanFormWorkSheetCfCellReport(ReportOrderPlanFormWorkSheetCf sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row) : base(sheet, column, row) { }
        
    }
    
    public partial class ReportOrderPlanFormWorkSheetCfCellData : ReportOrderPlanFormWorkSheetCfCell {
        
        private readonly ReportOrderPlanTableCell _TableCell;
        public ReportOrderPlanTableCell TableCell {
            get { return _TableCell; }
        }
        
        public override object Value {
            get { return TableCell.DataPoint.Value; }
            set {
                if (TableCell.DataPoint != null)
                    TableCell.DataPoint.Value = value;
            }
        }
        
        public override Object CellData {
            get { return TableCell?.DataPoint; }
        }
        
        public override bool IsEditable {
            get { return TableCell.DataPoint.Calc == null; }
        }
        
        public ReportOrderPlanFormWorkSheetCfCellData(ReportOrderPlanFormWorkSheetCf sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row, ReportOrderPlanTableCell table_cell) : base(sheet, column, row) {
            _TableCell = table_cell;
        }
        
    }
    
    public partial class ReportOrderPlanFormWorkSheetCfCellOrdinateX : ReportOrderPlanFormWorkSheetCfCell {
        
        private readonly ReportOrderPlanAxisPeriod.Ordinate _Ordinate;
        public ReportOrderPlanAxisPeriod.Ordinate Ordinate {
            get { return _Ordinate; }
        }
        
        public override Object CellData {
            get { return Ordinate?.CategoryValue; }
        }
        
        public ReportOrderPlanFormWorkSheetCfCellOrdinateX(ReportOrderPlanFormWorkSheetCf sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row, ReportOrderPlanAxisPeriod.Ordinate ordinate) : base(sheet, column, row) {
            _Ordinate = ordinate;
        }
        
    }
    
    public partial class ReportOrderPlanFormWorkSheetCfCellOrdinateY : ReportOrderPlanFormWorkSheetCfCell {
        
        private readonly ReportOrderPlanAxisCfArticle.Ordinate _Ordinate;
        public ReportOrderPlanAxisCfArticle.Ordinate Ordinate {
            get { return _Ordinate; }
        }
        
        public override Object CellData {
            get { return Ordinate?.CategoryValue; }
        }
        
        public ReportOrderPlanFormWorkSheetCfCellOrdinateY(ReportOrderPlanFormWorkSheetCf sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row, ReportOrderPlanAxisCfArticle.Ordinate ordinate) : base(sheet, column, row) {
            _Ordinate = ordinate;
        }
        
    }
    
    public class ReportOrderPlanFormWorkSheetDeal : ReportOrderPlanFormSheet <ReportOrderPlanAxisPeriod, ReportOrderPlanAxisPeriod.Ordinate, ReportOrderPlanAxisFindeal, ReportOrderPlanAxisFindeal.Ordinate, ReportOrderPlanFormWorkSheetDeal, ReportOrderPlanFormWorkSheetDealCell> {
        
        public new ReportOrderPlanFormWork Form {
            get { return (ReportOrderPlanFormWork)base.Form; }
        }
        
        public ReportOrderPlanFormWorkSheetDeal(ReportOrderPlanFormWork form, ReportOrderPlanTable table, Int32 index) : base(table, form,  index) {
        }
        
        protected override ReportOrderPlanFormWorkSheetDealCell ReportCellCreate(MdfReportFormExcelSheetRow row, MdfReportFormExcelSheetColumn column) {
            return new ReportOrderPlanFormWorkSheetDealCellReport(this, column, row);
        }
        
        protected override ReportOrderPlanFormWorkSheetDealCell OrdinateXCellCreate(MdfReportFormExcelSheetRow row, MdfReportFormExcelSheetColumn column, ReportOrderPlanAxisPeriod.Ordinate ordinate) {
            return new ReportOrderPlanFormWorkSheetDealCellOrdinateX(this, column, row, ordinate);
        }
        
        protected override ReportOrderPlanFormWorkSheetDealCell OrdinateYCellCreate(MdfReportFormExcelSheetRow row, MdfReportFormExcelSheetColumn column, ReportOrderPlanAxisFindeal.Ordinate ordinate) {
            return new ReportOrderPlanFormWorkSheetDealCellOrdinateY(this, column, row, ordinate);
        }
        
        protected override ReportOrderPlanFormWorkSheetDealCell TableCellCreate(MdfReportFormExcelSheetRow row, MdfReportFormExcelSheetColumn column, ReportOrderPlanTableCell table_cell) {
            return new ReportOrderPlanFormWorkSheetDealCellData(this, column, row, table_cell);
        }
        
    }
    
    public abstract class ReportOrderPlanFormWorkSheetDealCell : ReportOrderPlanFormSheetCell<ReportOrderPlanAxisPeriod, ReportOrderPlanAxisPeriod.Ordinate, ReportOrderPlanAxisFindeal, ReportOrderPlanAxisFindeal.Ordinate, ReportOrderPlanFormWorkSheetDeal, ReportOrderPlanFormWorkSheetDealCell> {
        
        public new ReportOrderPlanFormWorkSheetDeal Sheet {
            get { return (ReportOrderPlanFormWorkSheetDeal)base.Sheet; }
        }
        
        public ReportOrderPlanFormWorkSheetDealCell(ReportOrderPlanFormWorkSheetDeal sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row) : base(sheet, column, row) {
        }
        
    }
    
    public partial class ReportOrderPlanFormWorkSheetDealCellReport : ReportOrderPlanFormWorkSheetDealCell {
        
        public override object Value {
            get { return null; }
            set { }
        }
        
        public override Object CellData {
            get { return Sheet.Form.Report; }
        }
        
        public override bool IsEditable {
            get { return false; }
        }
        
        public ReportOrderPlanFormWorkSheetDealCellReport(ReportOrderPlanFormWorkSheetDeal sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row) : base(sheet, column, row) { }
        
    }
    
    public partial class ReportOrderPlanFormWorkSheetDealCellData : ReportOrderPlanFormWorkSheetDealCell {
        
        private readonly ReportOrderPlanTableCell _TableCell;
        public ReportOrderPlanTableCell TableCell {
            get { return _TableCell; }
        }
        
        public override object Value {
            get { return TableCell.DataPoint.Value; }
            set {
                if (TableCell.DataPoint != null)
                    TableCell.DataPoint.Value = value;
            }
        }
        
        public override Object CellData {
            get { return TableCell?.DataPoint; }
        }
        
        public override bool IsEditable {
            get { return TableCell.DataPoint.Calc == null; }
        }
        
        public ReportOrderPlanFormWorkSheetDealCellData(ReportOrderPlanFormWorkSheetDeal sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row, ReportOrderPlanTableCell table_cell) : base(sheet, column, row) {
            _TableCell = table_cell;
        }
        
    }
    
    public partial class ReportOrderPlanFormWorkSheetDealCellOrdinateX : ReportOrderPlanFormWorkSheetDealCell {
        
        private readonly ReportOrderPlanAxisPeriod.Ordinate _Ordinate;
        public ReportOrderPlanAxisPeriod.Ordinate Ordinate {
            get { return _Ordinate; }
        }
        
        public override Object CellData {
            get { return Ordinate?.CategoryValue; }
        }
        
        public ReportOrderPlanFormWorkSheetDealCellOrdinateX(ReportOrderPlanFormWorkSheetDeal sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row, ReportOrderPlanAxisPeriod.Ordinate ordinate) : base(sheet, column, row) {
            _Ordinate = ordinate;
        }
        
    }
    
    public partial class ReportOrderPlanFormWorkSheetDealCellOrdinateY : ReportOrderPlanFormWorkSheetDealCell {
        
        private readonly ReportOrderPlanAxisFindeal.Ordinate _Ordinate;
        public ReportOrderPlanAxisFindeal.Ordinate Ordinate {
            get { return _Ordinate; }
        }
        
        public override Object CellData {
            get { return Ordinate?.CategoryValue; }
        }
        
        public ReportOrderPlanFormWorkSheetDealCellOrdinateY(ReportOrderPlanFormWorkSheetDeal sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row, ReportOrderPlanAxisFindeal.Ordinate ordinate) : base(sheet, column, row) {
            _Ordinate = ordinate;
        }
        
    }
    
    [Persistent("FmMdfTestReportOrderPlanFormImport")]
    public partial class ReportOrderPlanFormImport: ReportOrderPlanForm {
        
        private ReportOrderPlanFormImportSheetIe _Ie;
        public ReportOrderPlanFormImportSheetIe Ie { get { return _Ie; } }
        
        private ReportOrderPlanFormImportSheetCf _Cf;
        public ReportOrderPlanFormImportSheetCf Cf { get { return _Cf; } }
        
        private ReportOrderPlanFormImportSheetDeal _Deal;
        public ReportOrderPlanFormImportSheetDeal Deal { get { return _Deal; } }
        
        private ReportOrderPlanFormImportSheetGoods _Goods;
        public ReportOrderPlanFormImportSheetGoods Goods { get { return _Goods; } }
        
        private ReportOrderPlanFormImportSheetStandarts _Standarts;
        public ReportOrderPlanFormImportSheetStandarts Standarts { get { return _Standarts; } }
        
        private ReportOrderPlanFormImportSheetCalc _Calc;
        public ReportOrderPlanFormImportSheetCalc Calc { get { return _Calc; } }
        
        protected override void RenderCore() {
            
            Report.ReportCore.TablePersIeBalance.Render(Report, CalcVariant);
            Report.ReportCore.TablePersStandarts.Render(Report, CalcVariant);
            Report.ReportCore.TableTableCalcImport.Render(Report, CalcVariant);
            Report.ReportCore.TablePersCfBalance.Render(Report, CalcVariant);
            Report.ReportCore.TablePersCheck.Render(Report, CalcVariant);
            Report.ReportCore.TableTableIeImport.Render(Report, CalcVariant);
            Report.ReportCore.TableTableCfImport.Render(Report, CalcVariant);
            Report.ReportCore.TableTableBayDealImport.Render(Report, CalcVariant);
            Report.ReportCore.TableTableGoodsImport.Render(Report, CalcVariant);
            Report.ReportCore.TableTableStandartsImport.Render(Report, CalcVariant);
            
            Int32 index = 0;
            _Sheets.Clear();
            
            _Ie = new ReportOrderPlanFormImportSheetIe(this, Report.ReportCore.TableTableIeImport, index++);
            Ie.AxisX = Report.ReportCore.AxisAxisPeriodImport;
            Ie.AxisXIndex = 0;
            Ie.AxisY = Report.ReportCore.AxisAxisIeArticleImport;
            Ie.AxisYIndex = 1;
            Ie.OffsetCol = 2;
            Ie.OffsetRow = 2;
            Ie.Code = "IE";
            Ie.Render();
            _Sheets.Add(Ie);
            
            _Cf = new ReportOrderPlanFormImportSheetCf(this, Report.ReportCore.TableTableCfImport, index++);
            Cf.AxisX = Report.ReportCore.AxisAxisPeriodImport;
            Cf.AxisXIndex = 0;
            Cf.AxisY = Report.ReportCore.AxisAxisCfArticleImport;
            Cf.AxisYIndex = 1;
            Cf.OffsetCol = 2;
            Cf.OffsetRow = 2;
            Cf.Code = "CF";
            Cf.Render();
            _Sheets.Add(Cf);
            
            _Deal = new ReportOrderPlanFormImportSheetDeal(this, Report.ReportCore.TableTableBayDealImport, index++);
            Deal.AxisX = Report.ReportCore.AxisAxisPeriodImport;
            Deal.AxisXIndex = 0;
            Deal.AxisY = Report.ReportCore.AxisAxisFindeal;
            Deal.AxisYIndex = 1;
            Deal.OffsetCol = 2;
            Deal.OffsetRow = 2;
            Deal.Code = "DEAL";
            Deal.Render();
            _Sheets.Add(Deal);
            
            _Goods = new ReportOrderPlanFormImportSheetGoods(this, Report.ReportCore.TableTableGoodsImport, index++);
            Goods.AxisX = Report.ReportCore.AxisAxisPeriodImport;
            Goods.AxisXIndex = 0;
            Goods.AxisY = Report.ReportCore.AxisAxisGoodsImport;
            Goods.AxisYIndex = 1;
            Goods.OffsetCol = 0;
            Goods.OffsetRow = 2;
            Goods.Code = "GOODS";
            Goods.Render();
            _Sheets.Add(Goods);
            
            _Standarts = new ReportOrderPlanFormImportSheetStandarts(this, Report.ReportCore.TableTableStandartsImport, index++);
            Standarts.AxisX = Report.ReportCore.AxisAxisPeriodImport;
            Standarts.AxisXIndex = 0;
            Standarts.AxisY = Report.ReportCore.AxisAxisStandartImport;
            Standarts.AxisYIndex = 1;
            Standarts.OffsetCol = 2;
            Standarts.OffsetRow = 2;
            Standarts.Code = "";
            Standarts.Render();
            _Sheets.Add(Standarts);
            
            _Calc = new ReportOrderPlanFormImportSheetCalc(this, Report.ReportCore.TableTableCalcImport, index++);
            Calc.AxisX = Report.ReportCore.AxisAxisCalcImportCol;
            Calc.AxisXIndex = 0;
            Calc.AxisY = Report.ReportCore.AxisAxisCalcImportRow;
            Calc.AxisYIndex = 1;
            Calc.OffsetCol = 0;
            Calc.OffsetRow = 0;
            Calc.Code = "CALC";
            Calc.Render();
            _Sheets.Add(Calc);
        }
        
        public ReportOrderPlanFormImport(Session session): base(session) { }
    
    }
    
    public class ReportOrderPlanFormImportSheetIe : ReportOrderPlanFormSheet <ReportOrderPlanAxisPeriodImport, ReportOrderPlanAxisPeriodImport.Ordinate, ReportOrderPlanAxisIeArticleImport, ReportOrderPlanAxisIeArticleImport.Ordinate, ReportOrderPlanFormImportSheetIe, ReportOrderPlanFormImportSheetIeCell> {
        
        public new ReportOrderPlanFormImport Form {
            get { return (ReportOrderPlanFormImport)base.Form; }
        }
        
        public ReportOrderPlanFormImportSheetIe(ReportOrderPlanFormImport form, ReportOrderPlanTable table, Int32 index) : base(table, form,  index) {
        }
        
        protected override ReportOrderPlanFormImportSheetIeCell ReportCellCreate(MdfReportFormExcelSheetRow row, MdfReportFormExcelSheetColumn column) {
            return new ReportOrderPlanFormImportSheetIeCellReport(this, column, row);
        }
        
        protected override ReportOrderPlanFormImportSheetIeCell OrdinateXCellCreate(MdfReportFormExcelSheetRow row, MdfReportFormExcelSheetColumn column, ReportOrderPlanAxisPeriodImport.Ordinate ordinate) {
            return new ReportOrderPlanFormImportSheetIeCellOrdinateX(this, column, row, ordinate);
        }
        
        protected override ReportOrderPlanFormImportSheetIeCell OrdinateYCellCreate(MdfReportFormExcelSheetRow row, MdfReportFormExcelSheetColumn column, ReportOrderPlanAxisIeArticleImport.Ordinate ordinate) {
            return new ReportOrderPlanFormImportSheetIeCellOrdinateY(this, column, row, ordinate);
        }
        
        protected override ReportOrderPlanFormImportSheetIeCell TableCellCreate(MdfReportFormExcelSheetRow row, MdfReportFormExcelSheetColumn column, ReportOrderPlanTableCell table_cell) {
            return new ReportOrderPlanFormImportSheetIeCellData(this, column, row, table_cell);
        }
        
    }
    
    public abstract class ReportOrderPlanFormImportSheetIeCell : ReportOrderPlanFormSheetCell<ReportOrderPlanAxisPeriodImport, ReportOrderPlanAxisPeriodImport.Ordinate, ReportOrderPlanAxisIeArticleImport, ReportOrderPlanAxisIeArticleImport.Ordinate, ReportOrderPlanFormImportSheetIe, ReportOrderPlanFormImportSheetIeCell> {
        
        public new ReportOrderPlanFormImportSheetIe Sheet {
            get { return (ReportOrderPlanFormImportSheetIe)base.Sheet; }
        }
        
        public ReportOrderPlanFormImportSheetIeCell(ReportOrderPlanFormImportSheetIe sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row) : base(sheet, column, row) {
        }
        
    }
    
    public partial class ReportOrderPlanFormImportSheetIeCellReport : ReportOrderPlanFormImportSheetIeCell {
        
        public override object Value {
            get { return null; }
            set { }
        }
        
        public override Object CellData {
            get { return Sheet.Form.Report; }
        }
        
        public override bool IsEditable {
            get { return false; }
        }
        
        public ReportOrderPlanFormImportSheetIeCellReport(ReportOrderPlanFormImportSheetIe sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row) : base(sheet, column, row) { }
        
    }
    
    public partial class ReportOrderPlanFormImportSheetIeCellData : ReportOrderPlanFormImportSheetIeCell {
        
        private readonly ReportOrderPlanTableCell _TableCell;
        public ReportOrderPlanTableCell TableCell {
            get { return _TableCell; }
        }
        
        public override object Value {
            get { return TableCell.DataPoint.Value; }
            set {
                if (TableCell.DataPoint != null)
                    TableCell.DataPoint.Value = value;
            }
        }
        
        public override Object CellData {
            get { return TableCell?.DataPoint; }
        }
        
        public override bool IsEditable {
            get { return TableCell.DataPoint.Calc == null; }
        }
        
        public ReportOrderPlanFormImportSheetIeCellData(ReportOrderPlanFormImportSheetIe sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row, ReportOrderPlanTableCell table_cell) : base(sheet, column, row) {
            _TableCell = table_cell;
        }
        
    }
    
    public partial class ReportOrderPlanFormImportSheetIeCellOrdinateX : ReportOrderPlanFormImportSheetIeCell {
        
        private readonly ReportOrderPlanAxisPeriodImport.Ordinate _Ordinate;
        public ReportOrderPlanAxisPeriodImport.Ordinate Ordinate {
            get { return _Ordinate; }
        }
        
        public override Object CellData {
            get { return Ordinate?.CategoryValue; }
        }
        
        public ReportOrderPlanFormImportSheetIeCellOrdinateX(ReportOrderPlanFormImportSheetIe sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row, ReportOrderPlanAxisPeriodImport.Ordinate ordinate) : base(sheet, column, row) {
            _Ordinate = ordinate;
        }
        
    }
    
    public partial class ReportOrderPlanFormImportSheetIeCellOrdinateY : ReportOrderPlanFormImportSheetIeCell {
        
        private readonly ReportOrderPlanAxisIeArticleImport.Ordinate _Ordinate;
        public ReportOrderPlanAxisIeArticleImport.Ordinate Ordinate {
            get { return _Ordinate; }
        }
        
        public override Object CellData {
            get { return Ordinate?.CategoryValue; }
        }
        
        public ReportOrderPlanFormImportSheetIeCellOrdinateY(ReportOrderPlanFormImportSheetIe sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row, ReportOrderPlanAxisIeArticleImport.Ordinate ordinate) : base(sheet, column, row) {
            _Ordinate = ordinate;
        }
        
    }
    
    public class ReportOrderPlanFormImportSheetCf : ReportOrderPlanFormSheet <ReportOrderPlanAxisPeriodImport, ReportOrderPlanAxisPeriodImport.Ordinate, ReportOrderPlanAxisCfArticleImport, ReportOrderPlanAxisCfArticleImport.Ordinate, ReportOrderPlanFormImportSheetCf, ReportOrderPlanFormImportSheetCfCell> {
        
        public new ReportOrderPlanFormImport Form {
            get { return (ReportOrderPlanFormImport)base.Form; }
        }
        
        public ReportOrderPlanFormImportSheetCf(ReportOrderPlanFormImport form, ReportOrderPlanTable table, Int32 index) : base(table, form,  index) {
        }
        
        protected override ReportOrderPlanFormImportSheetCfCell ReportCellCreate(MdfReportFormExcelSheetRow row, MdfReportFormExcelSheetColumn column) {
            return new ReportOrderPlanFormImportSheetCfCellReport(this, column, row);
        }
        
        protected override ReportOrderPlanFormImportSheetCfCell OrdinateXCellCreate(MdfReportFormExcelSheetRow row, MdfReportFormExcelSheetColumn column, ReportOrderPlanAxisPeriodImport.Ordinate ordinate) {
            return new ReportOrderPlanFormImportSheetCfCellOrdinateX(this, column, row, ordinate);
        }
        
        protected override ReportOrderPlanFormImportSheetCfCell OrdinateYCellCreate(MdfReportFormExcelSheetRow row, MdfReportFormExcelSheetColumn column, ReportOrderPlanAxisCfArticleImport.Ordinate ordinate) {
            return new ReportOrderPlanFormImportSheetCfCellOrdinateY(this, column, row, ordinate);
        }
        
        protected override ReportOrderPlanFormImportSheetCfCell TableCellCreate(MdfReportFormExcelSheetRow row, MdfReportFormExcelSheetColumn column, ReportOrderPlanTableCell table_cell) {
            return new ReportOrderPlanFormImportSheetCfCellData(this, column, row, table_cell);
        }
        
    }
    
    public abstract class ReportOrderPlanFormImportSheetCfCell : ReportOrderPlanFormSheetCell<ReportOrderPlanAxisPeriodImport, ReportOrderPlanAxisPeriodImport.Ordinate, ReportOrderPlanAxisCfArticleImport, ReportOrderPlanAxisCfArticleImport.Ordinate, ReportOrderPlanFormImportSheetCf, ReportOrderPlanFormImportSheetCfCell> {
        
        public new ReportOrderPlanFormImportSheetCf Sheet {
            get { return (ReportOrderPlanFormImportSheetCf)base.Sheet; }
        }
        
        public ReportOrderPlanFormImportSheetCfCell(ReportOrderPlanFormImportSheetCf sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row) : base(sheet, column, row) {
        }
        
    }
    
    public partial class ReportOrderPlanFormImportSheetCfCellReport : ReportOrderPlanFormImportSheetCfCell {
        
        public override object Value {
            get { return null; }
            set { }
        }
        
        public override Object CellData {
            get { return Sheet.Form.Report; }
        }
        
        public override bool IsEditable {
            get { return false; }
        }
        
        public ReportOrderPlanFormImportSheetCfCellReport(ReportOrderPlanFormImportSheetCf sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row) : base(sheet, column, row) { }
        
    }
    
    public partial class ReportOrderPlanFormImportSheetCfCellData : ReportOrderPlanFormImportSheetCfCell {
        
        private readonly ReportOrderPlanTableCell _TableCell;
        public ReportOrderPlanTableCell TableCell {
            get { return _TableCell; }
        }
        
        public override object Value {
            get { return TableCell.DataPoint.Value; }
            set {
                if (TableCell.DataPoint != null)
                    TableCell.DataPoint.Value = value;
            }
        }
        
        public override Object CellData {
            get { return TableCell?.DataPoint; }
        }
        
        public override bool IsEditable {
            get { return TableCell.DataPoint.Calc == null; }
        }
        
        public ReportOrderPlanFormImportSheetCfCellData(ReportOrderPlanFormImportSheetCf sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row, ReportOrderPlanTableCell table_cell) : base(sheet, column, row) {
            _TableCell = table_cell;
        }
        
    }
    
    public partial class ReportOrderPlanFormImportSheetCfCellOrdinateX : ReportOrderPlanFormImportSheetCfCell {
        
        private readonly ReportOrderPlanAxisPeriodImport.Ordinate _Ordinate;
        public ReportOrderPlanAxisPeriodImport.Ordinate Ordinate {
            get { return _Ordinate; }
        }
        
        public override Object CellData {
            get { return Ordinate?.CategoryValue; }
        }
        
        public ReportOrderPlanFormImportSheetCfCellOrdinateX(ReportOrderPlanFormImportSheetCf sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row, ReportOrderPlanAxisPeriodImport.Ordinate ordinate) : base(sheet, column, row) {
            _Ordinate = ordinate;
        }
        
    }
    
    public partial class ReportOrderPlanFormImportSheetCfCellOrdinateY : ReportOrderPlanFormImportSheetCfCell {
        
        private readonly ReportOrderPlanAxisCfArticleImport.Ordinate _Ordinate;
        public ReportOrderPlanAxisCfArticleImport.Ordinate Ordinate {
            get { return _Ordinate; }
        }
        
        public override Object CellData {
            get { return Ordinate?.CategoryValue; }
        }
        
        public ReportOrderPlanFormImportSheetCfCellOrdinateY(ReportOrderPlanFormImportSheetCf sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row, ReportOrderPlanAxisCfArticleImport.Ordinate ordinate) : base(sheet, column, row) {
            _Ordinate = ordinate;
        }
        
    }
    
    public class ReportOrderPlanFormImportSheetDeal : ReportOrderPlanFormSheet <ReportOrderPlanAxisPeriodImport, ReportOrderPlanAxisPeriodImport.Ordinate, ReportOrderPlanAxisFindeal, ReportOrderPlanAxisFindeal.Ordinate, ReportOrderPlanFormImportSheetDeal, ReportOrderPlanFormImportSheetDealCell> {
        
        public new ReportOrderPlanFormImport Form {
            get { return (ReportOrderPlanFormImport)base.Form; }
        }
        
        public ReportOrderPlanFormImportSheetDeal(ReportOrderPlanFormImport form, ReportOrderPlanTable table, Int32 index) : base(table, form,  index) {
        }
        
        protected override ReportOrderPlanFormImportSheetDealCell ReportCellCreate(MdfReportFormExcelSheetRow row, MdfReportFormExcelSheetColumn column) {
            return new ReportOrderPlanFormImportSheetDealCellReport(this, column, row);
        }
        
        protected override ReportOrderPlanFormImportSheetDealCell OrdinateXCellCreate(MdfReportFormExcelSheetRow row, MdfReportFormExcelSheetColumn column, ReportOrderPlanAxisPeriodImport.Ordinate ordinate) {
            return new ReportOrderPlanFormImportSheetDealCellOrdinateX(this, column, row, ordinate);
        }
        
        protected override ReportOrderPlanFormImportSheetDealCell OrdinateYCellCreate(MdfReportFormExcelSheetRow row, MdfReportFormExcelSheetColumn column, ReportOrderPlanAxisFindeal.Ordinate ordinate) {
            return new ReportOrderPlanFormImportSheetDealCellOrdinateY(this, column, row, ordinate);
        }
        
        protected override ReportOrderPlanFormImportSheetDealCell TableCellCreate(MdfReportFormExcelSheetRow row, MdfReportFormExcelSheetColumn column, ReportOrderPlanTableCell table_cell) {
            return new ReportOrderPlanFormImportSheetDealCellData(this, column, row, table_cell);
        }
        
    }
    
    public abstract class ReportOrderPlanFormImportSheetDealCell : ReportOrderPlanFormSheetCell<ReportOrderPlanAxisPeriodImport, ReportOrderPlanAxisPeriodImport.Ordinate, ReportOrderPlanAxisFindeal, ReportOrderPlanAxisFindeal.Ordinate, ReportOrderPlanFormImportSheetDeal, ReportOrderPlanFormImportSheetDealCell> {
        
        public new ReportOrderPlanFormImportSheetDeal Sheet {
            get { return (ReportOrderPlanFormImportSheetDeal)base.Sheet; }
        }
        
        public ReportOrderPlanFormImportSheetDealCell(ReportOrderPlanFormImportSheetDeal sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row) : base(sheet, column, row) {
        }
        
    }
    
    public partial class ReportOrderPlanFormImportSheetDealCellReport : ReportOrderPlanFormImportSheetDealCell {
        
        public override object Value {
            get { return null; }
            set { }
        }
        
        public override Object CellData {
            get { return Sheet.Form.Report; }
        }
        
        public override bool IsEditable {
            get { return false; }
        }
        
        public ReportOrderPlanFormImportSheetDealCellReport(ReportOrderPlanFormImportSheetDeal sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row) : base(sheet, column, row) { }
        
    }
    
    public partial class ReportOrderPlanFormImportSheetDealCellData : ReportOrderPlanFormImportSheetDealCell {
        
        private readonly ReportOrderPlanTableCell _TableCell;
        public ReportOrderPlanTableCell TableCell {
            get { return _TableCell; }
        }
        
        public override object Value {
            get { return TableCell.DataPoint.Value; }
            set {
                if (TableCell.DataPoint != null)
                    TableCell.DataPoint.Value = value;
            }
        }
        
        public override Object CellData {
            get { return TableCell?.DataPoint; }
        }
        
        public override bool IsEditable {
            get { return TableCell.DataPoint.Calc == null; }
        }
        
        public ReportOrderPlanFormImportSheetDealCellData(ReportOrderPlanFormImportSheetDeal sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row, ReportOrderPlanTableCell table_cell) : base(sheet, column, row) {
            _TableCell = table_cell;
        }
        
    }
    
    public partial class ReportOrderPlanFormImportSheetDealCellOrdinateX : ReportOrderPlanFormImportSheetDealCell {
        
        private readonly ReportOrderPlanAxisPeriodImport.Ordinate _Ordinate;
        public ReportOrderPlanAxisPeriodImport.Ordinate Ordinate {
            get { return _Ordinate; }
        }
        
        public override Object CellData {
            get { return Ordinate?.CategoryValue; }
        }
        
        public ReportOrderPlanFormImportSheetDealCellOrdinateX(ReportOrderPlanFormImportSheetDeal sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row, ReportOrderPlanAxisPeriodImport.Ordinate ordinate) : base(sheet, column, row) {
            _Ordinate = ordinate;
        }
        
    }
    
    public partial class ReportOrderPlanFormImportSheetDealCellOrdinateY : ReportOrderPlanFormImportSheetDealCell {
        
        private readonly ReportOrderPlanAxisFindeal.Ordinate _Ordinate;
        public ReportOrderPlanAxisFindeal.Ordinate Ordinate {
            get { return _Ordinate; }
        }
        
        public override Object CellData {
            get { return Ordinate?.CategoryValue; }
        }
        
        public ReportOrderPlanFormImportSheetDealCellOrdinateY(ReportOrderPlanFormImportSheetDeal sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row, ReportOrderPlanAxisFindeal.Ordinate ordinate) : base(sheet, column, row) {
            _Ordinate = ordinate;
        }
        
    }
    
    public class ReportOrderPlanFormImportSheetGoods : ReportOrderPlanFormSheet <ReportOrderPlanAxisPeriodImport, ReportOrderPlanAxisPeriodImport.Ordinate, ReportOrderPlanAxisGoodsImport, ReportOrderPlanAxisGoodsImport.Ordinate, ReportOrderPlanFormImportSheetGoods, ReportOrderPlanFormImportSheetGoodsCell> {
        
        public new ReportOrderPlanFormImport Form {
            get { return (ReportOrderPlanFormImport)base.Form; }
        }
        
        public ReportOrderPlanFormImportSheetGoods(ReportOrderPlanFormImport form, ReportOrderPlanTable table, Int32 index) : base(table, form,  index) {
        }
        
        protected override ReportOrderPlanFormImportSheetGoodsCell ReportCellCreate(MdfReportFormExcelSheetRow row, MdfReportFormExcelSheetColumn column) {
            return new ReportOrderPlanFormImportSheetGoodsCellReport(this, column, row);
        }
        
        protected override ReportOrderPlanFormImportSheetGoodsCell OrdinateXCellCreate(MdfReportFormExcelSheetRow row, MdfReportFormExcelSheetColumn column, ReportOrderPlanAxisPeriodImport.Ordinate ordinate) {
            return new ReportOrderPlanFormImportSheetGoodsCellOrdinateX(this, column, row, ordinate);
        }
        
        protected override ReportOrderPlanFormImportSheetGoodsCell OrdinateYCellCreate(MdfReportFormExcelSheetRow row, MdfReportFormExcelSheetColumn column, ReportOrderPlanAxisGoodsImport.Ordinate ordinate) {
            return new ReportOrderPlanFormImportSheetGoodsCellOrdinateY(this, column, row, ordinate);
        }
        
        protected override ReportOrderPlanFormImportSheetGoodsCell TableCellCreate(MdfReportFormExcelSheetRow row, MdfReportFormExcelSheetColumn column, ReportOrderPlanTableCell table_cell) {
            return new ReportOrderPlanFormImportSheetGoodsCellData(this, column, row, table_cell);
        }
        
    }
    
    public abstract class ReportOrderPlanFormImportSheetGoodsCell : ReportOrderPlanFormSheetCell<ReportOrderPlanAxisPeriodImport, ReportOrderPlanAxisPeriodImport.Ordinate, ReportOrderPlanAxisGoodsImport, ReportOrderPlanAxisGoodsImport.Ordinate, ReportOrderPlanFormImportSheetGoods, ReportOrderPlanFormImportSheetGoodsCell> {
        
        public new ReportOrderPlanFormImportSheetGoods Sheet {
            get { return (ReportOrderPlanFormImportSheetGoods)base.Sheet; }
        }
        
        public ReportOrderPlanFormImportSheetGoodsCell(ReportOrderPlanFormImportSheetGoods sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row) : base(sheet, column, row) {
        }
        
    }
    
    public partial class ReportOrderPlanFormImportSheetGoodsCellReport : ReportOrderPlanFormImportSheetGoodsCell {
        
        public override object Value {
            get { return null; }
            set { }
        }
        
        public override Object CellData {
            get { return Sheet.Form.Report; }
        }
        
        public override bool IsEditable {
            get { return false; }
        }
        
        public ReportOrderPlanFormImportSheetGoodsCellReport(ReportOrderPlanFormImportSheetGoods sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row) : base(sheet, column, row) { }
        
    }
    
    public partial class ReportOrderPlanFormImportSheetGoodsCellData : ReportOrderPlanFormImportSheetGoodsCell {
        
        private readonly ReportOrderPlanTableCell _TableCell;
        public ReportOrderPlanTableCell TableCell {
            get { return _TableCell; }
        }
        
        public override object Value {
            get { return TableCell.DataPoint.Value; }
            set {
                if (TableCell.DataPoint != null)
                    TableCell.DataPoint.Value = value;
            }
        }
        
        public override Object CellData {
            get { return TableCell?.DataPoint; }
        }
        
        public override bool IsEditable {
            get { return TableCell.DataPoint.Calc == null; }
        }
        
        public ReportOrderPlanFormImportSheetGoodsCellData(ReportOrderPlanFormImportSheetGoods sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row, ReportOrderPlanTableCell table_cell) : base(sheet, column, row) {
            _TableCell = table_cell;
        }
        
    }
    
    public partial class ReportOrderPlanFormImportSheetGoodsCellOrdinateX : ReportOrderPlanFormImportSheetGoodsCell {
        
        private readonly ReportOrderPlanAxisPeriodImport.Ordinate _Ordinate;
        public ReportOrderPlanAxisPeriodImport.Ordinate Ordinate {
            get { return _Ordinate; }
        }
        
        public override Object CellData {
            get { return Ordinate?.CategoryValue; }
        }
        
        public ReportOrderPlanFormImportSheetGoodsCellOrdinateX(ReportOrderPlanFormImportSheetGoods sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row, ReportOrderPlanAxisPeriodImport.Ordinate ordinate) : base(sheet, column, row) {
            _Ordinate = ordinate;
        }
        
    }
    
    public partial class ReportOrderPlanFormImportSheetGoodsCellOrdinateY : ReportOrderPlanFormImportSheetGoodsCell {
        
        private readonly ReportOrderPlanAxisGoodsImport.Ordinate _Ordinate;
        public ReportOrderPlanAxisGoodsImport.Ordinate Ordinate {
            get { return _Ordinate; }
        }
        
        public override Object CellData {
            get { return Ordinate?.CategoryValue; }
        }
        
        public ReportOrderPlanFormImportSheetGoodsCellOrdinateY(ReportOrderPlanFormImportSheetGoods sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row, ReportOrderPlanAxisGoodsImport.Ordinate ordinate) : base(sheet, column, row) {
            _Ordinate = ordinate;
        }
        
    }
    
    public class ReportOrderPlanFormImportSheetStandarts : ReportOrderPlanFormSheet <ReportOrderPlanAxisPeriodImport, ReportOrderPlanAxisPeriodImport.Ordinate, ReportOrderPlanAxisStandartImport, ReportOrderPlanAxisStandartImport.Ordinate, ReportOrderPlanFormImportSheetStandarts, ReportOrderPlanFormImportSheetStandartsCell> {
        
        public new ReportOrderPlanFormImport Form {
            get { return (ReportOrderPlanFormImport)base.Form; }
        }
        
        public ReportOrderPlanFormImportSheetStandarts(ReportOrderPlanFormImport form, ReportOrderPlanTable table, Int32 index) : base(table, form,  index) {
        }
        
        protected override ReportOrderPlanFormImportSheetStandartsCell ReportCellCreate(MdfReportFormExcelSheetRow row, MdfReportFormExcelSheetColumn column) {
            return new ReportOrderPlanFormImportSheetStandartsCellReport(this, column, row);
        }
        
        protected override ReportOrderPlanFormImportSheetStandartsCell OrdinateXCellCreate(MdfReportFormExcelSheetRow row, MdfReportFormExcelSheetColumn column, ReportOrderPlanAxisPeriodImport.Ordinate ordinate) {
            return new ReportOrderPlanFormImportSheetStandartsCellOrdinateX(this, column, row, ordinate);
        }
        
        protected override ReportOrderPlanFormImportSheetStandartsCell OrdinateYCellCreate(MdfReportFormExcelSheetRow row, MdfReportFormExcelSheetColumn column, ReportOrderPlanAxisStandartImport.Ordinate ordinate) {
            return new ReportOrderPlanFormImportSheetStandartsCellOrdinateY(this, column, row, ordinate);
        }
        
        protected override ReportOrderPlanFormImportSheetStandartsCell TableCellCreate(MdfReportFormExcelSheetRow row, MdfReportFormExcelSheetColumn column, ReportOrderPlanTableCell table_cell) {
            return new ReportOrderPlanFormImportSheetStandartsCellData(this, column, row, table_cell);
        }
        
    }
    
    public abstract class ReportOrderPlanFormImportSheetStandartsCell : ReportOrderPlanFormSheetCell<ReportOrderPlanAxisPeriodImport, ReportOrderPlanAxisPeriodImport.Ordinate, ReportOrderPlanAxisStandartImport, ReportOrderPlanAxisStandartImport.Ordinate, ReportOrderPlanFormImportSheetStandarts, ReportOrderPlanFormImportSheetStandartsCell> {
        
        public new ReportOrderPlanFormImportSheetStandarts Sheet {
            get { return (ReportOrderPlanFormImportSheetStandarts)base.Sheet; }
        }
        
        public ReportOrderPlanFormImportSheetStandartsCell(ReportOrderPlanFormImportSheetStandarts sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row) : base(sheet, column, row) {
        }
        
    }
    
    public partial class ReportOrderPlanFormImportSheetStandartsCellReport : ReportOrderPlanFormImportSheetStandartsCell {
        
        public override object Value {
            get { return null; }
            set { }
        }
        
        public override Object CellData {
            get { return Sheet.Form.Report; }
        }
        
        public override bool IsEditable {
            get { return false; }
        }
        
        public ReportOrderPlanFormImportSheetStandartsCellReport(ReportOrderPlanFormImportSheetStandarts sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row) : base(sheet, column, row) { }
        
    }
    
    public partial class ReportOrderPlanFormImportSheetStandartsCellData : ReportOrderPlanFormImportSheetStandartsCell {
        
        private readonly ReportOrderPlanTableCell _TableCell;
        public ReportOrderPlanTableCell TableCell {
            get { return _TableCell; }
        }
        
        public override object Value {
            get { return TableCell.DataPoint.Value; }
            set {
                if (TableCell.DataPoint != null)
                    TableCell.DataPoint.Value = value;
            }
        }
        
        public override Object CellData {
            get { return TableCell?.DataPoint; }
        }
        
        public override bool IsEditable {
            get { return TableCell.DataPoint.Calc == null; }
        }
        
        public ReportOrderPlanFormImportSheetStandartsCellData(ReportOrderPlanFormImportSheetStandarts sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row, ReportOrderPlanTableCell table_cell) : base(sheet, column, row) {
            _TableCell = table_cell;
        }
        
    }
    
    public partial class ReportOrderPlanFormImportSheetStandartsCellOrdinateX : ReportOrderPlanFormImportSheetStandartsCell {
        
        private readonly ReportOrderPlanAxisPeriodImport.Ordinate _Ordinate;
        public ReportOrderPlanAxisPeriodImport.Ordinate Ordinate {
            get { return _Ordinate; }
        }
        
        public override Object CellData {
            get { return Ordinate?.CategoryValue; }
        }
        
        public ReportOrderPlanFormImportSheetStandartsCellOrdinateX(ReportOrderPlanFormImportSheetStandarts sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row, ReportOrderPlanAxisPeriodImport.Ordinate ordinate) : base(sheet, column, row) {
            _Ordinate = ordinate;
        }
        
    }
    
    public partial class ReportOrderPlanFormImportSheetStandartsCellOrdinateY : ReportOrderPlanFormImportSheetStandartsCell {
        
        private readonly ReportOrderPlanAxisStandartImport.Ordinate _Ordinate;
        public ReportOrderPlanAxisStandartImport.Ordinate Ordinate {
            get { return _Ordinate; }
        }
        
        public override Object CellData {
            get { return Ordinate?.CategoryValue; }
        }
        
        public ReportOrderPlanFormImportSheetStandartsCellOrdinateY(ReportOrderPlanFormImportSheetStandarts sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row, ReportOrderPlanAxisStandartImport.Ordinate ordinate) : base(sheet, column, row) {
            _Ordinate = ordinate;
        }
        
    }
    
    public class ReportOrderPlanFormImportSheetCalc : ReportOrderPlanFormSheet <ReportOrderPlanAxisCalcImportCol, ReportOrderPlanAxisCalcImportCol.Ordinate, ReportOrderPlanAxisCalcImportRow, ReportOrderPlanAxisCalcImportRow.Ordinate, ReportOrderPlanFormImportSheetCalc, ReportOrderPlanFormImportSheetCalcCell> {
        
        public new ReportOrderPlanFormImport Form {
            get { return (ReportOrderPlanFormImport)base.Form; }
        }
        
        public ReportOrderPlanFormImportSheetCalc(ReportOrderPlanFormImport form, ReportOrderPlanTable table, Int32 index) : base(table, form,  index) {
        }
        
        protected override ReportOrderPlanFormImportSheetCalcCell ReportCellCreate(MdfReportFormExcelSheetRow row, MdfReportFormExcelSheetColumn column) {
            return new ReportOrderPlanFormImportSheetCalcCellReport(this, column, row);
        }
        
        protected override ReportOrderPlanFormImportSheetCalcCell OrdinateXCellCreate(MdfReportFormExcelSheetRow row, MdfReportFormExcelSheetColumn column, ReportOrderPlanAxisCalcImportCol.Ordinate ordinate) {
            return new ReportOrderPlanFormImportSheetCalcCellOrdinateX(this, column, row, ordinate);
        }
        
        protected override ReportOrderPlanFormImportSheetCalcCell OrdinateYCellCreate(MdfReportFormExcelSheetRow row, MdfReportFormExcelSheetColumn column, ReportOrderPlanAxisCalcImportRow.Ordinate ordinate) {
            return new ReportOrderPlanFormImportSheetCalcCellOrdinateY(this, column, row, ordinate);
        }
        
        protected override ReportOrderPlanFormImportSheetCalcCell TableCellCreate(MdfReportFormExcelSheetRow row, MdfReportFormExcelSheetColumn column, ReportOrderPlanTableCell table_cell) {
            return new ReportOrderPlanFormImportSheetCalcCellData(this, column, row, table_cell);
        }
        
    }
    
    public abstract class ReportOrderPlanFormImportSheetCalcCell : ReportOrderPlanFormSheetCell<ReportOrderPlanAxisCalcImportCol, ReportOrderPlanAxisCalcImportCol.Ordinate, ReportOrderPlanAxisCalcImportRow, ReportOrderPlanAxisCalcImportRow.Ordinate, ReportOrderPlanFormImportSheetCalc, ReportOrderPlanFormImportSheetCalcCell> {
        
        public new ReportOrderPlanFormImportSheetCalc Sheet {
            get { return (ReportOrderPlanFormImportSheetCalc)base.Sheet; }
        }
        
        public ReportOrderPlanFormImportSheetCalcCell(ReportOrderPlanFormImportSheetCalc sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row) : base(sheet, column, row) {
        }
        
    }
    
    public partial class ReportOrderPlanFormImportSheetCalcCellReport : ReportOrderPlanFormImportSheetCalcCell {
        
        public override object Value {
            get { return null; }
            set { }
        }
        
        public override Object CellData {
            get { return Sheet.Form.Report; }
        }
        
        public override bool IsEditable {
            get { return false; }
        }
        
        public ReportOrderPlanFormImportSheetCalcCellReport(ReportOrderPlanFormImportSheetCalc sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row) : base(sheet, column, row) { }
        
    }
    
    public partial class ReportOrderPlanFormImportSheetCalcCellData : ReportOrderPlanFormImportSheetCalcCell {
        
        private readonly ReportOrderPlanTableCell _TableCell;
        public ReportOrderPlanTableCell TableCell {
            get { return _TableCell; }
        }
        
        public override object Value {
            get { return TableCell.DataPoint.Value; }
            set {
                if (TableCell.DataPoint != null)
                    TableCell.DataPoint.Value = value;
            }
        }
        
        public override Object CellData {
            get { return TableCell?.DataPoint; }
        }
        
        public override bool IsEditable {
            get { return TableCell.DataPoint.Calc == null; }
        }
        
        public ReportOrderPlanFormImportSheetCalcCellData(ReportOrderPlanFormImportSheetCalc sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row, ReportOrderPlanTableCell table_cell) : base(sheet, column, row) {
            _TableCell = table_cell;
        }
        
    }
    
    public partial class ReportOrderPlanFormImportSheetCalcCellOrdinateX : ReportOrderPlanFormImportSheetCalcCell {
        
        private readonly ReportOrderPlanAxisCalcImportCol.Ordinate _Ordinate;
        public ReportOrderPlanAxisCalcImportCol.Ordinate Ordinate {
            get { return _Ordinate; }
        }
        
        public override Object CellData {
            get { return Ordinate?.CategoryValue; }
        }
        
        public ReportOrderPlanFormImportSheetCalcCellOrdinateX(ReportOrderPlanFormImportSheetCalc sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row, ReportOrderPlanAxisCalcImportCol.Ordinate ordinate) : base(sheet, column, row) {
            _Ordinate = ordinate;
        }
        
    }
    
    public partial class ReportOrderPlanFormImportSheetCalcCellOrdinateY : ReportOrderPlanFormImportSheetCalcCell {
        
        private readonly ReportOrderPlanAxisCalcImportRow.Ordinate _Ordinate;
        public ReportOrderPlanAxisCalcImportRow.Ordinate Ordinate {
            get { return _Ordinate; }
        }
        
        public override Object CellData {
            get { return Ordinate?.CategoryValue; }
        }
        
        public ReportOrderPlanFormImportSheetCalcCellOrdinateY(ReportOrderPlanFormImportSheetCalc sheet, MdfReportFormExcelSheetColumn column, MdfReportFormExcelSheetRow row, ReportOrderPlanAxisCalcImportRow.Ordinate ordinate) : base(sheet, column, row) {
            _Ordinate = ordinate;
        }
        
    }
}
